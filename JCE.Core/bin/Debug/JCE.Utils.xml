<?xml version="1.0"?>
<doc>
    <assembly>
        <name>JCE.Utils</name>
    </assembly>
    <members>
        <member name="T:JCE.Utils.Algorithms.ISort">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:JCE.Utils.Algorithms.ISort.Sort``1(``0[])">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="input">待排序数组</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Algorithms.MathUtil">
            <summary>
            计算工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Algorithms.MathUtil.GetMinMinus``1(System.Collections.Generic.List{``0},System.Func{``0,System.Decimal})">
            <summary>
            获取集合中差值最小的两个数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数组</param>
            <param name="selector">条件</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Algorithms.MathUtil.GetMinMinus``1(System.Collections.Generic.List{``0},System.Func{``0,System.Double})">
            <summary>
            获取集合中差值最小的两个数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数组</param>
            <param name="selector">条件</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Algorithms.MathUtil.GetMinMinus``1(System.Collections.Generic.List{``0},System.Func{``0,System.Int32})">
            <summary>
            获取集合中差值最小的两个数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数组</param>
            <param name="selector">条件</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Algorithms.MathUtil.GetMinMinus``1(System.Collections.Generic.List{``0},System.Func{``0,System.Single})">
            <summary>
            获取集合中差值最小的两个数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数组</param>
            <param name="selector">条件</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Algorithms.MathUtil.GetMinMinus``1(System.Collections.Generic.List{``0},System.Func{``0,System.Int64})">
            <summary>
            获取集合中差值最小的两个数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数组</param>
            <param name="selector">条件</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Algorithms.MathUtil.GetMinMinus``1(System.Collections.Generic.List{``0},System.Func{``0,System.Byte})">
            <summary>
            获取集合中差值最小的两个数值
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数组</param>
            <param name="selector">条件</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Algorithms.Sorts.BubbleSort">
            <summary>
            冒泡排序算法
            </summary>
        </member>
        <member name="M:JCE.Utils.Algorithms.Sorts.BubbleSort.Sort``1(``0[])">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="input">待排序的数组</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Algorithms.Sorts.InsertionSort">
            <summary>
            插入排序算法
            </summary>
        </member>
        <member name="M:JCE.Utils.Algorithms.Sorts.InsertionSort.Sort``1(``0[])">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="input">待排序数组</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Algorithms.Sorts.SelectionSort">
            <summary>
            选择排序算法
            </summary>
        </member>
        <member name="M:JCE.Utils.Algorithms.Sorts.SelectionSort.Sort``1(``0[])">
            <summary>
            排序
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="input">待排序数组</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.AttributeUtil">
            <summary>
            属性操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.AttributeUtil.GetAttribute``1(System.Reflection.MemberInfo)">
            <summary>
            获取属性信息
            </summary>
            <typeparam name="TAttribute">泛型属性</typeparam>
            <param name="memberInfo">元数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.AttributeUtil.GetAttributes``1(System.Reflection.MemberInfo)">
            <summary>
            获取属性信息数组
            </summary>
            <typeparam name="TAttribute">泛型属性</typeparam>
            <param name="memberInfo">元数据</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.ByteUtil">
            <summary>
            字节操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.DecodeString(System.Byte[],System.Int32,System.Int32@,System.Text.Encoding)">
            <summary>
            从byte数组中取出string字符串，消息的格式为[消息长度,int 4字节][消息内容]
            </summary>
            <param name="sourceBuffer">源字节</param>
            <param name="startOffset">开始位置</param>
            <param name="nextStartOffset">下一步开始位置</param>
            <param name="encoding">编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.DecodeInt(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            从byte数组中取出int数字
            </summary>
            <param name="sourceBuffer">源字节</param>
            <param name="startOffset">开始位置</param>
            <param name="nextStartOffset">下一步开始位置</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.DecodeLong(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            从byte数组中取出long数字
            </summary>
            <param name="sourceBuffer">源字节</param>
            <param name="startOffset">开始位置</param>
            <param name="nextStartOffset">下一步开始位置</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.DecodeDateTime(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            从byte数组中取出DateTime时间
            </summary>
            <param name="sourceBuffer">源字节</param>
            <param name="startOffset">开始位置</param>
            <param name="nextStartOffset">下一步开始位置</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.DecodeBytes(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            从byte数组中取出byte[]，如果消息是这样的格式：[消息长度,byte 4字节][消息内容]，取出该消息返回byte[]
            </summary>
            <param name="sourceBuffer">源字节</param>
            <param name="startOffset">开始位置</param>
            <param name="nextStartOffset">下一步开始位置</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.Combine(System.Byte[][])">
            <summary>
            合并byte[]
            </summary>
            <param name="arrays">byte数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.ToSBCCase(System.Byte[])">
            <summary>
            半角转全角
            </summary>
            <param name="buff">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.SubBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            从byte[]中截取子串
            </summary>
            <param name="buff">源字节数组</param>
            <param name="start">开始索引</param>
            <param name="length">截取长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.Reverse(System.Byte[])">
            <summary>
            反转数组，将byte[]顺序反转
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.SpecCharConvert(System.Byte[])">
            <summary>
            转义特殊字符，即'~'(0x7E)
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.SpecCharReverse(System.Byte[])">
            <summary>
            反转义特殊字符，即'~'(0x7E) 
            0x7D0x5E->0x7E, 0x7D0x5D->0x7D
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.BufferLookup(System.Byte[],System.Byte[])">
            <summary>
            查找指定字节数组首次出现的位置索引
            </summary>
            <param name="srcBuff">源字节数组</param>
            <param name="subBuff">需要查找的内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.BufferLookup(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            查找指定字节数组首次出现的位置索引
            </summary>
            <param name="srcBuff">源字节数组</param>
            <param name="subBuff">需要查找的内容</param>
            <param name="start">开始索引</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.BufferLookup(System.Byte[],System.String)">
            <summary>
            查找指定字节数组首次出现的位置索引
            </summary>
            <param name="srcBuff">源字节数组</param>
            <param name="subChars">需要查找的内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.BufferLookup(System.Byte[],System.String,System.Int32)">
            <summary>
            查找指定字节数组首次出现的位置索引
            </summary>
            <param name="srcBuff">源字节数组</param>
            <param name="subChars">需要查找的内容</param>
            <param name="start">开始索引</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.GetSwapBytes(System.UInt16)">
            <summary>
            获取 ushort 的高低位反转 byte[]
            </summary>
            <param name="u">数值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.GetSwapBytes(System.Int32)">
            <summary>
            获取 int 的高低位反转 byte[]
            </summary>
            <param name="i">数值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.GetSwappedUshort(System.Byte[],System.Int32)">
            <summary>
            将倒序的ushort字节还原为ushort
            </summary>
            <param name="buffer">ushort字节数组</param>
            <param name="start">开始索引</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.GetSwappedUint(System.Byte[],System.Int32)">
            <summary>
            将倒序的uint字节还原为uint
            </summary>
            <param name="buffer">uint字节数组</param>
            <param name="start">开始索引</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.ToDbDate(System.DateTime)">
            <summary>
            将日期时间格式的字符串转换到数据库使用的日期类型
            </summary>
            <param name="dateTime">时间</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.RevertDateTime(System.Byte[])">
            <summary>
            还原成原有的日期时间格式字符串
            </summary>
            <param name="timeBuff">时间字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.HexToBytes(System.String)">
            <summary>
            十六进制转换成二进制
            </summary>
            <param name="value">十六进制字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.Compare(System.Byte[],System.Byte[])">
            <summary>
            确定两个字节数组是否相等
            </summary>
            <param name="byte1">字节数组</param>
            <param name="byte2">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.Combine(System.Byte[],System.Byte[])">
            <summary>
            合并字节数组
            </summary>
            <param name="byte1">前缀字节数组</param>
            <param name="byte2">后缀字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ByteUtil.Clone(System.Byte[])">
            <summary>
            复制一个新的字节数组
            </summary>
            <param name="bytes">字节数组</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.CacheUtil">
            <summary>
            ASP.NET缓存工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.CacheUtil.Get(System.String)">
            <summary>
            获取数据缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.CacheUtil.Set(System.String,System.Object)">
            <summary>
            设置数据缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="objValue">对象值</param>
        </member>
        <member name="M:JCE.Utils.Common.CacheUtil.Set(System.String,System.Object,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="objValue">对象值</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:JCE.Utils.Common.CacheUtil.Set(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置数据缓存
            </summary>
            <param name="cacheKey">缓存键</param>
            <param name="objValue">对象值</param>
            <param name="absoluteExpiration">绝对过期时间，过了这个时间点，缓存即过期</param>
            <param name="slidingExpiration">滑动过期时间，在此时间内访问缓存，缓存将继续有效</param>
        </member>
        <member name="M:JCE.Utils.Common.CacheUtil.Remove(System.String)">
            <summary>
            移除指定数据缓存
            </summary>
            <param name="cacheKey">缓存键</param>
        </member>
        <member name="M:JCE.Utils.Common.CacheUtil.RemoveAll">
            <summary>
            移除全部缓存
            </summary>
        </member>
        <member name="T:JCE.Utils.Common.ConfigUtil">
            <summary>
            配置信息工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.ConfigUtil.GetAppSettings(System.String)">
            <summary>
            获取AppSettings
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ConfigUtil.SetAppSettings(System.String,System.String)">
            <summary>
            设置AppSettings
            </summary>
            <param name="key">键名</param>
            <param name="value">键值</param>
        </member>
        <member name="M:JCE.Utils.Common.ConfigUtil.RemoveAppSettings(System.String)">
            <summary>
            移除AppSettings
            </summary>
            <param name="key">键名</param>
        </member>
        <member name="M:JCE.Utils.Common.ConfigUtil.GetConnectionString(System.String)">
            <summary>
            获取数据库连接字符串
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ConfigUtil.SetConnectionString(System.String,System.String,System.String)">
            <summary>
            设置数据库连接字符串
            </summary>
            <param name="key">键名</param>
            <param name="connectionStr">数据库连接字符串</param>
            <param name="providerName">数据提供程序名称</param>
        </member>
        <member name="M:JCE.Utils.Common.ConfigUtil.GetProviderName(System.String)">
            <summary>
            获取数据提供程序名称
            </summary>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ConfigUtil.GetSystemWebSection``1(JCE.Utils.Common.SystemWebSections)">
            <summary>
            获取system.web节点
            </summary>
            <typeparam name="T">配置节点类型</typeparam>
            <param name="sections">节点类型</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.EnumUtil">
            <summary>
            枚举工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetInstance``1(System.Object)">
            <summary>
            获取实例
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名或值,范例:Enum1枚举有成员A=0,则传入"A"或"0"获取 Enum1.A</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetName``1(System.Object)">
            <summary>
            获取成员名
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,则传入Enum1.A或0,获取成员名"A"</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetName(System.Type,System.Object)">
            <summary>
            获取成员名
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetNames``1">
            <summary>
            获取枚举所有成员名称
            </summary>
            <typeparam name="T">枚举</typeparam>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetNames(System.Type)">
            <summary>
            获取枚举所有成员名称
            </summary>
            <param name="type">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetValue``1(System.Object)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetValue(System.Type,System.Object)">
            <summary>
            获取成员值
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetDescription``1(System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <typeparam name="T">枚举</typeparam>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetDescription(System.Type,System.Object)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="type">枚举类型</param>
            <param name="member">成员名、值、实例均可,范例:Enum1枚举有成员A=0,可传入"A"、0、Enum1.A，获取值0</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetItems``1">
            <summary>
            获取描述项集合,文本设置为Description，值为Value
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.ValidationIsEnum(System.Type)">
            <summary>
            验证是否枚举类型
            </summary>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.AddItem``1(System.Collections.Generic.ICollection{JCE.Utils.Item},System.Reflection.FieldInfo,System.Type)">
            <summary>
            添加描述项
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="result">结果集</param>
            <param name="field">枚举字段</param>
            <param name="enumType">枚举类型</param>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetValue``1(System.Reflection.FieldInfo,System.Type)">
            <summary>
            获取值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="field">枚举字段</param>
            <param name="enumType">枚举类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetSortId(System.Reflection.FieldInfo)">
            <summary>
            获取排序号
            </summary>
            <param name="field">枚举字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.EnumUtil.GetEnumItemByDescription``1(System.String)">
            <summary>
            获取指定描述信息的枚举项
            </summary>
            <typeparam name="TEnum">枚举类型。</typeparam>
            <param name="desc">枚举项描述信息。</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.GuidUtil">
            <summary>
            Guid工具类
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.GuidUtil.EpochMilliseconds">
            <summary>
            1970年1月1日毫秒
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.GuidUtil.NewSequentialGuid">
            <summary>
            获取Guid，根据SqlServer排序规则顺序创建Guid
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.GuidUtil.NewStringGuidD">
            <summary>
            获取Guid字符串，不带"-"分隔符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.GuidUtil.NewStringGuidN">
            <summary>
            获取Guid字符串，带"-"分隔符
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.GuidUtil.GetGuidString">
            <summary>
            获取Guid字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.GuidUtil.GetGuidLong">
            <summary>
            获取Guid长整型
            后话：原来BitConverter.ToInt64方法，只取buffer从startIndex开始向后加7个字节的值。
            也就是说，我们16字节的高8个字节被忽略掉了。GUID理想情况下，要2^128个数据才会出现冲突，
            而转换后，把字节数减半，也就是2^64数据就会出现冲突。
            </summary>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.MoneyUtil">
            <summary>
            货币操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.MoneyUtil.ToUppercaseAmount(System.Decimal)">
            <summary>
            转换人民币大写形式金额
            </summary>
            <param name="number">金额</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.MoneyUtil.ToUppercaseAmount(System.String)">
            <summary>
            重载，转换人民币大写形式金额
            </summary>
            <param name="number">金额</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.OrderByAttribute">
            <summary>
            排序
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.OrderByAttribute.#ctor(System.Int32)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Common.OrderByAttribute"/>类型的实例
            </summary>
            <param name="sortId">排序号</param>
        </member>
        <member name="P:JCE.Utils.Common.OrderByAttribute.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:JCE.Utils.Common.ResourceUtil">
            <summary>
            资源操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.ResourceUtil.GetString(System.String,System.String)">
            <summary>
            获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名，应使用完全限定名称，范例：Test.Unit.Resources.TestResource</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ResourceUtil.GetString(System.String,System.String,System.String)">
            <summary>
            获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名，应使用完全限定名称，范例：Test.Unit.Resources.TestResource</param>
            <param name="key">键名</param>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ResourceUtil.GetString(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名，应使用完全限定名称，范例：Test.Unit.Resources.TestResource</param>
            <param name="key">键名</param>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ResourceUtil.ValidateGetString(System.String,System.String)">
            <summary>
            验证获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名</param>
            <param name="key">资源值</param>
        </member>
        <member name="M:JCE.Utils.Common.ResourceUtil.GetResourceStringFormAssembly(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            从资源中获取字符串
            </summary>
            <param name="resourceName">资源名</param>
            <param name="key">资源值</param>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ResourceUtil.GetStringByManager(System.String,System.String,System.Reflection.Assembly)">
            <summary>
            获取资源文件中的字符串
            </summary>
            <param name="resourceName">资源名</param>
            <param name="key">资源值</param>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.ResourceUtil.GetResourceFullName(System.String,System.Reflection.Assembly)">
            <summary>
            获取资源名的全名
            </summary>
            <param name="resourceName">资源名</param>
            <param name="assembly">程序集</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.SerializeUtil">
            <summary>
            序列化操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.SerializeUtil.ToBytes(System.Object)">
            <summary>
            将对象序列化到字节流中
            </summary>
            <param name="instance">对象</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.SerializeUtil.FromBytes``1(System.Byte[])">
            <summary>
            将字节流反序列化为对象
            </summary>
            <typeparam name="T">对象类名</typeparam>
            <param name="buffer">字节流</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Common.SystemWebSections">
            <summary>
            system.web节点类型
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.SystemWebSections.Authentication">
            <summary>
            配置 Web 应用程序的身份验证
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.SystemWebSections.Compilation">
            <summary>
            定义用于支持 Web 应用程序的编译基础结构的配置设置
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.SystemWebSections.CustomErrors">
            <summary>
            配置 ASP.NET 自定义错误
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.SystemWebSections.Globalization">
            <summary>
            定义用于支持 Web 应用程序的全球化基础结构的配置设置
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.SystemWebSections.HttpRuntime">
            <summary>
            配置 ASP.NET HTTP 运行时
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.SystemWebSections.Identity">
            <summary>
            配置 Web 应用程序的标识
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.SystemWebSections.Trace">
            <summary>
            配置 ASP.NET 跟踪服务
            </summary>
        </member>
        <member name="T:JCE.Utils.Common.ThreadUtil">
            <summary>
            线程操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.ThreadUtil.Sleep(System.Int32)">
            <summary>
            线程等待
            </summary>
            <param name="time">等待时间，单位:毫秒</param>
        </member>
        <member name="M:JCE.Utils.Common.ThreadUtil.StartTask(System.Action)">
            <summary>
            启动异步任务
            </summary>
            <param name="handler">任务，范例：() => { 代码 }</param>
        </member>
        <member name="M:JCE.Utils.Common.ThreadUtil.StartTask(System.Action{System.Object},System.Object)">
            <summary>
            启动异步任务
            </summary>
            <param name="handler">任务，范例：t => { 代码 }</param>
            <param name="state">传递的参数</param>
        </member>
        <member name="P:JCE.Utils.Common.ThreadUtil.ThreadId">
            <summary>
            获取线程编号
            </summary>
        </member>
        <member name="P:JCE.Utils.Common.ThreadUtil.CurrentPrincipal">
            <summary>
            获取当前安全主体
            </summary>
        </member>
        <member name="P:JCE.Utils.Common.ThreadUtil.MaxThreadNumberInThreadPool">
            <summary>
            获取线程池中最大线程数
            </summary>
        </member>
        <member name="T:JCE.Utils.Common.TypeUtil">
            <summary>
            类型工具类，获取属性相关信息
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.TypeUtil.GetPropertyAttributes(System.String,System.Reflection.PropertyInfo,System.Type)">
            <summary>
            获取属性特性
            </summary>
            <param name="typeName">类型名</param>
            <param name="info">属性悉尼型</param>
            <param name="attributeType">特性类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Common.TypeUtil.GetProperties(System.Type)">
            <summary>
            获取属性集合
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Const">
            <summary>
            常量
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.ArabicNumbers">
            <summary>
            阿拉伯数字
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.ChineseNumbers">
            <summary>
            汉字数字
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.Lowercase">
            <summary>
            小写英文字母
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.Uppercase">
            <summary>
            大写英文字母
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.Dot">
            <summary>
            点
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.Underscore">
            <summary>
            下划线
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.CommaSpace">
            <summary>
            逗号空格
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.Comm">
            <summary>
            逗号
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.OpenParen">
            <summary>
            左括号
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.ClosedParen">
            <summary>
            右括号
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.SingleQuote">
            <summary>
            单引号
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.Slash">
            <summary>
            斜杠
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.MonetaryUnit">
            <summary>
            金额单位
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DefaultString">
            <summary>
            默认缺省字符串
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.Base64String">
            <summary>
            Base64加密字符串
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.TempKey">
            <summary>
            临时加密密匙
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.StoreKey">
            <summary>
            存储加密密匙
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.RandomString">
            <summary>
            随机字符串
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.SimplifiedChinese">
            <summary>
            常用简体汉字
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.ChinesePinYin">
            <summary>
            汉字及拼音首字母
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.CurrentMvcFunctionKey">
            <summary>
            当前MVC执行方法密匙
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.CurrentWebApiFunctionKey">
            <summary>
            当前WebApi执行方法密匙
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.VerifyCodeSession">
            <summary>
            验证码缓存键
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.SpellLetter">
            <summary>
            拼音字母数组
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.SpellCode">
            <summary>
            拼音区编码数组
            </summary>
        </member>
        <member name="P:JCE.Utils.Const.DefaultEncoding">
            <summary>
            默认编码，值为UTF-8
            </summary>
        </member>
        <member name="P:JCE.Utils.Const.DefaultCultureInfo">
            <summary>
            默认区域设置，值为<see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>
            </summary>
        </member>
        <member name="P:JCE.Utils.Const.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="P:JCE.Utils.Const.FileExtensionDict">
            <summary>
            文件扩展类型字典
            </summary>
        </member>
        <member name="T:JCE.Utils.Const.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DateFormat.yyyyMMdd">
            <summary>
            yyyyMMdd
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DateFormat.yyyy_MM_dd">
            <summary>
            yyyy-MM-dd
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DateFormat.yyyyMMddHHmm">
            <summary>
            yyyyMMddHHmm
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DateFormat.yyyy_MM_dd__HH_mm">
            <summary>
            yyyy_MM_dd HH:mm
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DateFormat.yyyyMMddHHmmss">
            <summary>
            yyyyMMddHHmmss
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DateFormat.yyyy_MM_dd__HH_mm_ss">
            <summary>
            yyyy-MM-dd HH:mm:ss
            </summary>
        </member>
        <member name="F:JCE.Utils.Const.DateFormat.yyyyMMddHHmmssfffff">
            <summary>
            yyyyMMddHHmmssfffff
            </summary>
        </member>
        <member name="T:JCE.Utils.Conv">
            <summary>
            类型转换
            </summary>
        </member>
        <member name="M:JCE.Utils.Conv.ToInt(System.Object)">
            <summary>
            转换成int类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToIntOrNull(System.Object)">
            <summary>
            转换为可空int类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToLong(System.Object)">
            <summary>
            转换为long类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToLongOrNull(System.Object)">
            <summary>
            转换为可空long类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDouble(System.Object)">
            <summary>
            转换为double类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDouble(System.Object,System.Int32)">
            <summary>
            转换为double类型,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDoubleOrNull(System.Object)">
            <summary>
            转换为可空double类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDecimal(System.Object)">
            <summary>
            转换为decimal类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDecimal(System.Object,System.Int32)">
            <summary>
            转换为decimal类型,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDecimalOrNull(System.Object)">
            <summary>
            转换为可空decimal类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDecimalOrNull(System.Object,System.Int32)">
            <summary>
            转换为可空decimal类型,并按指定的小数位4舍5入
            </summary>
            <param name="data">数据</param>
            <param name="digits">小数位数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToGuid(System.Object)">
            <summary>
            转换为Guid类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToGuidOrNull(System.Object)">
            <summary>
            转换为可空Guid类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="list">guid集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDate(System.Object)">
            <summary>
            转换为DateTime类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToDateOrNull(System.Object)">
            <summary>
            转换为可空DateTime类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToBool(System.Object)">
            <summary>
            转换为bool类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToBoolOrNull(System.Object)">
            <summary>
            转换为可空bool类型
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.GetBool(System.Object)">
            <summary>
            获取布尔值
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToString(System.Object)">
            <summary>
            转换为字符串
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.To``1(System.Object)">
            <summary>
            转换为目标元素
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToList``1(System.String)">
            <summary>
            转换为目标元素集合
            </summary>
            <typeparam name="T">目标元素类型</typeparam>
            <param name="list">元素集合字符串，范例:83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToBytes(System.IO.Stream,System.Int32)">
            <summary>
            将Stream转换成byte[]
            </summary>
            <param name="stream">内存流</param>
            <param name="bufferLen">缓存长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Conv.ToStream(System.Byte[])">
            <summary>
            转换成流
            </summary>
            <param name="bytes">字节流</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Data.CombUtil">
            <summary>
            COMB（<see cref="T:System.Guid"/>与<see cref="T:System.DateTime"/>混合构成的可排序<see cref="T:System.Guid"/>）类型操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Data.CombUtil.NewComb">
            <summary>
            返回Guid用于数据库操作，特定的时间代码可以提高检索效率
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.CombUtil.GetDateFromComb(System.Guid)">
            <summary>
            从SQL Server 返回的Guid中生成时间信息
            </summary>
            <param name="id">Guid</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Data.CsvUtil">
            <summary>
            Csv工具类
            </summary>
        </member>
        <member name="F:JCE.Utils.Data.CsvUtil.Seperator">
            <summary>
            逗号分隔符
            </summary>
        </member>
        <member name="F:JCE.Utils.Data.CsvUtil.Bracer">
            <summary>
            引号
            </summary>
        </member>
        <member name="F:JCE.Utils.Data.CsvUtil.NewLine">
            <summary>
            换行符
            </summary>
        </member>
        <member name="F:JCE.Utils.Data.CsvUtil.RegexSpecial">
            <summary>
            特殊字符正则
            </summary>
        </member>
        <member name="M:JCE.Utils.Data.CsvUtil.DataSetToCsvData(System.Data.DataSet)">
            <summary>
            DataSet集合转换成为CSV数据
            </summary>
            <param name="ds">数据集</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.CsvUtil.ToDataTableByOledb(System.String)">
            <summary>
            CSV文件转换成DataTable(OleDb数据库访问方式)
            </summary>
            <param name="csvPath">csv文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.CsvUtil.ToDataTableByStreamReader(System.String)">
            <summary>
            CSV文件转换成DataTable(文件流方式)
            </summary>
            <param name="csvPath">csv文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.CsvUtil.ListToCsvData(System.Collections.Generic.List{System.Collections.Generic.List{System.String}})">
            <summary>
            List集合转换为CSV数据
            </summary>
            <param name="list">数据集合，行、列</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.CsvUtil.DataTableToCsv(System.Data.DataTable,System.String)">
            <summary>
            DataTable生成CSV文件
            </summary>
            <param name="table">数据表</param>
            <param name="csvPath">csv文件路径</param>
        </member>
        <member name="M:JCE.Utils.Data.CsvUtil.DataTableToCsv(System.Data.DataTable,System.String,System.String,System.String)">
            <summary>
            DataTable生成CSV文件
            </summary>
            <param name="table">数据表</param>
            <param name="csvPath">csv文件路径</param>
            <param name="tableHeader">表头</param>
            <param name="columnName">字段标题，逗号分隔</param>
        </member>
        <member name="T:JCE.Utils.Data.DataTableUtil">
            <summary>
            数据表(DataTable)工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.AddIdentityColumn(System.Data.DataTable)">
            <summary>
            给DataTable添加自增列，如果DataTable存在identityId字段，则直接返回DataTable，不做任何处理
            </summary>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.IsHaveRows(System.Data.DataTable)">
            <summary>
            检查DataTable是否有数据行
            </summary>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.DataTableToList``1(System.Data.DataTable)">
            <summary>
            DataTable转换成实体列表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="table"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.ListToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            实体列表转换成DataTable
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">实体列表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.ToDataTable``1(System.Collections.Generic.IList{``0})">
            <summary>
            将泛型集合转换成DataTable
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">集合</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.ToDataTable``1(System.Collections.Generic.IList{``0},System.String[])">
            <summary>
            将泛型集合转换成DataTable
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="list">集合</param>
            <param name="propertyName">属性名，需要返回的列的列名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.CreateTable(System.Collections.Generic.IList{System.String})">
            <summary>
            创建数据表，根据列名数组创建表格
            </summary>
            <param name="columns">列名数组，包含字段信息的数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.CreateTable(System.String)">
            <summary>
            创建数据表，根据字符列表创建表字段，字段格式可以是：
            1) a,b,c,d,e
            2) a|int,b|string,c|bool,d|decimal
            </summary>
            <param name="columns">表字段列信息</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.ConvertType(System.String)">
            <summary>
            转换类型
            </summary>
            <param name="typeName">类型名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.GetDataRowArray(System.Data.DataRowCollection)">
            <summary>
            获取从DataRowCollection转换成的DataRow数组
            </summary>
            <param name="collection">数据行集合</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.GetDataTableFromRows(System.Data.DataRow[])">
            <summary>
            将DataRows转换成DataTable
            </summary>
            <param name="rows"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.SortedTable(System.Data.DataTable,System.String[])">
            <summary>
            排序表的视图
            </summary>
            <param name="table">数据表</param>
            <param name="sorts">排序方式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.DataTableUtil.FilterDataTable(System.Data.DataTable,System.String)">
            <summary>
            过滤数据表的内容
            </summary>
            <param name="table">数据表</param>
            <param name="condition">条件</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Data.EqualityUtil`1">
            <summary>
            相等比较辅助类，用于快速创建<see cref="T:System.Collections.Generic.IEqualityComparer`1"/>的实例
            </summary>
            <example>
            var equalityComparer1 = EqualityHelper{Person}.CreateComparer(p =&gt; p.ID);
            var equalityComparer2 = EqualityHelper[Person].CreateComparer(p =&gt; p.Name);
            var equalityComparer3 = EqualityHelper[Person].CreateComparer(p =&gt; p.Birthday.Year);
            </example>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:JCE.Utils.Data.EqualityUtil`1.CreateComparer``1(System.Func{`0,``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>的实例
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Data.EqualityUtil`1.CreateComparer``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            创建指定对比委托<paramref name="keySelector"/>与结果二次比较器<paramref name="comparer"/>的实例
            </summary>
            <typeparam name="TV"></typeparam>
            <param name="keySelector"></param>
            <param name="comparer"></param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Develops.CodeRamer">
            <summary>
            代码性能测试内存计算工具
            </summary>
        </member>
        <member name="M:JCE.Utils.Develops.CodeRamer.Initialize">
            <summary>
            内存计算初始化，同时后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:JCE.Utils.Develops.CodeRamer.Ram(System.String,System.Action)">
            <summary>
            内存计算，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name">操作标识名</param>
            <param name="action">操作过程的Action</param>
        </member>
        <member name="T:JCE.Utils.Develops.CodeTimer">
            <summary>
            代码性能测试计时器
            </summary>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.GetCycleCount">
            <summary>
            获取当前CPU循环次数
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.Initialize">
            <summary>
            计时器初始化，对计时器进行初始化操作，同时对后续操作进行预热，以避免初次操作带来的性能影响
            </summary>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.Time(System.String,System.Int32,System.Action)">
            <summary>
            计时器，传入操作标识名，重复次数，操作过程获取操作的性能数据
            </summary>
            <param name="name">操作标识名</param>
            <param name="iteration">重复次数</param>
            <param name="action">操作过程的Action</param>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.InvokeAndGetTimeSpan(System.Action)">
            <summary>
            获取调用方法时间戳，执行一个方法并返回执行时间戳
            </summary>
            <param name="action">执行方法</param>
            <returns>执行时间戳</returns>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.InvokeAndWriteTimeSpan(System.Action)">
            <summary>
            输出调用方法实际执行时间间隔（毫秒）
            </summary>
            <param name="action">执行方法</param>                
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.InvokeAndGetmemoryUsed(System.Action)">
            <summary>
            获取调用方法托管内存使用大小（可能内存回收会导致不准确）
            </summary>
            <param name="action">执行方法</param>
            <returns>托管内存使用大小</returns>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.InvokeAndWriteMemoryUsed(System.Action)">
            <summary>
            输出调用方法实际执行托管内存使用大小（字节）
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.InvokeAndWriteAll(System.Action)">
            <summary>
            输出调用方法实际执行的时间以及托管内存使用大小
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="M:JCE.Utils.Develops.CodeTimer.CodeExecuteTime(System.Action)">
            <summary>
            输出代码执行时间
            </summary>
            <param name="action">执行方法</param>
        </member>
        <member name="T:JCE.Utils.Develops.NativeMethods">
            <summary>
            本地方法
            </summary>
        </member>
        <member name="M:JCE.Utils.Develops.NativeMethods.QueryThreadCycleTime(System.IntPtr,System.UInt64@)">
            <summary>
            查询线程循环时间
            </summary>
            <param name="threadHandle">线程句柄</param>
            <param name="cycleTime">循环时间</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Develops.NativeMethods.GetCurrentThread">
            <summary>
            获取当前线程
            </summary>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Develops.UnitTester">
            <summary>
            单元测试辅助操作
            </summary>
        </member>
        <member name="M:JCE.Utils.Develops.UnitTester.TestConcurrency(System.Action,System.Int32)">
            <summary>
            并发测试
            </summary>
            <param name="action">各线程执行的方法</param>
            <param name="threadNumber">启动线程数，默认1个</param>
        </member>
        <member name="T:JCE.Utils.Devices.Computer">
            <summary>
            电脑信息
            </summary>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.#ctor">
            <summary>
            初始化电脑信息
            </summary>
        </member>
        <member name="F:JCE.Utils.Devices.Computer._instance">
            <summary>
            实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.Instance">
            <summary>
            获取电脑信息实例
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetUserName">
            <summary>
            获取操作系统的登录用户名
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetTotalPhysicalMemory">
            <summary>
            获取物理内存大小
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetSystemType">
            <summary>
            获取系统类型
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetComputerName">
            <summary>
            获取计算机名
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetMacAddress">
            <summary>
            获取网卡Mac地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetIpAddress">
            <summary>
            获取网卡IP地址
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetCpuCode">
            <summary>
            获取CPU序列化代码
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetCpuMhz">
            <summary>
            获取CPU频率
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetDiskInfos">
            <summary>
            获取硬盘信息集合
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.Computer.GetCpuUsage">
            <summary>
            获取CPU使用率
            </summary>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.CpuCode">
            <summary>
            Cpu代码
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.CpuCount">
            <summary>
            Cpu个数
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.CpuMhz">
            <summary>
            Cpu频率，单位:HZ
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.Mac">
            <summary>
            Mac地址
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.Ip">
            <summary>
            Ip地址
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.LoginUserName">
            <summary>
            操作系统登录用户名
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.ComputerName">
            <summary>
            计算机名
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.SystemType">
            <summary>
            系统类型
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.TotalPhysicalMemory">
            <summary>
            总物理内存，单位：M
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.Computer.DiskInfo">
            <summary>
            硬盘信息
            </summary>
        </member>
        <member name="T:JCE.Utils.Devices.CpuUsage">
            <summary>
            Cpu使用率，定义一个实现CPU使用计数器的抽象基类
            </summary>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsage._cpuUsage">
            <summary>
            Cpu使用率实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsage.Create">
            <summary>
            创建并返回一个Cpu使用率实例，可用于查询操作系统上的CPU时间
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsage.Query">
            <summary>
            查询当前的平均CPU负载(CPU使用率)
            </summary>
            <returns>CPU负载百分比</returns>
            <exception cref="T:System.NotSupportedException">系统调用失败，CPU时间不能获得</exception>
        </member>
        <member name="T:JCE.Utils.Devices.CpuUsage9x">
            <summary>
            Inherits the CPUUsage class and implements the Query method for Windows 9x systems.
            </summary>
            <remarks>
            <p>This class works on Windows 98 and Windows Millenium Edition.</p>
            <p>You should not use this class directly in your code. Use the CPUUsage.Create() method to instantiate a CPUUsage object.</p>
            </remarks>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsage9x.#ctor">
            <summary>
            Initializes a new CPUUsage9x instance.
            </summary>
            <exception cref="T:System.NotSupportedException">One of the system calls fails.</exception>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsage9x.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsage9x.Finalize">
            <summary>
            Closes the allocated resources.
            </summary>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsage9x.m_StatData">
            <summary>Holds the registry key that's used to read the CPU load.</summary>
        </member>
        <member name="T:JCE.Utils.Devices.CpuUsageNt">
            <summary>
            实现Window NT系统的查询方法
            </summary>
            <remarks>
            <p>This class works on Windows NT4, Windows 2000, Windows XP, Windows .NET Server and higher.</p>
            <p>You should not use this class directly in your code. Use the CPUUsage.Create() method to instantiate a CPUUsage object.</p>
            </remarks>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsageNt.SYSTEM_BASICINFORMATION">
            <summary>Returns the number of processors in the system in a SYSTEM_BASIC_INFORMATION structure.</summary>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsageNt.SYSTEM_PERFORMANCEINFORMATION">
            <summary>Returns an opaque SYSTEM_PERFORMANCE_INFORMATION structure.</summary>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsageNt.SYSTEM_TIMEINFORMATION">
            <summary>Returns an opaque SYSTEM_TIMEOFDAY_INFORMATION structure.</summary>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsageNt.NO_ERROR">
            <summary>The value returned by NtQuerySystemInformation is no error occurred.</summary>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsageNt.#ctor">
            <summary>
            Initializes a new CpuUsageNt instance.
            </summary>
            <exception cref="T:System.NotSupportedException">One of the system calls fails.</exception>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsageNt.Query">
            <summary>
            Determines the current average CPU load.
            </summary>
            <returns>An integer that holds the CPU load percentage.</returns>
            <exception cref="T:System.NotSupportedException">One of the system calls fails. The CPU time can not be obtained.</exception>
        </member>
        <member name="M:JCE.Utils.Devices.CpuUsageNt.NtQuerySystemInformation(System.Int32,System.Byte[],System.Int32,System.IntPtr)">
            <summary>
            NtQuerySystemInformation is an internal Windows function that retrieves various kinds of system information.
            </summary>
            <param name="dwInfoType">One of the values enumerated in SYSTEM_INFORMATION_CLASS, indicating the kind of system information to be retrieved.</param>
            <param name="lpStructure">Points to a buffer where the requested information is to be returned. The size and structure of this information varies depending on the value of the SystemInformationClass parameter.</param>
            <param name="dwSize">Length of the buffer pointed to by the SystemInformation parameter.</param>
            <param name="returnLength">Optional pointer to a location where the function writes the actual size of the information requested.</param>
            <returns>Returns a success NTSTATUS if successful, and an NTSTATUS error code otherwise.</returns>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsageNt.oldIdleTime">
            <summary>Holds the old idle time.</summary>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsageNt.oldSystemTime">
            <summary>Holds the old system time.</summary>
        </member>
        <member name="F:JCE.Utils.Devices.CpuUsageNt.processorCount">
            <summary>Holds the number of processors in the system.</summary>
        </member>
        <member name="T:JCE.Utils.Devices.DiskInfo">
            <summary>
            硬盘信息
            </summary>
        </member>
        <member name="M:JCE.Utils.Devices.DiskInfo.#ctor(System.String,System.Int64)">
            <summary>
            初始化硬盘信息
            </summary>
            <param name="name">硬盘名</param>
            <param name="size">容量大小，单位:字节</param>
        </member>
        <member name="P:JCE.Utils.Devices.DiskInfo.Name">
            <summary>
            硬盘名
            </summary>
        </member>
        <member name="P:JCE.Utils.Devices.DiskInfo.Size">
            <summary>
            容量大小，单位:字节
            </summary>
        </member>
        <member name="T:JCE.Utils.Entities.Size">
            <summary>
            尺寸
            </summary>
        </member>
        <member name="M:JCE.Utils.Entities.Size.#ctor(System.Int32,System.Int32)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Entities.Size"/>类型的实例
            </summary>
            <param name="width">宽度</param>
            <param name="height">高度</param>
        </member>
        <member name="P:JCE.Utils.Entities.Size.Width">
            <summary>
            宽度
            </summary>
        </member>
        <member name="P:JCE.Utils.Entities.Size.Height">
            <summary>
            高度
            </summary>
        </member>
        <member name="T:JCE.Utils.Exceptions.ExceptionUtil">
            <summary>
            异常工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Exceptions.ExceptionUtil.IgnoreException(System.Action)">
            <summary>
            忽略异常
            </summary>
            <param name="action">操作</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.ExceptionUtil.IgnoreException``1(System.Func{``0},``0)">
            <summary>
            忽略异常
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="action">操作</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Exceptions.JceException">
            <summary>
            Jce框架异常类
            </summary>
        </member>
        <member name="M:JCE.Utils.Exceptions.JceException.#ctor">
            <summary>
            初始化<see cref="T:JCE.Utils.Exceptions.JceException"/>类的新实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Exceptions.JceException.#ctor(System.String)">
            <summary>
            使用指定错误消息初始化<see cref="T:JCE.Utils.Exceptions.JceException"/>类的新实例。
            </summary>
            <param name="message">描述错误的消息</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.JceException.#ctor(System.String,System.Exception[])">
            <summary>
            初始化一个新的实例
            </summary>
            <param name="message">消息</param>
            <param name="innerExceptions">内部异常数组</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.JceException.#ctor(System.String,System.Exception)">
            <summary>
            使用异常消息与一个内部异常实例化一个<see cref="T:JCE.Utils.Exceptions.JceException"/>类的新实例
            </summary>
            <param name="message">异常消息</param>
            <param name="inner">用于封装在<see cref="T:JCE.Utils.Exceptions.JceException"/>内部的异常实例</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.JceException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            使用可序列化数据实例化一个<see cref="T:JCE.Utils.Exceptions.JceException"/>类的新实例
            </summary>
            <param name="info">保存序列化对象数据的对象。</param>
            <param name="context">有关源或目标的上下文信息。</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.JceException.Combine(System.String,System.Exception[])">
            <summary>
            合并异常
            </summary>
            <param name="message">消息</param>
            <param name="innerExceptions">内部异常数组</param>
            <returns>合并后的异常</returns>
        </member>
        <member name="M:JCE.Utils.Exceptions.JceException.Combine(System.String,System.Collections.Generic.IEnumerable{System.Exception})">
            <summary>
            合并指定的异常
            </summary>
            <param name="message">消息</param>
            <param name="innerExceptions">内部异常集合</param>
            <returns>合并后的异常</returns>
        </member>
        <member name="P:JCE.Utils.Exceptions.JceException.InnerExceptions">
            <summary>
            获取内部异常数组
            </summary>
        </member>
        <member name="T:JCE.Utils.Exceptions.Warning">
            <summary>
            应用程序异常
            </summary>
        </member>
        <member name="F:JCE.Utils.Exceptions.Warning._message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.#ctor(System.String,System.String,JCE.Utils.Logging.LogLevel)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志等级</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.#ctor(System.Exception)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.#ctor(System.String,System.String,System.Exception)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.#ctor(System.String,System.String,JCE.Utils.Logging.LogLevel,System.Exception)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Exceptions.Warning"/>类型的实例
            </summary>
            <param name="message">错误消息</param>
            <param name="code">错误码</param>
            <param name="level">日志等级</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.WriteLog(JCE.Utils.Logging.ILog)">
            <summary>
            写日志
            </summary>
            <param name="log">日志组件</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.WriteLog(JCE.Utils.Logging.ILog,System.Exception)">
            <summary>
            写日志
            </summary>
            <param name="log">日志组件</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.GetPrompt">
            <summary>
            获取友情提示
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.GetMessage">
            <summary>
            获取错误消息
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.AppendSelfMessage(System.Text.StringBuilder)">
            <summary>
            添加本身消息
            </summary>
            <param name="result">拼接器</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.AppendInnerMessage(System.Text.StringBuilder,System.Exception)">
            <summary>
            添加内部异常消息
            </summary>
            <param name="result">拼接器</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Exceptions.Warning.GetData(System.Exception)">
            <summary>
            获取添加的额外数据
            </summary>
            <param name="ex">异常</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Exceptions.Warning.Message">
            <summary>
            错误消息
            </summary>
        </member>
        <member name="P:JCE.Utils.Exceptions.Warning.StackTrace">
            <summary>
            堆栈跟踪
            </summary>
        </member>
        <member name="P:JCE.Utils.Exceptions.Warning.Code">
            <summary>
            错误码
            </summary>
        </member>
        <member name="P:JCE.Utils.Exceptions.Warning.Level">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="T:JCE.Utils.Extensions.AssemblyExtensions">
            <summary>
            程序集（Assembly）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.AssemblyExtensions.GetFileVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的文件版本号
            </summary>
            <param name="assembly">Assembly</param>
            <returns>程序集文件版本号</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.AssemblyExtensions.GetProductVersion(System.Reflection.Assembly)">
            <summary>
            获取程序集的产品版本
            </summary>
            <param name="assembly">Assembly</param>
            <returns>程序集产品版本</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ArrayExtensions">
            <summary>
            数组（Array）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.IsNullOrEmpty(System.Array)">
            <summary>
            判断数组是否为空
            </summary>
            <param name="source">Array</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.WithinIndex(System.Array,System.Int32)">
            <summary>
            判断索引是否在数组中
            </summary>
            <param name="source">Array</param>
            <param name="index">索引</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.WithinIndex(System.Array,System.Int32,System.Int32)">
            <summary>
            判断索引是否在数组中
            </summary>
            <param name="source">Array</param>
            <param name="index">索引</param>
            <param name="dimension">范围</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.CombineArray``1(``0[],``0[])">
            <summary>
            合并两个数组
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="combineWith">源数组</param>
            <param name="arrayToCombine">目标数组</param>
            <returns>合并后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ClearAll(System.Array)">
            <summary>
            清空数组
            </summary>
            <param name="clear">需要清空内容的数组</param>
            <returns>清空内容后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ClearAll``1(``0[])">
            <summary>
            清空数组
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="arrayToClear">需要清空内容的数组</param>
            <returns>清空内容后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ClearAt(System.Array,System.Int32)">
            <summary>
            清除数组中指定项内容
            </summary>
            <param name="array">Array</param>
            <param name="at">指定项索引</param>
            <returns>清除指定项后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ClearAt``1(``0[],System.Int32)">
            <summary>
            清除数组中指定项内容
            </summary>
            <typeparam name="T">数组类型</typeparam>
            <param name="array">T[]</param>
            <param name="at">指定项索引</param>
            <returns>清除指定项后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Int32)">
            <summary>
            数据块复制
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <param name="index">索引</param>
            <param name="length">长度</param>
            <returns>复制后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            数据块复制
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <param name="index">索引</param>
            <param name="length">长度</param>
            <param name="padToLength">是否指定长度</param>
            <returns>复制后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.BlockCopy``1(``0[],System.Int32,System.Boolean)">
            <summary>
            数据块复制，允许枚举在数组中复制
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="array">数组</param>
            <param name="count">总数</param>
            <param name="padToLength">是否指定长度</param>
            <returns>复制后的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.FindArrayInArray(System.Byte[],System.Byte[])">
            <summary>
            在byte[]数组中查找指定byte[]数组，返回第一次匹配索引
            </summary>
            <param name="buf1">byte[]数组源</param>
            <param name="buf2">指定查询byte[]数组</param>
            <returns>返回第一次匹配byte[]数组的位置，如果没有找到则返回-1</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ToString(System.String[],System.String,System.String,System.String,System.String)">
            <summary>
            字符串数组转换为字符串，组合字符串数组
            </summary>
            <param name="values">字符串数组</param>
            <param name="prefix">前缀</param>
            <param name="suffix">后缀</param>
            <param name="quotation">引号</param>
            <param name="separator">逗号</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ToString``1(``0[],System.String,System.Func{``0,System.String})">
            <summary>
            将任何数组转换成符号连接的字符串
            </summary>
            <typeparam name="T">基本对象</typeparam>
            <param name="obj">任何对象</param>
            <param name="sign">分隔符</param>
            <param name="func">传入要在转换过程中执行的方法</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ToArray``1(System.Collections.Generic.List{``0})">
            <summary>
            List集合转换成数组
            </summary>
            <typeparam name="T">指定类型</typeparam>
            <param name="list">List集合</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.Remove(System.String[],System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            指定清除标签的内容
            </summary>
            <param name="strs">内容</param>
            <param name="tag">标签</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.Multiply(System.String[],System.String[])">
            <summary>
            两个数组相乘，返回两个的连接串，例如：["a","b","c"] * ["A","B"] = ["aA","aB","bA","bB","cA","cB"]
            </summary>
            <param name="array">当前字符串数组</param>
            <param name="other">其他字符串数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ArrayExtensions.ToConvertAll``2(``0[],System.Converter{``0,``1})">
            <summary>
            转换数组类型
            </summary>
            <typeparam name="TInput">输入类型</typeparam>
            <typeparam name="TResult">输出类型</typeparam>
            <param name="source">源数组</param>
            <param name="convert">转换器</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.BooleanExtensions">
            <summary>
            bool类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.ToLower(System.Boolean)">
            <summary>
            将布尔值转换为小写字符串
            </summary>
            <param name="value">bool</param>
            <returns>小写字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.ToYesNoString(System.Boolean)">
            <summary>
            将布尔值转换为等效的字符串表示形式（Yes、No）
            </summary>
            <param name="value">bool</param>
            <returns>等效的字符串表示形式</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.ToBinaryTypeNumber(System.Boolean)">
            <summary>
            将布尔值转换为二进制数字类型，1:0
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.IsTrue``1(System.Boolean,``0)">
            <summary>
            结果为True时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="b">判断源结果</param>
            <param name="t">输出值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.IsTrue``1(System.Nullable{System.Boolean},``0)">
            <summary>
            结果为True时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="b">判断源结果</param>
            <param name="t">输出值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.IsFalse``1(System.Boolean,``0)">
            <summary>
            结果为False时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="b">判断源结果</param>
            <param name="t">输出值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.IsFalse``1(System.Nullable{System.Boolean},``0)">
            <summary>
            结果为False时，输出参数
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="b">判断源结果</param>
            <param name="t">输出值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.GetName(System.Boolean,System.String,System.String)">
            <summary>
            获取中文
            </summary>
            <param name="b">判断源</param>
            <param name="strTrue">为True时的中文:是</param>
            <param name="strFalse">为Flase时的中文:否</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BooleanExtensions.GetName(System.Nullable{System.Boolean},System.String,System.String)">
            <summary>
            获取中文
            </summary>
            <param name="b">判断源</param>
            <param name="strTrue">为True时的中文:是</param>
            <param name="strFalse">为Flase时的中文:否</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ComparsionTemplateOptions">
            <summary>
            比较模板选项
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.ComparsionTemplateOptions.Default">
            <summary>
            简单模板比较
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.ComparsionTemplateOptions.FromStart">
            <summary>
            字符串前缀模板比较
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.ComparsionTemplateOptions.AtTheEnd">
            <summary>
            字符串后缀模板比较
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.ComparsionTemplateOptions.Whole">
            <summary>
            全字符串模板比较
            </summary>
        </member>
        <member name="T:JCE.Utils.Extensions.BinaryMode">
            <summary>
            进制
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.BinaryMode.Binary">
            <summary>
            二进制
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.BinaryMode.Octonary">
            <summary>
            八进制
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.BinaryMode.DecimalBase">
            <summary>
            十进制
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.BinaryMode.Hex">
            <summary>
            十六进制
            </summary>
        </member>
        <member name="T:JCE.Utils.Extensions.ByteExtensions">
            <summary>
            byte类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            将byte[]数组转为字符串，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="bytes">byte[]数组</param>
            <param name="encoding">编码格式</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.ToHexString(System.Byte[])">
            <summary>
            字节数组转换为16进制字符串表示形式
            </summary>
            <param name="bytes">字节数组</param>
            <returns>16进制字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.ToInt(System.Byte[])">
            <summary>
            将byte[]转换成int
            </summary>
            <param name="bytes">需要转换成整数的byte[]</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.ToBase64String(System.Byte[])">
            <summary>
            将byte[]转换为Base64字符串
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.ToInt64(System.Byte[])">
            <summary>
            将byte[]转换成long
            </summary>
            <param name="bytes">需要转换成整数的byte[]</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.ToInt64(System.Byte[],System.Int32)">
            <summary>
            将byte[]转换成long
            </summary>
            <param name="bytes">需要转换成整数的byte[]</param>
            <param name="startIndex">开始索引</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.Decode(System.Byte[],System.Text.Encoding)">
            <summary>
            将byte[]转换成指定编码的字符串
            </summary>
            <param name="data">需要转换的byte[]</param>
            <param name="encoding">字符串编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.Hash(System.Byte[],System.String)">
            <summary>
            使用指定算法加密，并返回加密后的byte[]
            </summary>
            <param name="data">byte[]</param>
            <param name="hashName">Hash名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ByteExtensions.ToMemoryStream(System.Byte[])">
            <summary>
            将byte[]转换成内存流
            </summary>
            <param name="data">byte[]</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DateTimeExtensions">
            <summary>
            时间（DateTime）扩展
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.DateTimeExtensions.EveningEnds">
            <summary>
            晚上结束时间
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.DateTimeExtensions.MorningEnds">
            <summary>
            早上结束时间
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.DateTimeExtensions.AfternoonEnds">
            <summary>
            下午结束时间
            </summary>
        </member>
        <member name="F:JCE.Utils.Extensions.DateTimeExtensions.Date1970">
            <summary>
            1970年1月1日
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsWeekend(System.DateTime)">
            <summary>
            判断当前时间是否周末，星期六至星期日
            </summary>
            <param name="dateTime">时间点</param>
            <returns>结果</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsWorkday(System.DateTime)">
            <summary>
            判断当前时间是否工作日，星期一至星期五
            </summary>
            <param name="dateTime">时间点</param>
            <returns>结果</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy-MM-dd HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy-MM-dd"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToTimeString(System.DateTime)">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToTimeString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带年月日，格式："HH:mm:ss"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToMillisecondString(System.DateTime)">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToMillisecondString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，带毫秒，格式："yyyy-MM-dd HH:mm:ss.fff"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToChineseDateString(System.DateTime)">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToChineseDateString(System.Nullable{System.DateTime})">
            <summary>
            获取格式化字符串，不带时分秒，格式："yyyy年MM月dd日"
            </summary>
            <param name="dateTime">日期</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToChineseDateTimeString(System.DateTime,System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToChineseDateTimeString(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            获取格式化字符串，带时分秒，格式："yyyy年MM月dd日 HH时mm分"
            </summary>
            <param name="dateTime">日期</param>
            <param name="isRemoveSecond">是否移除秒</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.CalculateAge(System.DateTime)">
            <summary>
            计算年龄
            </summary>
            <param name="dateOfBirth">出生日期</param>
            <returns>年龄</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.CalculateAge(System.DateTime,System.DateTime)">
            <summary>
            计算年龄，指定参考日期
            </summary>
            <param name="dateOfBirth">出生日期</param>
            <param name="referenceDate">参考日期</param>
            <returns>年龄</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetCountDaysOfMonth(System.DateTime)">
            <summary>
            获取月总天数
            </summary>
            <param name="date">日期</param>
            <returns>月总天数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份第一天
            </summary>
            <param name="date">日期</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetFirstDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份第一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>月份第一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetLastDayOfMonth(System.DateTime)">
            <summary>
            获取指定日期的月份最后一天
            </summary>
            <param name="date">日期</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetLastDayOfMonth(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定日期的月份最后一天，指定星期几
            </summary>
            <param name="date">日期</param>
            <param name="dayOfWeek">星期几</param>
            <returns>最后一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsToday(System.DateTime)">
            <summary>
            判断当前指定时间是否今天
            </summary>
            <param name="dt">时间</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsToday(System.DateTimeOffset)">
            <summary>
            判断当前指定时间点是否今天
            </summary>
            <param name="dto">时间点</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.SetTime(System.DateTime,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间，设置时分秒毫秒
            </summary>
            <param name="date">时间</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <param name="milliseconds">毫秒</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.SetTime(System.DateTime,System.TimeSpan)">
            <summary>
            设置时间，设置时间间隔
            </summary>
            <param name="date">时间</param>
            <param name="time">时间间隔</param>
            <returns>返回设置后的时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.SetTime(System.DateTimeOffset,System.Int32,System.Int32,System.Int32)">
            <summary>
            设置时间点，设置时分秒
            </summary>
            <param name="date">时间点</param>
            <param name="hours">小时</param>
            <param name="minutes">分钟</param>
            <param name="seconds">秒</param>
            <returns>返回设置后的时间点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.SetTime(System.DateTimeOffset,System.TimeSpan)">
            <summary>
            设置时间点，设置时间间隔
            </summary>
            <param name="date">时间点</param>
            <param name="time">时间间隔</param>
            <returns>返回设置后的时间点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.SetTime(System.DateTimeOffset,System.TimeSpan,System.TimeZoneInfo)">
            <summary>
            设置时间点，设置时间间隔，时区
            </summary>
            <param name="date">时间点</param>
            <param name="time">时间间隔</param>
            <param name="localTimeZone">时区</param>
            <returns>返回设置后的时间点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToLocalDateTime(System.DateTimeOffset)">
            <summary>
            将时间点转换成本地系统时区的日期时间
            </summary>
            <param name="dateTimeUtc">本地时间点</param>
            <returns>本地系统时区的日期时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToLocalDateTime(System.DateTimeOffset,System.TimeZoneInfo)">
            <summary>
            将时间点转换成指定时区的日期时间
            </summary>
            <param name="dateTimeUtc">本地时间点</param>
            <param name="localTimeZone">时区</param>
            <returns>指定时区的日期时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToDateTimeOffset(System.DateTime)">
            <summary>
            将日期时间转换成本地系统时区的时间点
            </summary>
            <param name="localDateTime">本地日期时间</param>
            <returns>本地系统时区的时间点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToDateTimeOffset(System.DateTime,System.TimeZoneInfo)">
            <summary>
            将日期时间转换成使用指定时区的时间点
            </summary>
            <param name="localDateTime">本地日期时间</param>
            <param name="localTimeZone">时区</param>
            <returns>指定时区的时间点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetFirstDayOfWeek(System.DateTime)">
            <summary>
            获取当前区域性的时间所在周的第一天
            </summary>
            <param name="date">当前时间</param>
            <returns>当前时间所在周的第一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetFirstDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取指定区域性的时间所在周的第一天
            </summary>
            <param name="date">当前时间</param>
            <param name="cultureInfo">指定区域性</param>
            <returns>当前时间所在周的第一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetLastDayOfWeek(System.DateTime)">
            <summary>
            获取当前区域性的时间所在周的最后一天
            </summary>
            <param name="date">当前时间</param>
            <returns>当前时间所在周的最后一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetLastDayOfWeek(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取指定区域性的时间所在周的最后一天
            </summary>
            <param name="date">当前时间</param>
            <param name="cultureInfo">指定区域性</param>
            <returns>当前时间所在周的最后一天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetWeeksWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定周工作日当前区域性的星期内下一个匹配项的时间点
            </summary>
            <param name="date">当前时间</param>
            <param name="weekday">指定星期</param>
            <returns>星期下一个匹配项的时间点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetWeeksWeekday(System.DateTime,System.DayOfWeek,System.Globalization.CultureInfo)">
            <summary>
            获取指定周工作日指定区域的星期内下一个匹配项的时间点
            </summary>
            <param name="date">当前时间</param>
            <param name="weekday">指定星期</param>
            <param name="cultureInfo">指定区域性</param>
            <returns>星期下一个匹配项的时间点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetNextWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定工作日的下一个匹配项时间
            </summary>
            <param name="date">当前时间</param>
            <param name="weekday">指定工作日，星期几</param>
            <returns>下一个工作日的时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetPreviousWeekday(System.DateTime,System.DayOfWeek)">
            <summary>
            获取指定工作日的上一个匹配项时间
            </summary>
            <param name="date">当前时间</param>
            <param name="weekday">指定工作日，星期几</param>
            <returns>上一个工作日的时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsDateEqual(System.DateTime,System.DateTime)">
            <summary>
            时间中日期部分是否相等
            </summary>
            <param name="date">当前日期</param>
            <param name="dateToCompare">匹配日期</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsTimeEqual(System.DateTime,System.DateTime)">
            <summary>
            时间中时间部分是否相等
            </summary>
            <param name="time">当前时间</param>
            <param name="timeToCompare">匹配时间</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetMillisecondsSince1970(System.DateTime)">
            <summary>
            获取当前毫秒数，毫秒数=1970年1月1日-当前时间，UNIX
            </summary>
            <param name="datetime">当前时间</param>
            <returns>毫秒数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.AddWeeks(System.DateTime,System.Int32)">
            <summary>
            添加指定数量的周到当前时间
            </summary>
            <param name="date">指定时间</param>
            <param name="value">几周</param>
            <returns>N周后的时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetDays(System.Int32)">
            <summary>
            获取指定年的总天数
            </summary>
            <param name="year">指定年</param>
            <returns>指定年的总天数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetDays(System.Int32,System.Globalization.CultureInfo)">
            <summary>
            获取指定年的总天数，使用指定区域性
            </summary>
            <param name="year">指定年</param>
            <param name="culture">指定区域性</param>
            <returns>指定年的总天数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetDays(System.DateTime)">
            <summary>
            获取指定时间的年度总天数
            </summary>
            <param name="date">指定时间</param>
            <returns>指定时间的年度总天数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetDays(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取指定时间的年度总天数，使用指定区域性
            </summary>
            <param name="date">指定时间</param>
            <param name="culture">指定区域性</param>
            <returns>指定时间的年度总天数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetDays(System.DateTime,System.DateTime)">
            <summary>
            获取两个时间之间的天数
            </summary>
            <param name="fromDate">开始时间</param>
            <param name="toDate">结束时间</param>
            <returns>天数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetPeriodOfDay(System.DateTime)">
            <summary>
            获取指定时间的时间段，（早上、下午、晚上）
            </summary>
            <param name="date">指定时间</param>
            <returns>时间段</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            获取指定时间在一年中所在的周索引
            </summary>
            <param name="dateTime">指定时间</param>
            <param name="culture">指定区域性</param>
            <returns>周索引</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.GetWeekOfYear(System.DateTime)">
            <summary>
            获取指定时间在一年中所在的周索引
            </summary>
            <param name="dateTime">指定时间</param>
            <returns>周索引</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsEaster(System.DateTime)">
            <summary>
            是否复活节
            </summary>
            <param name="date">指定时间</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsBefore(System.DateTime,System.DateTime)">
            <summary>
            源时间是否在目标时间之前
            </summary>
            <param name="source">源时间</param>
            <param name="other">目标时间</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.IsAfter(System.DateTime,System.DateTime)">
            <summary>
            源时间是否在目标时间之后
            </summary>
            <param name="source">源时间</param>
            <param name="other">目标时间</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.Tomorrow(System.DateTime)">
            <summary>
            获取第二天的时间，明天
            </summary>
            <param name="date">指定时间</param>
            <returns>明天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.Yesterday(System.DateTime)">
            <summary>
            获取前一天的时间，昨天
            </summary>
            <param name="date">指定时间</param>
            <returns>昨天</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToFriendlyDateString(System.DateTime,System.Globalization.CultureInfo)">
            <summary>
            将指定时间转换成友好的时间字符串表示方式，（昨天 12:30下午，今天 3:33下午）
            </summary>
            <param name="date">指定时间</param>
            <param name="culture">指定区域性</param>
            <returns>友好的时间字符串表示方式</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToFriendlyDateString(System.DateTime)">
            <summary>
            将指定时间转换成友好的时间字符串表示方式，（昨天 12:30下午，今天 3:33下午）
            </summary>
            <param name="date">指定时间</param>
            <returns>友好的时间字符串表示方式</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.EndOfDay(System.DateTime)">
            <summary>
            设置指定时间为当天的最后的时间，23:59:59.999
            </summary>
            <param name="date">指定时间</param>
            <returns>当天的最后的时间</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.Noon(System.DateTime)">
            <summary>
            设置指定时间为中午,12:00:00
            </summary>
            <param name="time">指定时间</param>
            <returns>中午</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.Midnight(System.DateTime)">
            <summary>
            设置指定时间为午夜（凌晨）,00:00:00
            </summary>
            <param name="time">指定时间</param>
            <returns>午夜</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.MultiplyBy(System.TimeSpan,System.Int32)">
            <summary>
            时间间隔乘
            </summary>
            <param name="source">时间间隔</param>
            <param name="factor">系数</param>
            <returns>相乘后的时间间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.MultiplyBy(System.TimeSpan,System.Double)">
            <summary>
            时间间隔乘，时间间隔 * 系数
            </summary>
            <param name="source">时间间隔</param>
            <param name="factor">系数</param>
            <returns>相乘后的时间间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.DayOfQuarter(System.DateTime,System.Boolean)">
            <summary>
            获取指定日期所在季度的第一天/最后一天
            </summary>
            <param name="time">时间</param>
            <param name="firstDay">是否第一天,true:是,false:否</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.DayOfYear(System.DateTime,System.Boolean)">
            <summary>
            获取指定日期所在年的第一天/最后一天
            </summary>
            <param name="time">时间</param>
            <param name="firstDay">是否第一天,true:是,false:否</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DateTimeExtensions.ToUnixTimeStamp(System.DateTime)">
            <summary>
            将给定 DateTime 时间转换为 Unix 时间戳
            </summary>
            <param name="dateTime">DateTime 时间。</param>
            <returns>Unix 时间戳。</returns>
        </member>
        <member name="P:JCE.Utils.Extensions.DateTimeExtensions.UtcOffset">
            <summary>
            返回系统UTC偏移量
            </summary>
        </member>
        <member name="T:JCE.Utils.Extensions.DecimalExtensions">
            <summary>
            decimal类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DecimalExtensions.RoundDecimalPoints(System.Decimal,System.Int32)">
            <summary>
            将数值四舍五入，保留指定小数位数
            </summary>
            <param name="value">decimal</param>
            <param name="decimalPoints">四舍五入后的小数位数</param>
            <returns>四舍五入后的十进制数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DecimalExtensions.RoundToTwoDecimalPoints(System.Decimal)">
            <summary>
            将数值四舍五入，保留两位小数
            </summary>
            <param name="value">decimal</param>
            <returns>四舍五入后的小数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DecimalExtensions.Abs(System.Decimal)">
            <summary>
            返回数字的绝对值
            </summary>
            <param name="value">decimal</param>
            <returns>绝对值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DecimalExtensions.Abs(System.Collections.Generic.IEnumerable{System.Decimal})">
            <summary>
            返回数字的绝对值
            </summary>
            <param name="value">枚举集合decimal</param>
            <returns>绝对值的枚举集合</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DoubleExtensions">
            <summary>
            double类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DoubleExtensions.InRange(System.Double,System.Double,System.Double)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">double</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DoubleExtensions.InRange(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">double</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>double</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DoubleExtensions.Days(System.Double)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">double</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DoubleExtensions.Hours(System.Double)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">double</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DoubleExtensions.Minutes(System.Double)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">double</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DoubleExtensions.Seconds(System.Double)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">double</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DoubleExtensions.Milliseconds(System.Double)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">double</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.EnumExtensions">
            <summary>
            枚举（Enum）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.Value(System.Enum)">
            <summary>
            获取成员值
            </summary>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.Value``1(System.Enum)">
            <summary>
            获取成员值
            </summary>
            <typeparam name="T">返回值类型</typeparam>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.ToDescription(System.Enum)">
            <summary>
            获取枚举项上的<see cref="T:System.ComponentModel.DescriptionAttribute"/>特性的文字描述
            </summary>
            <param name="value">枚举</param>
            <returns>枚举特性文字说明</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.ToDictionary(System.Type)">
            <summary>
            将枚举类型转换为字典（键值对集合）
            </summary>
            <param name="enumType">枚举类型</param>
            <returns>以枚举值为key，枚举文本为value的键值对集合</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.ClearFlag``1(System.Enum,``0)">
            <summary>
            删除标识符并返回新值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="variable">枚举值</param>
            <param name="flag">需要删除的标识符</param>
            <returns>返回新值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.ClearFlags``1(System.Enum,``0[])">
            <summary>
            删除标识符数组并返回新值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="variable">枚举值</param>
            <param name="flags">需要删除的标识符集合</param>
            <returns>返回新值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.SetFlag``1(System.Enum,``0)">
            <summary>
            设置标识符并返回新值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="variable">枚举值</param>
            <param name="flag">需要指定的标识符</param>
            <returns>返回新值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.SetFlags``1(System.Enum,``0[])">
            <summary>
            设置标识符集合并返回新值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="variable">枚举值</param>
            <param name="flags">需要指定的标识符集合</param>
            <returns>返回新值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.HasFlag``1(``0,``0)">
            <summary>
            检查标识符，判断枚举是否标识符
            </summary>
            <typeparam name="T">标识符类型</typeparam>
            <param name="variable">枚举值</param>
            <param name="flag">需要检查的标识符</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.HasFlags``1(``0,``0[])">
            <summary>
            检查标识符，判断枚举是否有特定的标识符集合
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="variable">枚举值</param>
            <param name="flags">需要检查的标识符集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.EnumExtensions.ToInt(System.Enum)">
            <summary>
            将枚举转换成Int类型
            </summary>
            <param name="enumVal">枚举值</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.FloatExtensions">
            <summary>
            float类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.FloatExtensions.InRange(System.Single,System.Single,System.Single)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">float</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.FloatExtensions.InRange(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">float</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>float</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.FloatExtensions.Days(System.Single)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">float</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.FloatExtensions.Hours(System.Single)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">float</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.FloatExtensions.Minutes(System.Single)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">float</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.FloatExtensions.Seconds(System.Single)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">float</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.FloatExtensions.Milliseconds(System.Single)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">float</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ObjectExtensions">
            <summary>
            object类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CastTo(System.Object,System.Type)">
            <summary>
            把对象类型转换为指定类型
            </summary>
            <param name="value">值</param>
            <param name="conversionType">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CastTo``1(System.Object)">
            <summary>
            把对象类型转化为指定类型
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <returns> 转化后的指定类型的对象，转化失败引发异常。 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CastTo``1(System.Object,``0)">
            <summary>
            把对象类型转化为指定类型，转化失败时返回指定的默认值
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 要转化的源对象 </param>
            <param name="defaultValue"> 转化失败返回的指定默认值 </param>
            <returns> 转化后的指定类型对象，转化失败时返回指定的默认值 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsBetween``1(System.IComparable{``0},``0,``0,System.Boolean,System.Boolean)">
            <summary>
            判断当前值是否介于指定范围内
            </summary>
            <typeparam name="T"> 动态类型 </typeparam>
            <param name="value"> 动态类型对象 </param>
            <param name="start"> 范围起点 </param>
            <param name="end"> 范围终点 </param>
            <param name="leftEqual"> 是否可等于上限（默认等于） </param>
            <param name="rightEqual"> 是否可等于下限（默认等于） </param>
            <returns> 是否介于 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToDynamic(System.Object)">
            <summary>
            将对象[主要是匿名对象]转换为dynamic
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.EqualsAny``1(``0,``0[])">
            <summary>
            确定当前对象是否与所提供的值相等
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">要比较的对象</param>
            <param name="values">要与对象进行比较的值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.EqualsNone``1(``0,``0[])">
            <summary>
            确定当前对象是否与所提供的值不相等
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">要比较的对象</param>
            <param name="values">要与对象进行比较的值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ConvertToAndIgnoreException``1(System.Object,``0)">
            <summary>
            将对象转换为指定的目标类型，并且忽略异常，如果值为空则返回默认值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <returns>目标类型</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ConvertTo``1(System.Object,``0)">
            <summary>
            将对象转换为指定的目标类型，如果值为空则返回默认值。
            如果该值不能转换，即使类型是可转换为彼此，则抛出异常
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <returns>目标类型</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ConvertTo``1(System.Object,``0,System.Boolean)">
            <summary>
            将对象转换为指定的目标类型，如果值为空则返回默认值。
            如果这两种类型是不可转换的，并且忽略异常则产生异常时返回默认值，否则抛出异常
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <param name="ignoreException">是否忽略异常</param>
            <returns>目标类型</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CanConvertTo``1(System.Object)">
            <summary>
            确定该值是否可以转换为指定的目标类型（理论上）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">值</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            动态调用方法（使用反射）
            </summary>
            <param name="obj">需要执行的对象</param>
            <param name="methodName">方法名</param>
            <param name="parameters">传递的参数</param>
            <returns>返回值</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.InvokeMethod``1(System.Object,System.String,System.Object[])">
            <summary>
            动态调用方法并将其返回值类型化（使用反射）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">需要执行的对象</param>
            <param name="methodName">方法名</param>
            <param name="parameters">传递的参数</param>
            <returns>返回值</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.GetPropertyValue(System.Object,System.String)">
            <summary>
            动态获取属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <returns>属性值</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.GetPropertyValue``1(System.Object,System.String,``0)">
            <summary>
            动态获取属性值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <param name="defaultValue">默认值</param>
            <returns>属性值</returns>
            <example>
            	<code>
            		var type = Type.GetType("System.IO.FileInfo, mscorlib");
            		var file = type.CreateInstance(@"c:\autoexec.bat");
            		if(file.GetPropertyValue&lt;bool&gt;("Exists")) {
            		var reader = file.InvokeMethod&lt;StreamReader&gt;("OpenText");
            		Console.WriteLine(reader.ReadToEnd());
            		reader.Close();
            		}
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.SetPropertyValue(System.Object,System.String,System.Object)">
            <summary>
            动态设置属性值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyName">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.GetAttribute``1(System.Object,System.Boolean)">
            <summary>
            获取数据类型上定义的特性，第一个
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">对象</param>
            <param name="includeInherited">是否包含继承的属性，默认包含</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.GetAttributes``1(System.Object,System.Boolean)">
            <summary>
            获取数据类型上定义的所有匹配特性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">对象</param>
            <param name="includeInherited">是否包含继承的属性，默认不包含</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsOfType``1(System.Object)">
            <summary>
            确定对象是否指定的泛型类型
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsOfType(System.Object,System.Type)">
            <summary>
            确定对象是否指定的类型
            </summary>
            <param name="obj">对象</param>
            <param name="type">类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsOfTypeOrInherits``1(System.Object)">
            <summary>
            确定对象是否指定的泛型类型或继承类型
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsOfTypeOrInherits(System.Object,System.Type)">
            <summary>
            确定对象是否制定类型或继承类型
            </summary>
            <param name="obj">对象</param>
            <param name="type">类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsAssignableTo``1(System.Object)">
            <summary>
            确定对象是否是分配给所传递的泛型类型
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsAssignableTo(System.Object,System.Type)">
            <summary>
            确定对象是否是
            </summary>
            <param name="obj">对象</param>
            <param name="type">类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsNull(System.Object)">
            <summary>
            确定当前对象是否为空
            </summary>
            <param name="target">当前对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.IsNull``1(``0)">
            <summary>
            确定当前泛型对象是否为空
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="target">当前对象</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.GetTypeDefaultValue``1(``0)">
            <summary>
            获取基本数据类型的默认值，引用类型则为空
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">值</param>
            <returns>默认值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToDatabaseValue``1(``0)">
            <summary>
            将指定的值转换为数据库中的值，如果指定值等于其默认值，则返回 DBNull.Value
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">值</param>
            <returns>对象</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.AsString(System.Object,System.IFormatProvider)">
            <summary>
            使用指定的格式提供程序返回字符串表示形式，如果目标为空，则返回空
            </summary>
            <param name="target">目标转换为字符串表示形式，可以为空</param>
            <param name="formatProvider">格式提供程序，用于将目标转换为字符串表示形式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.AsInvariantString(System.Object)">
            <summary>
            使用默认的格式提供程序返回字符串表示形式，如果目标字符串为空，则返回空
            </summary>
            <param name="target">目标转换为字符串表示形式，可以为空</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.NotNull``1(``0,``0)">
            <summary>
            如果目标对象是空引用，返回notNullValue
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="target">目标对象</param>
            <param name="notNullValue">为空值时用来代替空值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.NotNull``1(``0,System.Func{``0})">
            <summary>
            如果目标对象是空引用，返回notNullValue
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="target">目标对象</param>
            <param name="notNullValueProvider">空值时用来代替空值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToStringDump(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            获取指定对象的字符串表示形式
            </summary>
            <param name="obj">对象</param>
            <param name="flags">标识，用于反射</param>
            <param name="maxArrayElements">最大数组长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToStringDumpInternal(System.Xml.Linq.XContainer)">
            <summary>
            获取指定对象的字符串表示形式的实现方法
            </summary>
            <param name="toXElemnt">节点</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToHtmlTable(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            获取指定对象Html表格的表示形式
            </summary>
            <param name="obj">对象</param>
            <param name="flags">标识，用于反射</param>
            <param name="maxArrayElements">最大数组长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToHtmlTableInternal(System.Xml.Linq.XContainer,System.Int32)">
            <summary>
            获取指定对象Html表格的表示形式的实现方法
            </summary>
            <param name="xel">节点</param>
            <param name="padding">填充数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.FormatHtmlLine(System.String,System.Int32)">
            <summary>
            格式化Html行
            </summary>
            <param name="tag">标签</param>
            <param name="padding">填充数量</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToXElement(System.Object,System.Reflection.BindingFlags,System.Int32)">
            <summary>
            获取指定对象的Xml表示形式
            </summary>
            <param name="obj">对象</param>
            <param name="flags">标识，用于反射</param>
            <param name="maxArrayElements">最大数组长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToXElementInternal(System.Object,System.Collections.Generic.ICollection{System.Object},System.Reflection.BindingFlags,System.Int32)">
            <summary>
            获取指定对象的Xml表示形式的实现方法
            </summary>
            <param name="obj">对象</param>
            <param name="visited">集合</param>
            <param name="flags">标识，用于反射</param>
            <param name="maxArrayElements">最大数组长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.NeedRecursion(System.Type,System.Object)">
            <summary>
            需要递归
            </summary>
            <param name="type">类型</param>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CleanName(System.Collections.Generic.IEnumerable{System.Char},System.Boolean)">
            <summary>
            洁净的名字
            </summary>
            <param name="name">名字</param>
            <param name="isArray">是否数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.GetValue(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            获取值
            </summary>
            <param name="obj">对象</param>
            <param name="propertyInfo">属性信息</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.DynamicCast(System.Object,System.Type)">
            <summary>
            强制转换对象为指定类型，对匿名类型有用（动态类转换）
            </summary>
            <param name="obj">当前对象</param>
            <param name="targetType">目标类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CastAs``1(System.Object)">
            <summary>
            强制转换对象为指定类型（实体类转换）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">当前对象</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.Cast``1(System.Object,``0)">
            <summary>
            强制转换基本数据类型为指定类型，如果为空则返回默认值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="obj">对象</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CountLoopsToNull``1(``0,System.Func{``0,``0})">
            <summary>
            循环计数Null总数
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="item">需要执行的项</param>
            <param name="function">需要执行的函数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.FindTypeByRecursion``2(``0,System.Func{``0,``0})">
            <summary>
            递归查找类型实例
            </summary>
            <typeparam name="T">源类型</typeparam>
            <typeparam name="K">目标类型</typeparam>
            <param name="item">需要执行的项</param>
            <param name="function">需要执行的函数</param>
            <returns>目标类型或Null</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.Clone``1(``0)">
            <summary>
            对象深拷贝
            </summary>
            <typeparam name="T">对象</typeparam>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CopyPropertiesFrom(System.Object,System.Object)">
            <summary>
            复制属性值，将源对象中可读和可写的公共属性值复制到目标对象
            </summary>
            <param name="target">目标对象</param>
            <param name="source">源对象</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CopyPropertiesFrom(System.Object,System.Object,System.String)">
            <summary>
            复制属性值，将源对象中可读和可写的公共属性值复制到目标对象
            </summary>
            <param name="target">目标对象</param>
            <param name="source">源对象</param>
            <param name="ignoreProperty">忽略的属性</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CopyPropertiesFrom(System.Object,System.Object,System.String[])">
            <summary>
            复制属性值，将源对象中可读和可写的公共属性值复制到目标对象
            </summary>
            <param name="target">目标对象</param>
            <param name="source">源对象</param>
            <param name="ignoreProperties">忽略的属性集合</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToPropertiesString(System.Object)">
            <summary>
            获取对象属性值的字符串表示形式
            </summary>
            <param name="source">源对象</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToPropertiesString(System.Object,System.String)">
            <summary>
            获取对象属性值的字符串表示形式
            </summary>
            <param name="source">源对象</param>
            <param name="delimiter">分隔符</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToXml(System.Object)">
            <summary>
            将对象序列化为Xml字符串
            </summary>
            <param name="source">对象</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToXml(System.Object,System.Text.Encoding)">
            <summary>
            将对象序列化为Xml字符串
            </summary>
            <param name="source">对象</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ToXml``1(``0)">
            <summary>
            将对象序列化为Xml字符串
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="this">对象</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.ExceptionIfNullOrEmpty(System.Object,System.String,System.String)">
            <summary>
            如果对象为空，则抛出指定消息异常
            </summary>
            <param name="value">测试对象</param>
            <param name="message">消息</param>
            <param name="name">参数名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ObjectExtensions.CopyObj(System.Object)">
            <summary>
            对象拷贝，深拷贝
            </summary>
            <param name="obj">被复制的对象</param>
            <returns>新对象</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.TypeExtensions">
            <summary>
            Type类型扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsNullableType(System.Type)">
            <summary>
            判断类型是否为Nullable类型
            </summary>
            <param name="type"> 要处理的类型 </param>
            <returns> 是返回True，不是返回False </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.GetNonNummableType(System.Type)">
            <summary>
            由类型的Nullable类型返回实际类型
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.GetUnNullableType(System.Type)">
            <summary>
            获取Nullable类型的基础类型，通过类型转换器
            </summary>
            <param name="type"> 要处理的类型对象 </param>
            <returns> </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.ToDescription(System.Type,System.Boolean)">
            <summary>
            获取类型的Description特性描述信息
            </summary>
            <param name="type">类型对象</param>
            <param name="inherit">是否搜索类型的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回类型的全名</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.ToDescription(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            获取成员元数据的Description特性描述信息
            </summary>
            <param name="member">成员元数据对象</param>
            <param name="inherit">是否搜索成员的继承链以查找描述特性</param>
            <returns>返回Description特性描述信息，如不存在则返回成员的名称</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.HasAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            检查指定类型成员中是否存在指定的Attribute特性
            </summary>
            <typeparam name="T">要检查的Attribute特性类型</typeparam>
            <param name="memberInfo">要检查的类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.GetAttribute``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>存在返回第一个，不存在返回null</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.GetAttributes``1(System.Reflection.MemberInfo,System.Boolean)">
            <summary>
            从类型成员获取指定Attribute特性
            </summary>
            <typeparam name="T">Attribute特性类型</typeparam>
            <param name="memberInfo">类型类型成员</param>
            <param name="inherit">是否从继承中查找</param>
            <returns>返回所有指定Attribute特性的数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsEnumerable(System.Type)">
            <summary>
            判断类型是否为集合类型
            </summary>
            <param name="type">要处理的类型</param>
            <returns>是返回True，不是返回False</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsGenericAssignableFrom(System.Type,System.Type)">
            <summary>
            判断当前泛型类型是否可由指定类型的实例填充
            </summary>
            <param name="genericType">泛型类型</param>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsAsync(System.Reflection.MethodInfo)">
            <summary>
            方法是否是异步
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsBaseOn(System.Type,System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <param name="type">当前类型</param>
            <param name="baseType">要判断的基类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsBaseOn``1(System.Type)">
            <summary>
            返回当前类型是否是指定基类的派生类
            </summary>
            <typeparam name="TBaseType">要判断的基类型</typeparam>
            <param name="type">当前类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.CreateInstance(System.Type,System.Object[])">
            <summary>
            创建实例，返回所需类型实例
            </summary>
            <param name="type">Type</param>
            <param name="constructorParameters">可选的构造函数参数</param>
            <returns>实例</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            创建实例，返回泛型参数类型T所需类型的实例
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="type">Type</param>
            <param name="constructorParameters">可选的构造函数参数</param>
            <returns>泛型实例</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsBaseType(System.Type,System.Type)">
            <summary>
            判断当前类型是是否基类型
            </summary>
            <param name="type">Type</param>
            <param name="checkingType">检查类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.IsSubclassOfRawGeneric(System.Type,System.Type)">
            <summary>
            判断当前类型是否子类的泛型类型
            </summary>
            <param name="generic">泛型</param>
            <param name="toCheck">检查类型</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TypeExtensions.CreateGenericTypeInstance``1(System.Type,System.Type[])">
            <summary>
            创建泛型类型实例
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="genericType">Type</param>
            <param name="typeArguments">类型实参数组</param>
            <returns>泛型实例</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.BitmapExtensions">
            <summary>
            位图（Bitmap）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Rotate(System.Drawing.Bitmap,System.Int32)">
            <summary>
            使图像绕中心点旋转一定角度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="angle"> 旋转的角度，正值为逆时针方向 </param>
            <returns> 旋转后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Zoom(System.Drawing.Bitmap,System.Int32,System.Int32,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            按指定宽度与高度缩放图像
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="width"> 缩放后的宽度 </param>
            <param name="height"> 缩放后的高度 </param>
            <param name="model">图像质量模式</param>
            <returns> 缩放后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Zoom(System.Drawing.Bitmap,System.Double,System.Drawing.Drawing2D.InterpolationMode)">
            <summary>
            按指定百分比缩放图像
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="percent"> 缩放百分比（小数） </param>
            <param name="model">图像质量模式</param>
            <returns> 缩放后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Gray(System.Drawing.Bitmap)">
            <summary>
            图像灰度化
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 灰度化后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Brightness(System.Drawing.Bitmap,System.Int32)">
            <summary>
            调整图像亮度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> 调整的亮度值，取值为[-255, 255] </param>
            <returns> 调整亮度后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Contrast(System.Drawing.Bitmap,System.Int32)">
            <summary>
            调整图像对比度
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> 调整的对比度，取值为[-100, 100] </param>
            <returns> 调整对比度后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Gamma(System.Drawing.Bitmap,System.Single)">
            <summary>
            Gamma校正
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="value"> Gamma值 </param>
            <returns> Gamma校正后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.SetText(System.Drawing.Bitmap,System.String,System.Drawing.Font,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            在图片上打印文字
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <param name="text"> 要打印的文字 </param>
            <param name="font"> 字体信息 </param>
            <param name="color"> 文字颜色 </param>
            <param name="x"> 文字位置横坐标 </param>
            <param name="y"> 文字位置纵坐标 </param>
            <returns> 打印文字后的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Plate(System.Drawing.Bitmap)">
            <summary>
            底片效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 底片效果的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Emboss(System.Drawing.Bitmap)">
            <summary>
            浮雕效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 浮雕效果的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Soften(System.Drawing.Bitmap)">
            <summary>
            柔化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 柔化效果的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Sharpen(System.Drawing.Bitmap)">
            <summary>
            锐化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 锐化效果的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Atomizing(System.Drawing.Bitmap)">
            <summary>
            雾化效果
            </summary>
            <param name="bmp"> 待处理的图像 </param>
            <returns> 雾化效果的图像 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Binaryzation(System.Drawing.Bitmap)">
            <summary>
            二值化效果
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Binaryzation1(System.Drawing.Bitmap,System.Byte)">
            <summary>
            固定阈值的二值化
            </summary>
            <param name="bmp"> </param>
            <param name="threshold"> </param>
            <returns> </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.OtsuThreshold(System.Drawing.Bitmap)">
            <summary>
            OTSU阈值法二值化
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.Threshoding(System.Drawing.Bitmap,System.Byte)">
            <summary>
            固定阈值的二值化
            </summary>
            <param name="bmp"> </param>
            <param name="threshold"> </param>
            <returns> </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.GetAverageColor(System.Byte[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            获取颜色平均值
            </summary>
            <param name="source">源</param>
            <param name="x">横坐标</param>
            <param name="y">纵坐标</param>
            <param name="w">宽度</param>
            <param name="h">高度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleToSize(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            按指定大小缩放位图
            </summary>
            <param name="bitmap">位图</param>
            <param name="size">目标大小</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleToSize(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            按指定大小缩放位图
            </summary>
            <param name="bitmap">位图</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleProportional(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            按指定比例缩放位图
            </summary>
            <param name="bitmap">位图</param>
            <param name="size">目标比例</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleProportional(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            按指定比例缩放位图
            </summary>
            <param name="bitmap">位图</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Size)">
            <summary>
            按指定的大小比例缩放位图，重叠部分用指定的颜色填充
            </summary>
            <param name="bitmap">位图</param>
            <param name="size">目标大小</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Color,System.Drawing.Size)">
            <summary>
            按指定的大小比例缩放位图，重叠部分用指定的颜色填充
            </summary>
            <param name="bitmap">位图</param>
            <param name="backgroundColor">填充背景颜色</param>
            <param name="size">目标大小</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            按指定的大小比例缩放位图，重叠部分用指定的颜色填充
            </summary>
            <param name="bitmap">位图</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns>Bitmap</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.BitmapExtensions.ScaleToSizeProportional(System.Drawing.Bitmap,System.Drawing.Color,System.Int32,System.Int32)">
            <summary>
            按指定的大小比例缩放位图，重叠部分用指定的颜色填充
            </summary>
            <param name="bitmap">位图</param>
            <param name="backgroundColor">填充背景颜色</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <returns>Bitmap</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.CollectionExtensions">
            <summary>
            集合（IEnumerable、IQueryable、ICollection、IList）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            将集合展开并分别转换成字符串，再以指定的分隔符衔接，拼成一个字符串返回。默认分隔符为逗号
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">要处理的结合</param>
            <param name="separator">分隔符，默认为逗号</param>
            <returns>拼接后的字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ExpandAndToString``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.String},System.String)">
            <summary>
            将集合展开并转为字符串，循环集合每一项，调用委托生成字符串，返回合并后的字符串。默认分隔符为逗号
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">要处理的集合</param>
            <param name="itemFormatFunc">单个集合项的转换委托</param>
            <param name="separator">分隔符，默认为逗号</param>
            <returns>拼接后的字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            集合是否为空
            </summary>
            <param name="collection"> 要处理的集合 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 为空返回True，不为空返回False </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.WhereIf``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            是否执行指定条件的查询，根据第三方条件是否为真来决定
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            根据指定条件返回集合中不重复的元素
            </summary>
            <typeparam name="T">动态类型</typeparam>
            <typeparam name="TKey">动态筛选条件类型</typeparam>
            <param name="source">要操作的源</param>
            <param name="keySelector">重复数据筛选条件</param>
            <returns>不重复元素的集合</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            对指定集合中的每个元素执行指定操作
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="values">集合</param>
            <param name="action">操作</param>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Join(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            扩展Linq的Join方法，使其传递的集合或者数组调用Join方法可以转换成按照规定格式转换的字符串
            </summary>
            <param name="source">需要转换字符串格式的集合信息</param>
            <param name="separator">以某种格式分隔集合的信息，不传递默认为,</param>
            <returns></returns>
            <example>
            <code>
            string[] strJoin={"kencery","liuxiaoji"};
            strJoin.Join("需要分隔的格式，不传递默认按照，分隔")
            </code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.WhereIf``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Boolean)">
            <summary>
            是否执行指定条件的查询，根据第三方条件是否为真来决定
            </summary>
            <param name="source"> 要查询的源 </param>
            <param name="predicate"> 查询条件 </param>
            <param name="condition"> 第三方条件 </param>
            <typeparam name="T"> 动态类型 </typeparam>
            <returns> 查询的结果 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Between``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},``1,``1,System.Boolean,System.Boolean)">
            <summary>
            从指定<see cref="T:System.Linq.IQueryable`1"/>集合中筛选指定键范围内的子数据集
            </summary>
            <typeparam name="TSource">集合元素类型</typeparam>
            <typeparam name="TKey">筛选键类型</typeparam>
            <param name="source">要筛选的数据源</param>
            <param name="keySelector">筛选键的范围表达式</param>
            <param name="start">筛选范围起始值</param>
            <param name="end">筛选范围结束值</param>
            <param name="startEqual">是否等于起始值</param>
            <param name="endEqual">是否等于结束集</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.OrderBy``1(System.Linq.IQueryable{``0},System.String,System.Boolean)">
            <summary>
            扩展Linq的OrderBy方法，实现根据属性和顺序(倒序)进行排序，调用和Linq的方法一致
            </summary>
            <typeparam name="TEntity">需要排序的实体对象</typeparam>
            <param name="source">结果集信息</param>
            <param name="propertyStr">动态排序的属性名(从前台获取)</param>
            <param name="isDesc">排序方式，不传递表示顺序，默认true，false表示倒序</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.AddUnique``1(System.Collections.Generic.ICollection{``0},``0)">
            <summary>
            添加唯一值，向泛型集合添加值（唯一值）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="collection">集合</param>
            <param name="value">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.AddRangeUnique``1(System.Collections.Generic.ICollection{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            批量添加唯一值，向泛型集合批量添加值（唯一值）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="collection">集合</param>
            <param name="values">值（批量）</param>
            <returns>返回添加成功数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.RemoveWhere``1(System.Collections.Generic.ICollection{``0},System.Predicate{``0})">
            <summary>
            移除集合中的指定项，根据查询条件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <param name="predicate">查询集合</param>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.IsEmpty(System.Collections.ICollection)">
            <summary>
            集合是否为空
            </summary>
            <param name="collection">集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            集合是否为空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.IsEmpty(System.Collections.IList)">
            <summary>
            集合是否为空
            </summary>
            <param name="collection">集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.IsEmpty``1(System.Collections.Generic.IList{``0})">
            <summary>
            集合是否为空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="collection">集合</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.InsertUnique``1(System.Collections.Generic.IList{``0},System.Int32,``0)">
            <summary>
            将唯一值插入到指定索引，向泛型列表添加值（唯一值）
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="list">列表</param>
            <param name="index">索引</param>
            <param name="item">值</param>
            <returns>成功返回true，失败返回false</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.InsertRangeUnique``1(System.Collections.Generic.IList{``0},System.Int32,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            将值批量插入指定索引，向泛型列表批量插入值（唯一值）
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <param name="startIndex">索引</param>
            <param name="items">值（批量）</param>
            <returns>返回插入成功数</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.IndexOf``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean})">
            <summary>
            获取第一个匹配项的索引
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <param name="comparison">条件</param>
            <returns>索引值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Join``1(System.Collections.Generic.IList{``0},System.Char)">
            <summary>
            将泛型列表合并为字符串，根据指定的字符进行分隔
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <param name="joinChar">分隔符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Join``1(System.Collections.Generic.IList{``0},System.String)">
            <summary>
            将泛型列表合并为字符串，根据指定的字符串进行分隔
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">列表</param>
            <param name="joinString">分隔符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Match``1(System.Collections.Generic.IList{``0},System.String,System.Int32,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
            <summary>
            获取匹配的指定项列表，根据查询条件以及参数
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list">数据源</param>
            <param name="searchString">查询字符串</param>
            <param name="top">前几项</param>
            <param name="args">查询条件</param>
            <returns>List</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ToList``1(System.Collections.IList)">
            <summary>
            将IList转为指定类型List
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数据源</param>
            <returns>List</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.GetRandomItem``1(System.Collections.Generic.IList{``0},System.Random)">
            <summary>
            获取随机项，根据随机数生成器
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数据源</param>
            <param name="random">随机数生成器</param>
            <returns>随机项</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.GetRandomItem``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            获取随机项，根据种子
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数据源</param>
            <param name="seed">种子</param>
            <returns>随机项</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.GetRandomItem``1(System.Collections.Generic.IList{``0})">
            <summary>
            获取随机项
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="source">数据源</param>
            <returns>随机项</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Merge``1(System.Collections.Generic.List{``0}[])">
            <summary>
            合并列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="lists">列表</param>
            <returns>合并后的列表</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Merge``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Collections.Generic.List{``0}[])">
            <summary>
            合并列表，根据Lambda表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="match">Lambda表达式</param>
            <param name="lists">列表</param>
            <returns>合并后的列表</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Merge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            合并列表，根据Lambda表达式
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <param name="match">Lambda表达式</param>
            <returns>合并后的列表</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.Merge``1(System.Collections.Generic.List{``0},System.Collections.Generic.List{``0})">
            <summary>
            合并列表
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="list1">列表1</param>
            <param name="list2">列表2</param>
            <returns>合并后的列表 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ToDataTable``1(System.Collections.Generic.List{``0})">
            <summary>
            将List转换成数据表
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="entities">List集合</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ToArray``1(System.Data.DataTable)">
            <summary>
            将DataTable转换成T[]数组对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ToList``1(System.Data.DataTable)">
            <summary>
            将DataTable转换为IList集合（反射实现）
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.ToListByLambda``1(System.Data.DataTable)">
            <summary>
            将DataTable转换为IList集合（Lambda实现）
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="table">数据表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.FirstOrDefault``1(System.Collections.Specialized.NameObjectCollectionBase,System.Func{``0,System.Boolean})">
            <summary>
            获取序列中符合条件的第一个元素，如果序列中不包含指定条件的元素，则返回默认值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="collection">名称对象集合</param>
            <param name="filter">过滤条件</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.CollectionExtensions.SafeAdd``1(System.Collections.Generic.HashSet{``0},``0)">
            <summary>
            在HashSet中添加值，并返回是否添加成功
            </summary>
            <typeparam name="T">HashSet的类型</typeparam>
            <param name="hashset">目标HashSet</param>
            <param name="obj">要添加的值</param>
            <returns>true:表示添加成功,false:表示已存在</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ColorExtensions">
            <summary>
            颜色（Color）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ColorExtensions.ToHtmlColor(System.Drawing.Color)">
            <summary>
            转为RGB颜色
            </summary>
            <param name="color">颜色</param>
            <returns>RGB颜色值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ColorExtensions.ToOleColor(System.Drawing.Color)">
            <summary>
            转为OLE颜色
            </summary>
            <param name="color">颜色</param>
            <returns>OLE颜色值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ColorExtensions.ToWin32Color(System.Drawing.Color)">
            <summary>
            转为Windows颜色
            </summary>
            <param name="color">颜色</param>
            <returns>Windows颜色值</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ComparableExtensions">
            <summary>
            比较对象（string,Datetime,numeric）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ComparableExtensions.IsBetWeen``1(``0,``0,``0)">
            <summary>
            判断指定值是否在定义的最小值和最大值（包括边界值）之间
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>如果指定值介于最小值和最大值之间返回true</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ComparableExtensions.IsBetWeen``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            判断指定值是否在定义的最小值和最大值（包括边界值）之间
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="comparer">比较器</param>
            <returns>如果指定值介于最小值和最大值之间返回true</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ComparableExtensions.DescendingComparer`1">
            <summary>
            降序比较器
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:JCE.Utils.Extensions.ComparableExtensions.DescendingComparer`1.Compare(`0,`0)">
            <summary>
            对象比较
            </summary>
            <param name="x">对象</param>
            <param name="y">对象</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ComparableExtensions.AscendingComparer`1">
            <summary>
            升序比较器
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:JCE.Utils.Extensions.ComparableExtensions.AscendingComparer`1.Compare(`0,`0)">
            <summary>
            对象比较
            </summary>
            <param name="x">对象</param>
            <param name="y">对象</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ComponentExtensions">
            <summary>
            组件（Component）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ComponentExtensions.IsInDesignMode(System.ComponentModel.IComponent)">
            <summary>
            判断目标组件是否处于设计模式
            </summary>
            <param name="target">组件</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ComponentExtensions.IsInRuntimeMode(System.ComponentModel.IComponent)">
            <summary>
            判断目标组件是否不处于设计模式
            </summary>
            <param name="target">组件</param>
            <returns>bool</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ConcurrentBagExtensions">
            <summary>
            线程安全的无序集合（ConcurrentBag）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ConcurrentBagExtensions.Clear``1(System.Collections.Concurrent.ConcurrentBag{``0})">
            <summary>
            清除对象的数据
            </summary>
            <typeparam name="TEntity">对象类型</typeparam>
            <param name="list">线程安全的无序集合</param>
        </member>
        <member name="T:JCE.Utils.Extensions.ConcurrentDictionaryExtensions">
            <summary>
            ConcurrentDictionary线程安全集合扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ConcurrentDictionaryExtensions.Remove``2(System.Collections.Concurrent.ConcurrentDictionary{``0,``1},``0)">
            <summary>
            移除字典项，指定键
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
        </member>
        <member name="T:JCE.Utils.Extensions.ConstructorExtensions">
            <summary>
            构造函数（T）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ConstructorExtensions.AutoInitialize``1(``0,System.Object,System.Reflection.BindingFlags)">
            <summary>
            自动初始化源对象，对象数据为绑定标识指定的所有属性
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="source">源对象，源对象对其属性初始化</param>
            <param name="data">数据对象，用于初始化源对象的数据对象</param>
            <param name="flags">用于属性的绑定标识</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ConstructorExtensions.AutoInitialize``1(``0,System.Data.DataRow,System.Reflection.BindingFlags)">
             <summary>
             自动初始化源对象，数据行的为绑定标识指定的所有属性
             </summary>
             <typeparam name="T">泛型</typeparam>
             <param name="source">源对象，源对象对其属性初始化</param>
             <param name="row">数据行，初始化包含数据的数据行</param>
            <param name="flags">用于属性的绑定标识</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ConstructorExtensions.AutoInitialize``1(``0,System.Data.DataRow,System.Reflection.BindingFlags,System.Linq.Expressions.Expression{System.Func{``0,System.Object}}[])">
             <summary>
             自动初始化源对象，数据行的绑定标识指定的所有属性
             </summary>
              <typeparam name="T">泛型</typeparam>
             <param name="source">源对象，源对象对其属性初始化</param>
             <param name="row">数据行，初始化包含数据的数据行</param>
            <param name="flags">用于属性的绑定标识</param>
             <param name="columns">列，表达式</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ConstructorExtensions.GetProperty``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            从属性表达式获取属性信息
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="propertyExpression">属性表达式</param>
            <returns>属性信息</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DataReaderExtensions">
            <summary>
            数据读取器（IDataReader）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.Get``1(System.Data.IDataReader,System.String,``0)">
            <summary>
            获取指定字段的数据类型
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetBytes(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的字节数组
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetString(System.Data.IDataReader,System.String,System.String)">
            <summary>
            获取指定字段的字符串，如果为空，则返回指定的默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetGuid(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的Guid，如果为空，则返回Guid.Empty
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetNullableGuid(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的可空Guid
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetDateTime(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的DateTime，如果为空，则返回DateTime.MinValue
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetDateTime(System.Data.IDataReader,System.String,System.DateTime)">
            <summary>
            获取指定字段的DateTime，如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetNullableDateTime(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的可空DateTime
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetDateTimeOffset(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的DateTimeOffset（时间点），如果为空，则返回DateTime.MinValue
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetDateTimeOffset(System.Data.IDataReader,System.String,System.DateTimeOffset)">
            <summary>
            获取指定字段的DateTimeOffset（时间点），如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetNullableDateTimeOffset(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的可空DateTimeOffset（时间点）
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetInt32(System.Data.IDataReader,System.String,System.Int32)">
            <summary>
            获取指定字段的int值，如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetNullableInt32(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的可空int值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetInt64(System.Data.IDataReader,System.String,System.Int64)">
            <summary>
            获取指定字段的long值，如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetNullableInt64(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的可空long值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetDecimal(System.Data.IDataReader,System.String,System.Decimal)">
            <summary>
            获取指定字段的decimal值，如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetNullableDecimal(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的可空decimal值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetBoolean(System.Data.IDataReader,System.String,System.Boolean)">
            <summary>
            获取指定字段的bool值，如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetNullableBoolean(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的可空bool值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetType(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            获取指定字段的类型实例，如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetTypeInstance(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            获取指定字段的类型实例，如果为空，则返回指定默认值
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetTypeInstance``1(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的泛型对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetTypeInstanceSafe``1(System.Data.IDataReader,System.String,System.Type)">
            <summary>
            获取指定字段的泛型对象，如果为空，则返回指定类型的实例对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <param name="type">指定实例类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.GetTypeInstanceSafe``1(System.Data.IDataReader,System.String)">
            <summary>
            获取指定字段的泛型对象，如果为空，则返回泛型类型对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.IsDbNull(System.Data.IDataReader,System.String)">
            <summary>
            确定指定字段的记录值是否为DbNull
            </summary>
            <param name="reader">数据读取器</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.ReadAll(System.Data.IDataReader,System.Action{System.Data.IDataReader})">
            <summary>
            记录执行次数，从数据读取器中读取所有记录并执行每个操作
            </summary>
            <param name="reader">数据读取器</param>
            <param name="action">执行操作</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataReaderExtensions.IndexOf(System.Data.IDataRecord,System.String)">
            <summary>
            获取指定名称的列索引（不区分大小写）
            </summary>
            <param name="this">数据记录</param>
            <param name="name">名称</param>
            <returns>成功返回列索引，失败则返回-1</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DataRowExtensions">
            <summary>
            数据行（DataRow）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.Get``1(System.Data.DataRow,System.String,``0)">
            <summary>
            获取指定字段的数据类型
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetBytes(System.Data.DataRow,System.String)">
            <summary>
            获取指定字段的字节数组
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetString(System.Data.DataRow,System.String,System.String)">
            <summary>
            获取指定字段的字符串，如果为空，则返回指定的默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetGuid(System.Data.DataRow,System.String)">
            <summary>
            获取指定字段的Guid，如果为空，则返回Guid.Empty
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetDateTime(System.Data.DataRow,System.String)">
            <summary>
            获取指定字段的DateTime，如果为空，则返回DateTime.MinValue
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetDateTime(System.Data.DataRow,System.String,System.DateTime)">
            <summary>
            获取指定字段的DateTime，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetDateTimeOffset(System.Data.DataRow,System.String)">
            <summary>
            获取指定字段的DateTimeOffset（时间点），如果为空，则返回DateTime.MinValue
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetDateTimeOffset(System.Data.DataRow,System.String,System.DateTimeOffset)">
            <summary>
            获取指定字段的DateTimeOffset（时间点），如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetInt32(System.Data.DataRow,System.String,System.Int32)">
            <summary>
            获取指定字段的int值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetInt64(System.Data.DataRow,System.String,System.Int64)">
            <summary>
            获取指定字段的long值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetDecimal(System.Data.DataRow,System.String,System.Decimal)">
            <summary>
            获取指定字段的decimal值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetBoolean(System.Data.DataRow,System.String,System.Boolean)">
            <summary>
            获取指定字段的bool值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetType(System.Data.DataRow,System.String,System.Type)">
            <summary>
            获取指定字段的类型实例，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetTypeInstance(System.Data.DataRow,System.String,System.Type)">
            <summary>
            获取指定字段的类型实例，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetTypeInstance``1(System.Data.DataRow,System.String)">
            <summary>
            获取指定字段的泛型对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetTypeInstanceSafe``1(System.Data.DataRow,System.String,System.Type)">
            <summary>
            获取指定字段的泛型对象，如果为空，则返回指定类型的实例对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="type">指定实例类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.GetTypeInstanceSafe``1(System.Data.DataRow,System.String)">
            <summary>
            获取指定字段的泛型对象，如果为空，则返回泛型类型对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.IsDbNull(System.Data.DataRow,System.String)">
            <summary>
            确定指定字段的记录值是否为DbNull
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowExtensions.ToExpression``1(System.Data.DataRow)">
            <summary>
            生成表达式
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="row">数据行</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DataRowViewExtensions">
            <summary>
            数据行视图（DataRowView）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.Get``1(System.Data.DataRowView,System.String,``0)">
            <summary>
            获取指定字段的数据类型
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetBytes(System.Data.DataRowView,System.String)">
            <summary>
            获取指定字段的字节数组
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetString(System.Data.DataRowView,System.String,System.String)">
            <summary>
            获取指定字段的字符串，如果为空，则返回指定的默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetGuid(System.Data.DataRowView,System.String)">
            <summary>
            获取指定字段的Guid，如果为空，则返回Guid.Empty
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetDateTime(System.Data.DataRowView,System.String)">
            <summary>
            获取指定字段的DateTime，如果为空，则返回DateTime.MinValue
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetDateTime(System.Data.DataRowView,System.String,System.DateTime)">
            <summary>
            获取指定字段的DateTime，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetDateTimeOffset(System.Data.DataRowView,System.String)">
            <summary>
            获取指定字段的DateTimeOffset（时间点），如果为空，则返回DateTime.MinValue
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetDateTimeOffset(System.Data.DataRowView,System.String,System.DateTimeOffset)">
            <summary>
            获取指定字段的DateTimeOffset（时间点），如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetInt32(System.Data.DataRowView,System.String,System.Int32)">
            <summary>
            获取指定字段的int值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetInt64(System.Data.DataRowView,System.String,System.Int64)">
            <summary>
            获取指定字段的long值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetDecimal(System.Data.DataRowView,System.String,System.Decimal)">
            <summary>
            获取指定字段的decimal值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetBoolean(System.Data.DataRowView,System.String,System.Boolean)">
            <summary>
            获取指定字段的bool值，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetType(System.Data.DataRowView,System.String,System.Type)">
            <summary>
            获取指定字段的类型实例，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetTypeInstance(System.Data.DataRowView,System.String,System.Type)">
            <summary>
            获取指定字段的类型实例，如果为空，则返回指定默认值
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetTypeInstance``1(System.Data.DataRowView,System.String)">
            <summary>
            获取指定字段的泛型对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetTypeInstanceSafe``1(System.Data.DataRowView,System.String,System.Type)">
            <summary>
            获取指定字段的泛型对象，如果为空，则返回指定类型的实例对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <param name="type">指定实例类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.GetTypeInstanceSafe``1(System.Data.DataRowView,System.String)">
            <summary>
            获取指定字段的泛型对象，如果为空，则返回泛型类型对象
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataRowViewExtensions.IsDbNull(System.Data.DataRowView,System.String)">
            <summary>
            确定指定字段的记录纸是否为DbNull
            </summary>
            <param name="row">数据行</param>
            <param name="field">字段</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DataTableExtensions">
            <summary>
            数据表（DataTable）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DataTableExtensions.Sort(System.Data.DataTable,System.String)">
            <summary>
            DataTable排序
            </summary>
            <param name="dt">要排序的表</param>
            <param name="sort">要排序的字段（例如：ID DESC）</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataTableExtensions.Split(System.Data.DataTable,System.Int32,System.Int32)">
            <summary>
            DataTable分页
            </summary>
            <param name="dt">源表</param>
            <param name="pageSize">每页显示记录数</param>
            <param name="pageIndex">页码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataTableExtensions.Reverse(System.Data.DataTable)">
            <summary>
            DataTable倒序
            </summary>
            <param name="dt">源表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataTableExtensions.CloneData(System.Data.DataTable)">
            <summary>
            DataTable深度复制（包含数据）
            </summary>
            <param name="dt">源表</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DataTableExtensions.ToRows(System.Data.DataRowCollection)">
            <summary>
            将DataRowCollection转换成List[DataRow]
            </summary>
            <param name="drc">DataRowCollection</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DbConnectionExtensions">
            <summary>
            数据库连接（DbConnection）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DbConnectionExtensions.StateIsWithin(System.Data.IDbConnection,System.Data.ConnectionState[])">
            <summary>
            判断当前数据库连接是否在指定状态范围内，在则返回true
            </summary>
            <param name="connection">数据库连接</param>
            <param name="states">数据库连接状态</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DbConnectionExtensions.IsInState(System.Data.IDbConnection,System.Data.ConnectionState)">
            <summary>
            判断当前数据库连接是否处于指定状态，处于则返回true
            </summary>
            <param name="connection">数据库连接</param>
            <param name="state">数据库连接状态</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DbConnectionExtensions.OpenIfNot(System.Data.IDbConnection)">
            <summary>
            打开数据库连接，如果尚未打开
            </summary>
            <param name="connection">数据库连接</param>
        </member>
        <member name="T:JCE.Utils.Extensions.DictionaryExtensions">
            <summary>
            字典（Dictionary）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定的字典排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns>排序后的字典</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.Sort``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IComparer{``0})">
            <summary>
            对指定的字典排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="comparer">比较器，用于排序字典</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.SortByValue``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定的字典排序，根据值元素进行排序
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.Invert``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定的字典反转，创建新字典（值作为键、键作为值）
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.ToHashTable``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            对指定字典转换为HashTable
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.GetFirstValue``2(System.Collections.Generic.IDictionary{``0,``1},``1,``0[])">
            <summary>
            获取指定键集合中匹配的第一个值
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="defaultValue">默认值</param>
            <param name="keys">键集合</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            获取指定键的值，如果找不到指定键的值则抛出异常
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.GetOrThrow``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Exception)">
            <summary>
            获取指定键的值，如果找不到指定键的值则抛出指定异常
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <param name="key">键</param>
            <param name="exception">异常</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``0,``1})">
            <summary>
            获取指定Key对应的Value，若未找到将使用指定的委托增加值
            </summary>
            <typeparam name="TKey">键</typeparam>
            <typeparam name="TValue">值</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="setValue">设置值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.Get``2(System.Collections.Generic.IDictionary{``0,``1},``0)">
            <summary>
            获取指定Key对应的Value，若未找到将抛异常
            </summary>
            <typeparam name="TKey">键</typeparam>
            <typeparam name="TValue">值</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.IsEmpty(System.Collections.IDictionary)">
            <summary>
            判断字典是否为空
            </summary>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.IsEmpty``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            判断字典是否为空
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dictionary">字典</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.TryAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            尝试将键值对添加到字典中：如果不存在，则添加；存在，不添加也不抛异常
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.Update``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            将键值对添加或更新到字典中：如果不存在，则添加；存在，则更新
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">字典</param>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.AddRange``2(System.Collections.Generic.IDictionary{``0,``1},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Boolean)">
            <summary>
            批量添加键值对到字典中
            </summary>
            <typeparam name="TKey">键类型</typeparam>
            <typeparam name="TValue">值类型</typeparam>
            <param name="dict">字典</param>
            <param name="values">键值对集合</param>
            <param name="replaceExisted">是否替换已存在的键值对</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.GetKey``2(System.Collections.Generic.Dictionary{``0,``1},``1)">
            <summary>
            根据Value值反向查找Key
            </summary>
            <typeparam name="T1">Key</typeparam>
            <typeparam name="T2">Value</typeparam>
            <param name="dic">字典对象</param>
            <param name="t2">键值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DictionaryExtensions.ToQueryString``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            将字典转换成查询字符串
            </summary>
            <typeparam name="TK">键类型</typeparam>
            <typeparam name="TV">值类型</typeparam>
            <param name="source">源字典</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.DirectoryInfoExtensions">
            <summary>
            目录信息（DirectoryInfo）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.GetFiles(System.IO.DirectoryInfo,System.String[])">
            <summary>
            获取目录中所有文件，根据提供模式进行匹配文件
            </summary>
            <param name="directory">目录</param>
            <param name="patterns">模式</param>
            <returns>匹配文件列表</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.FindFileRecursive(System.IO.DirectoryInfo,System.String)">
            <summary>
            对指定目录递归搜索，并返回与提供的模式匹配的第一个文件
            </summary>
            <param name="directory">目录</param>
            <param name="pattern">匹配模式</param>
            <returns>匹配文件</returns>
            <example>
            	<code>
            		var directory = new DirectoryInfo(@"c:\");
            		var file = directory.FindFileRecursive("win.ini");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.FindFileRecursive(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
            对指定目录递归搜索，并返回与提供的谓词匹配的第一个文件
            </summary>
            <param name="directory">目录</param>
            <param name="predicate">谓词</param>
            <returns>匹配文件</returns>
            <example>
            	<code>
            		var directory = new DirectoryInfo(@"c:\");
            		var file = directory.FindFileRecursive(f => f.Extension == ".ini");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.FindFilesRecursive(System.IO.DirectoryInfo,System.String)">
            <summary>
            对指定目录递归搜索，并返回与提供的模式匹配的所有文件
            </summary>
            <param name="directory">源目录</param>
            <param name="pattern">路径</param>
            <returns>目录文件</returns>
            <example>
            	<code>
            		var directory = new DirectoryInfo(@"c:\");
            		var files = directory.FindFilesRecursive("*.ini");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.FindFilesRecursive(System.IO.DirectoryInfo,System.String,System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            对指定目录递归搜索，并返回与提供的模式匹配的所有文件
            </summary>
            <param name="directory">源目录</param>
            <param name="pattern">路径</param>
            <param name="foundFiles">目录文件</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.FindFilesRecursive(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean})">
            <summary>
            对指定目录递归搜索，并返回与提供的谓词匹配的所有文件
            </summary>
            <param name="directory">源目录</param>
            <param name="predicate">目标目录</param>
            <returns>文件信息</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.FindFilesRecursive(System.IO.DirectoryInfo,System.Func{System.IO.FileInfo,System.Boolean},System.Collections.Generic.List{System.IO.FileInfo})">
            <summary>
            对指定目录递归搜索
            </summary>
            <param name="directory">源目录</param>
            <param name="predicate">谓词</param>
            <param name="foundFiles">文件列表</param>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.CopyTo(System.IO.DirectoryInfo,System.String)">
            <summary>
            复制目录，将整个目录复制到另外一个路径中
            </summary>
            <param name="sourceDirectory">源目录</param>
            <param name="targetDirectoryPath">目标目录路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.DirectoryInfoExtensions.CopyTo(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            复制目录，将整个目录复制到另外一个路径中
            </summary>
            <param name="sourceDirectory">源目录</param>
            <param name="targettDirectory">目标目录</param>
        </member>
        <member name="T:JCE.Utils.Extensions.EventHandlerExtenders">
            <summary>
            事件处理器（EventHandler）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.EventHandlerExtenders.RaiseEvent``1(System.EventHandler{``0},System.Object,``0)">
             <summary>
             引用任何类型事件的实现事件到当前的线程上
             </summary>
             <typeparam name="TEventArgs">引用事件类型</typeparam>
             <param name="eventHandler">事件处理器</param>
             <param name="sender">需要传递的对象实例</param>
             <param name="e">要传递的事件</param>
             <example>
             <code>
               public class MyEventArgs : EventArgs
                {
                    private string msg;
            
                    public MyEventArgs(string messageData)
                    {
                        msg = messageData;
                   }
                    public string Message
                    {
                        get { return msg; }
                        set { msg = value; }
                    }
                }
               public class ClassWithACustomEvent
               {
                 // Declare an event of delegate type EventHandler of 
                 // MyEventArgs.
            
                   public event EventHandler<MyEventArgs/> SampleEvent;
            
                   public void OnDemoEvent(MyEventArgs e)
                   {
                       // Raise the event on the current thread
                       SampleEvent.RaiseEvent(this, e);
                   }
            
                   public void OnDemoEventUIThread(MyEventArgs e)
                    {
                       // Raise the event on the subscribers UI thread, if possible
                      SampleEvent.RaiseEventOnUIThread(this, e);
                 }
               }
               public class Sample
               {
                 public static void Main()
                  {
                     ClassWithACustomEvent theClass = new ClassWithACustomEvent();
                     theClass.SampleEvent += new EventHandler<MyEventArgs/>(SampleEventHandler);
                     theClass.OnDemoEvent(new MyEventArgs("Hey there, Bruce!"));
                     theClass.OnDemoEvent(new MyEventArgs("How are you today?"));
                     theClass.OnDemoEventUIThread(new MyEventArgs("I'm pretty good."));
                     theClass.OnDemoEventUIThread(new MyEventArgs("Thanks for asking!"));
                  }
            
                   private static void SampleEventHandler(object src, MyEventArgs e)
                  {
                     Console.WriteLine(e.Message);
                 }
               }
               /*
               This example produces the following results:
            
               Hey there, JT!
               How are you today?
               I'm pretty good.
               Thanks for asking!
            
               */
             </code>
             </example>
        </member>
        <member name="M:JCE.Utils.Extensions.EventHandlerExtenders.RaiseEventOnUiThread``1(System.EventHandler{``0},System.Object,``0)">
            <summary>
            引用任何类型事件的实现事件到当前的UI线程上
            </summary>
            <typeparam name="TEventArgs">引用事件类型</typeparam>
            <param name="eventHandler">事件处理器</param>
            <param name="sender">需要传递的对象实例</param>
            <param name="e">要传递的事件</param>
        </member>
        <member name="T:JCE.Utils.Extensions.ExceptionExtensions">
            <summary>
            异常（Exception）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ExceptionExtensions.FormatMessage(System.Exception,System.Boolean)">
            <summary>
            格式化异常消息
            </summary>
            <param name="e">异常对象</param>
            <param name="isHideStackTrace">是否隐藏异常规模信息</param>
            <returns>格式化后的异常信息字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ExceptionExtensions.GetOriginalException(System.Exception)">
            <summary>
            获取原始异常
            </summary>
            <param name="exception">异常</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ExceptionExtensions.Messages(System.Exception)">
            <summary>
            获取所有错误消息列表
            </summary>
            <param name="exception">异常</param>
            <returns></returns>
            <note>
            最内部的异常消息在列表中第一项，最外层的异常消息在列表中最后一项
            </note>
        </member>
        <member name="M:JCE.Utils.Extensions.ExceptionExtensions.Exceptions(System.Exception)">
            <summary>
            获取所有异常列表
            </summary>
            <param name="exception">异常</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ExpressionExtensions">
            <summary>
            表达式（Expression）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ExpressionExtensions.Compose``1(System.Linq.Expressions.Expression{``0},System.Linq.Expressions.Expression{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            以特定的条件运行组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <param name="merge">组合条件运算方式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ExpressionExtensions.And``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.AndAlso 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ExpressionExtensions.Or``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            以 Expression.OrElse 组合两个Expression表达式
            </summary>
            <typeparam name="T">表达式的主实体类型</typeparam>
            <param name="first">第一个Expression表达式</param>
            <param name="second">要组合的Expression表达式</param>
            <returns>组合后的表达式</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ExpressionExtensions.ParameterRebinder">
            <summary>
            参数重绑
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ExpressionExtensions.ParameterRebinder.#ctor(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression})">
            <summary>
            构造函数
            </summary>
            <param name="map">字典</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ExpressionExtensions.ParameterRebinder.ReplaceParameters(System.Collections.Generic.Dictionary{System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression)">
            <summary>
            替换参数
            </summary>
            <param name="map">字典</param>
            <param name="exp">表达式树</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ExpressionExtensions.ParameterRebinder.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            访问参数
            </summary>
            <param name="node">表达式</param>
            <returns>表达式树</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ExtensionMethodSetting">
            <summary>
            扩展方法设置
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ExtensionMethodSetting.#cctor">
            <summary>
            初始化扩展方法设置类的静态实例
            </summary>
        </member>
        <member name="P:JCE.Utils.Extensions.ExtensionMethodSetting.DefaultEncoding">
            <summary>
            默认编码
            </summary>
        </member>
        <member name="P:JCE.Utils.Extensions.ExtensionMethodSetting.DefaultCulture">
            <summary>
            默认区域设置
            </summary>
        </member>
        <member name="T:JCE.Utils.Extensions.Extensions">
            <summary>
            类型转换扩展
            </summary>
            <summary>
            格式化扩展
            </summary>
            <summary>
            验证扩展
            </summary>
            <summary>
            公共扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToBool(System.String)">
            <summary>
            转换为bool类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToBoolOrNull(System.String)">
            <summary>
            转换为可空bool类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToInt(System.String)">
            <summary>
            转换为int类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToIntOrNull(System.String)">
            <summary>
            转换为可空int类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToLong(System.String)">
            <summary>
            转换为long类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToLongOrNull(System.String)">
            <summary>
            转换为可空long类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToDouble(System.String)">
            <summary>
            转换为double类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToDoubleOrNull(System.String)">
            <summary>
            转换为可空double类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToDecimal(System.String)">
            <summary>
            转换为decimal类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToDecimalOrNull(System.String)">
            <summary>
            转换为可空decimal类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToDate(System.String)">
            <summary>
            转换为DateTime类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToDateOrNull(System.String)">
            <summary>
            转换为可空DateTime类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToGuid(System.String)">
            <summary>
            转换为Guid类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToGuidOrNull(System.String)">
            <summary>
            转换为可空Guid类型
            </summary>
            <param name="obj">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToGuidList(System.String)">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">数据,范例: "83B0233C-A24F-49FD-8083-1337209EBC9A,EAB523C6-2FE7-47BE-89D5-C6D440C3033A"</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToGuidList(System.Collections.Generic.IList{System.String})">
            <summary>
            转换为Guid集合
            </summary>
            <param name="obj">字符串集合</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.ToStr(System.Object)">
            <summary>
            获取字符串，当值为null时返回""
            </summary>
            <param name="obj">对象</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.Description(System.Boolean)">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.Description(System.Nullable{System.Boolean})">
            <summary>
            获取描述
            </summary>
            <param name="value">布尔值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.CheckNull(System.Object,System.String)">
            <summary>
            检测空值,为null则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <param name="obj">对象</param>
            <param name="parameterName">参数名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.IsEmpty(System.String)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.IsEmpty(System.Nullable{System.Guid})">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.IsEmpty(System.Guid)">
            <summary>
            是否为空
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.SafeValue``1(System.Nullable{``0})">
            <summary>
            安全返回值
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">可空值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.Description(System.Enum)">
            <summary>
            获取描述,使用System.ComponentModel.Description特性设置描述
            </summary>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.Value(System.Enum)">
            <summary>
            获取成员值
            </summary>
            <param name="instance">枚举实例</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.Extensions.Log(System.Exception,JCE.Utils.Logging.ILog)">
            <summary>
            写日志
            </summary>
            <param name="exception">异常</param>
            <param name="log">日志</param>
        </member>
        <member name="T:JCE.Utils.Extensions.StringExtensions">
            <summary>
            字符串<see cref="T:System.String"/>类型的扩展辅助操作类
            </summary>    
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsMatch(System.String,System.String)">
            <summary>
            确定所指定的正则表达式在指定的输入字符串中是否找到了匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsMatch(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            确定所指定的正则表达式在指定的输入字符串中找到匹配项
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <param name="options">规则</param>
            <returns>如果正则表达式找到匹配项，则为 true；否则，为 false</returns>
        </member>
        <!-- 对于成员“M:JCE.Utils.Extensions.StringExtensions.GetMatch(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetMatchingValues(System.String,System.String)">
            <summary>
            在指定的输入字符串中搜索指定的正则表达式的所有匹配项的字符串集合
            </summary>
            <param name="value">要搜索匹配项的字符串</param>
            <param name="pattern">要匹配的正则表达式模式</param>
            <returns> 一个集合，包含有关匹配项的字符串值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetMatchingValues(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式来确定一个给定的正则表达式模式的所有匹配的字符串返回的枚举
            </summary>
            <param name="value">输入字符串</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <returns>匹配字符串的枚举</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetMatches(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式来确定指定的正则表达式模式的所有匹配项
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.RegexSplit(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式将字符串拆分为字符串数组
            </summary>
            <param name="value">输入字符串</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <returns>分割字符串数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetWords(System.String)">
            <summary>
            将给定的字符串拆分为单词并返回一个字符串数组。
            </summary>
            <param name="value">输入字符串</param>
            <returns>分割字符串数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetWordByIndex(System.String,System.Int32)">
            <summary>
            获取指定索引的单词
            </summary>
            <param name="value">输入字符串</param>
            <param name="index">单词索引</param>
            <returns>字符串位置的单词</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.SpaceOnUpper(System.String)">
            <summary>
            在每个大写字母上添加空格
            </summary>
            <param name="value">输入字符串</param>
            <returns>调整后的字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ExtractArguments(System.String,System.String,JCE.Utils.Extensions.ComparsionTemplateOptions,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            从字符串中根据模板提取参数
            </summary>
            <param name="value">字符串</param>
            <param name="template">格式化模板</param>
            <param name="compareTemplateOptions">比较模板选项</param>
            <param name="regexOptions">正则表达式选项</param>
            <returns>返回分析的参数</returns>
            <example>
            	<code>
            		var str = "My name is Aleksey Nagovitsyn. I'm from Russia.";
            		var args = str.ExtractArguments(@"My name is {1} {0}. I'm from {2}.");
                    // args[i] is [Nagovitsyn, Aleksey, Russia]
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ExtractGroupArguments(System.String,System.String,JCE.Utils.Extensions.ComparsionTemplateOptions,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            从字符串中根据模板提取参数的正则表达式分组
            </summary>
            <param name="value">字符串</param>
            <param name="template">格式化模板</param>
            <param name="compareTemplateOptions">比较模板选项</param>
            <param name="regexOptions">正则表达式选项</param>
            <returns>返回正则表达式解析参数组</returns>
            <example>
            	<code>
            		var str = "My name is Aleksey Nagovitsyn. I'm from Russia.";
            		var groupArgs = str.ExtractGroupArguments(@"My name is {1} {0}. I'm from {2}.");
                    // groupArgs[i].Value is [Nagovitsyn, Aleksey, Russia]
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetRegexPattern(System.String,JCE.Utils.Extensions.ComparsionTemplateOptions)">
            <summary>
            获取正则表达式
            </summary>
            <param name="template">模板</param>
            <param name="compareTemplateOptions">比较模板选项</param>
            <returns>正则表达式</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.String)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="replaceValue">替换值</param>
            <returns></returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="replaceValue">替换值</param>
            <param name="options">比较规则</param>
            <returns></returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="evaluator">替换方法/Lambda表达式</param>
            <returns></returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReplaceWith(System.String,System.String,System.Text.RegularExpressions.RegexOptions,System.Text.RegularExpressions.MatchEvaluator)">
            <summary>
            使用正则表达式替换符合规则的字符串
            </summary>
            <param name="value">值</param>
            <param name="pattern">正则表达式</param>
            <param name="options">比较规则</param>
            <param name="evaluator">替换方法/Lambda表达式</param>
            <returns></returns>
            <example>
            	<code>
            		var s = "12345";
            		var replaced = s.ReplaceWith(@"\d", m => string.Concat(" -", m.Value, "- "));
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsNullOrEmpty(System.String)">
            <summary>
            确认指定的字符串是 null 还是 System.String.Empty 字符串
            </summary>
            <param name="value">值</param>
            <returns>结果</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IfEmpty(System.String,System.String)">
            <summary>
            检查字符串是否为空，若为空则返回默认值
            </summary>
            <param name="value">值</param>
            <param name="defaultValue">默认值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ExceptionIfNullOrEmpty(System.String,System.String,System.String)">
            <summary>
            如果字符串为空，抛出异常<see cref="T:System.ArgumentException"/>
            </summary>
            <param name="value">值</param>
            <param name="message">如果值为空，则将该消息显示</param>
            <param name="name">传入参数名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsImageFile(System.String)">
            <summary>
            判断指定路径是否图片文件
            </summary>
            <param name="fileName">文件名</param>
            <returns>结果</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Contains(System.String,System.String,System.StringComparison)">
            <summary>
            确定输入字符串是否包含指定字符串
            </summary>
            <param name="inputValue">输入字符串</param>
            <param name="comparisonValue">包含字符串</param>
            <param name="comparisonType">区域</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ContainsEquivalenceTo(System.String,System.String)">
            <summary>
            确定输入字符串是否包含指定字符串，且字符串不为空
            </summary>
            <param name="inputValue">输入字符串</param>
            <param name="comparisonValue">指定字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.BothStringsAreEmpty(System.String,System.String)">
            <summary>
            两个字符串是否均为空
            </summary>
            <param name="inputValue">字符串1</param>
            <param name="comparisonValue">字符串2</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.StringContainsEquivalence(System.String,System.String)">
            <summary>
            确定输入字符串是否包含指定字符串，且两个字符串不为空
            </summary>
            <param name="inputValue">输入字符串</param>
            <param name="comparisonValue">指定字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ContainsAny(System.String,System.String[])">
            <summary>
            确定字符串是否包含所提供的值
            </summary>
            <param name="value">值</param>
            <param name="values">提供的值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ContainsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            确定字符串是否包含所提供的值
            </summary>
            <param name="value">值</param>
            <param name="comparisonType">区域性比较</param>
            <param name="values">提供的值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ContainsAll(System.String,System.String[])">
            <summary>
            确定字符串是否包含所有提供的值
            </summary>
            <param name="value">值</param>
            <param name="values">提供的值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ContainsAll(System.String,System.StringComparison,System.String[])">
            <summary>
            确定字符串是否包含所有提供的值
            </summary>
            <param name="value">值</param>
            <param name="comparisonType">区域性比较</param>
            <param name="values">提供的值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsNumeric(System.String)">
            <summary>
            是否单精度浮点数（Float）
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EquivalentTo(System.String,System.String,System.StringComparison)">
            <summary>
            确定两个指定的字符串具有相同的值，参数指定区域性、大小写及比较所选用的规则
            </summary>
            <param name="value">值</param>
            <param name="whateverCaseString">比较字符串</param>
            <param name="comparison">区域性</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EqualsAny(System.String,System.StringComparison,System.String[])">
            <summary>
            确定字符串是否与所提供的值相等
            </summary>
            <param name="value">值</param>
            <param name="comparisonType">区域性比较</param>
            <param name="values">提供的值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsLikeAny(System.String,System.String[])">
            <summary>
            任何模式通配符比较
            </summary>
            <param name="value">值</param>
            <param name="patterns">模式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsLike(System.String,System.String)">
            <summary>
            通配符比较
            </summary>
            <param name="value">值</param>
            <param name="pattern">模式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsItemInEnum``1(System.String)">
            <summary>
            检查数据是否在给定的枚举定义
            </summary>
            <typeparam name="TEnum">泛型枚举</typeparam>
            <param name="value">匹配的枚举</param>
            <returns>匿名方法条件</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.IsRangeLength(System.String,System.Int32,System.Int32)">
            <summary>
            判断字符串长度是否在指定范围内
            </summary>
            <param name="source">源字符串</param>
            <param name="minLength">最小长度</param>
            <param name="maxLength">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Remove(System.String,System.Char[])">
            <summary>
            从当前字符串中移除任何指定的字符
            </summary>
            <param name="value">值</param>
            <param name="removeChar">需要移除的字符</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Remove(System.String,System.String[])">
            <summary>
            从当前字符串中移除任何指定的字符串
            </summary>
            <param name="value">值</param>
            <param name="strings">需要移除的字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Remove(System.String,System.Int32,System.Boolean)">
            <summary>
            从当前字符串中移除指定索引的字符串
            </summary>
            <param name="value">值</param>
            <param name="index">索引</param>
            <param name="isLeft">是否左侧</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.RemoveAllSpecialCharacters(System.String)">
            <summary>
            移除当前字符串中的所有特殊字符
            </summary>
            <param name="value">输入字符串</param>
            <returns>调整后的字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.RemoveEnd(System.String,System.String)">
            <summary>
            去除字符串末尾指定的符号
            </summary>
            <param name="value">值</param>
            <param name="defaultChar">需要去除的符号，默认：,</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Remove(System.String,System.String,System.Text.RegularExpressions.RegexOptions)">
            <summary>
            指定清除标签的内容
            </summary>
            <param name="str">内容</param>
            <param name="tag">标签</param>
            <param name="options">选项</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.FormatWith(System.String,System.Object[])">
            <summary>
            将指定字符串中的格式项替换为指定数组中相应对象的字符串表示形式
            </summary>
            <param name="format">字符串格式，占位符以{n}表示</param>
            <param name="args">用于填充占位符的参数</param>
            <returns>格式化后的字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReverseString(System.String)">
            <summary>
            反转字符串
            </summary>
            <param name="value">要反转的字符串</param>
            <returns>反转后的字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Split(System.String,System.String,System.Boolean)">
            <summary>
            以指定字符串作为分隔符将指定字符串分隔成数组
            </summary>
            <param name="value">要分割的字符串</param>
            <param name="strSplit">字符串类型的分隔符</param>
            <param name="removeEmptyEntries">是否移除数据中元素为空字符串的项</param>
            <returns>分割后的数据</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetTextLength(System.String)">
            <summary>
            获取字符串长度，支持汉字，每个汉字长度为2个字节
            </summary>
            <param name="value">参数字符串</param>
            <returns>当前字符串的长度，每个汉字长度为2个字节</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.TrimToMaxLength(System.String,System.Int32)">
            <summary>
            切割字符串，指定最大长度
            </summary>
            <param name="value">值</param>
            <param name="maxLength">指定最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.TrimToMaxLength(System.String,System.Int32,System.String)">
            <summary>
            切割字符串，并指定最大长度和添加后缀
            </summary>
            <param name="value">值</param>
            <param name="maxLength">指定最大长度</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Truncate(System.String,System.Int32,System.Boolean)">
            <summary>
            截断字符串，是否添加圆点
            </summary>
            <param name="value">字符串</param>
            <param name="length">截断长度</param>
            <param name="userElipse">是否使用圆点</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.PadBoth(System.String,System.Int32,System.Char,System.Boolean)">
            <summary>
            指定字符串长度，如果字符串长度大于指定的字符串长度，则截断字符串，若字符串长度小于指定字符串长度，则填充字符到指定字符串长度
            </summary>
            <param name="value">值</param>
            <param name="width">指定字符串长度</param>
            <param name="padChar">填充字符</param>
            <param name="truncate">是否截断</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EnsureStartsWith(System.String,System.String)">
            <summary>
            确保字符串包含指定前缀
            </summary>
            <param name="value">值</param>
            <param name="prefix">前缀</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EnsureEndWith(System.String,System.String)">
            <summary>
            确保字符串包含指定后缀
            </summary>
            <param name="value">值</param>
            <param name="suffix">后缀</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <summary>
            重复指定字符串，根据指定重复次数
            </summary>
            <param name="value">值</param>
            <param name="repeatCount">重复次数</param>
            <returns>重复字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ExtractNumber(System.String)">
            <summary>
            提取指定字符串中所有数字
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ConcatWith(System.String,System.String[])">
            <summary>
            连接两个字符串
            </summary>
            <param name="value">目标字符串</param>
            <param name="values">源字符串</param>
            <returns>连接后的字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Join``1(System.String,System.String,``0[])">
            <summary>
            连接字符串数组的所有元素，根据指定分隔符
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <param name="separator">分隔符</param>
            <param name="obj">对象数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.JoinNotNullOrEmpty(System.String[],System.String)">
            <summary>
            将字符串数组连接为字符串，如果值不为null或System.String.Empty，则将字符串数组连接
            </summary>
            <param name="values">字符串数组</param>
            <param name="separator">分隔符</param>
            <returns>字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetBefore(System.String,System.String)">
            <summary>
            获取指定字符串参数之前的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetBetween(System.String,System.String,System.String)">
            <summary>
            获取指定字符串参数之间的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定左侧字符串参数</param>
            <param name="y">指定右侧字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetAfter(System.String,System.String)">
            <summary>
            获取指定字符串参数之后的字符串
            </summary>
            <param name="value">值</param>
            <param name="x">指定字符串参数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Left(System.String,System.Int32)">
            <summary>
            获取字符串指定长度左边的部分
            </summary>
            <param name="value">值</param>
            <param name="leftLength">指定字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.Right(System.String,System.Int32)">
            <summary>
            获取字符串指定长度右边的部分
            </summary>
            <param name="value">值</param>
            <param name="rightLength">指定字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.SubstringFrom(System.String,System.Int32)">
            <summary>
            获取字符串指定索引部分
            </summary>
            <param name="value">值</param>
            <param name="index">指定索引</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToUpperFirstLetter(System.String)">
            <summary>
            首字母大写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToLowerFirstLetter(System.String)">
            <summary>
            首字母小写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToFirstLetter(System.String,System.Boolean)">
            <summary>
            首字母大小写
            </summary>
            <param name="value">值</param>
            <param name="isUpper">是否大写</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToTitleCase(System.String)">
            <summary>
            将指定字符串转为词首字母大写
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToTitleCase(System.String,System.Globalization.CultureInfo)">
            <summary>
            将指定字符串转为词首字母大写
            </summary>
            <param name="value">值</param>
            <param name="culture">区域性信息</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToPlural(System.String)">
            <summary>
            将单词的单数形式转为复数形式
            </summary>
            <param name="singular">单数形式的单词</param>
            <returns>复数形式的单词</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Func{System.String,System.String})">
            <summary>
            替换字符串中指定的所有值
            </summary>
            <param name="value">值</param>
            <param name="oldValues">需要替换的值</param>
            <param name="replacePredicate">替换谓词</param>
            <example>
            <code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, v => "[" + v + "]");
                    // str == "[White] Red Blue Green Yellow [Black] [Gray]"
            </code>
            </example>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            替换字符串中指定的所有值
            </summary>
            <param name="value">值</param>
            <param name="oldValues">需要替换的值</param>
            <param name="newValue">新值</param>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    str = str.ReplaceAll(achromaticColors, "[AchromaticColor]");
                    // str == "[AchromaticColor] Red Blue Green Yellow [AchromaticColor] [AchromaticColor]"
            	</code>
            </example>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ReplaceAll(System.String,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            替换字符串中指定的所有值
            </summary>
            <param name="value">值</param>
            <param name="oldValues">需要替换的值</param>
            <param name="newValues">新的值</param>
            <example>
            	<code>
                    var str = "White Red Blue Green Yellow Black Gray";
                    var achromaticColors = new[] {"White", "Black", "Gray"};
                    var exquisiteColors = new[] {"FloralWhite", "Bistre", "DavyGrey"};
                    str = str.ReplaceAll(achromaticColors, exquisiteColors);
                    // str == "FloralWhite Red Blue Green Yellow Bistre DavyGrey"
            	</code>
            </example>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ParseCommandlineParams(System.String[])">
            <summary>
            解析命令行参数
            </summary>
            <param name="value">值</param>
            <returns>一个命令行参数字符串字典对象</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ParseStringToEnum``1(System.String,System.Boolean)">
            <summary>
            如果存在该枚举，解析字符串到字符串枚举项，否则返回默认枚举
            </summary>
            <typeparam name="TEnum">泛型枚举</typeparam>
            <param name="value">需转换为枚举的字符串</param>
            <param name="ignorecase">是否区分大小写</param>
            <returns>枚举项</returns>
            <example>
            	<code>
            		public enum EnumTwo {  None, One,}
            		object[] items = new object[] { "One".ParseStringToEnum《EnumTwo》(), "Two".ParseStringToEnum《EnumTwo》() };
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EncodeEmailAddress(System.String)">
            <summary>
            将电子邮件地址进行编码，以便于链接仍然有效
            </summary>
            <param name="emailAddress">邮箱地址</param>
            <returns>编码后的邮箱地址</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.RepairZero(System.String,System.Int32)">
            <summary>
            补足位数，指定字符串的固定长度，如果字符串小于固定长度，则在字符串的前面补足零，可设置的固定长度最大为9位
            </summary>
            <param name="text">原始字符串</param>
            <param name="limitedLength">字符串的固定长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            将字符串转为byte[]数组，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="value">字符串</param>
            <param name="encoding">编码格式</param>
            <returns>byte[]数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToXDocument(System.String)">
            <summary>
            字符串转为XDocument（Linq to Xml Dom）
            </summary>
            <param name="xml">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToXElement(System.String)">
            <summary>
            字符串转为XElement对象（Linq to Xml XElement）
            </summary>
            <param name="xml">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToXmlDocument(System.String)">
            <summary>
            字符串转为XmlDocument对象（Xml Dom）
            </summary>
            <param name="xml">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToXPath(System.String)">
            <summary>
            字符串转为XmlPathDom对象（Xml XPath Dom）
            </summary>
            <param name="xml">xml字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.HexStringToBytes(System.String)">
            <summary>
            16进制字符串转换为字节数组
            </summary>
            <param name="value">16进制字符串</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToUnicodeString(System.String)">
            <summary>
            转换成Unicode字符串
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToSecureString(System.String,System.Boolean)">
            <summary>
            将字符串转为安全字符串
            </summary>
            <param name="value">普通字符串</param>
            <param name="markReadOnly">是否只读</param>
            <returns>安全字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToUnSecureString(System.Security.SecureString)">
            <summary>
            将安全字符串转为普通字符串
            </summary>
            <param name="value">安全字符串</param>
            <returns>普通字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ConvertBinary(System.String,JCE.Utils.Extensions.BinaryMode,JCE.Utils.Extensions.BinaryMode)">
            <summary>
            进制转换
            </summary>
            <param name="value">要转换的值，即原值</param>
            <param name="from">原值的进制</param>
            <param name="to">要转换到的目标进制</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.GetBinary(JCE.Utils.Extensions.BinaryMode)">
            <summary>
            获取进制
            </summary>
            <param name="mode">进制</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToSbcCase(System.String)">
            <summary>
            将字符串转换成全角字符串(SBC Case)
            </summary>
            <param name="input">任意字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToDbcCase(System.String)">
            <summary>
            将字符串转换成半角字符串(DBC Case)
            </summary>
            <param name="input">任意字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToDateTime(System.String)">
            <summary>
            将时间戳转换成时间
            </summary>
            <param name="timeStamp">时间戳格式字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToJsEscapeString(System.String)">
            <summary>
            js字符串转义，Javascripte中JsEscape编码服务端实现
            </summary>
            <param name="source">js字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.UrlEncode(System.String,System.Text.Encoding)">
            <summary>
            Url编码
            </summary>
            <param name="source">url编码字符串</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            Url解码
            </summary>
            <param name="source">url编码字符串</param>
            <param name="encoding">编码格式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToHtmlSafe(System.String)">
            <summary>
            Html字符串进行安全编码
            </summary>
            <param name="value">当前Html字符串实例</param>
            <returns>安全的Html字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToHtmlSafe(System.String,System.Boolean)">
            <summary>
            Html字符串进行安全编码
            </summary>
            <param name="value">当前Html字符串实例</param>
            <param name="all">是否所有字符进行安全编码，或只是部分需要</param>
            <returns>安全的Html字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.ToHtmlSafe(System.String,System.Boolean,System.Boolean)">
            <summary>
            Html字符串进行安全编码
            </summary>
            <param name="value">当前Html字符串实例</param>
            <param name="all">是否所有字符进行安全编码，或只是部分需要</param>
            <param name="replace">是否对空格以及换行符进行编码</param>
            <returns>安全的Html字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EncodeBase64(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行Base64字符串编码，默认编码为<see cref="P:System.Text.Encoding.UTF8"/>
            </summary>
            <param name="value">字符串</param>
            <param name="encoding">编码格式</param>
            <returns>Base64编码字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.DecodeBase64(System.String,System.Text.Encoding)">
            <summary>
            对字符串进行Base64字符串解码
            </summary>
            <param name="value">字符串</param>
            <param name="encoding">编码格式</param>
            <returns>解码字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EncryptToBytes(System.String,System.String)">
            <summary>
            将字符串加密成字节数组
            </summary>
            <param name="value">值，需要加密的字符串</param>
            <param name="pwd">密匙，使用密匙来加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.CryptBytes(System.String,System.Byte[],System.Boolean)">
            <summary>
            加密或解密字节数组，使用Rfc2898DeriveBytes与TripleDESCryptoServiceProvider的加密提供程序生成的密匙和初始化向量
            </summary>
            <param name="pwd">需要加密或解密的密码字符串</param>
            <param name="bytes">用来加密的字节数组</param>
            <param name="encrypt">true：加密，false：解密</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.MakeKeyAndIv(System.String,System.Byte[],System.Int32,System.Int32,System.Byte[]@,System.Byte[]@)">
            <summary>
            使用密码生成密匙和一个初始化向量（Rfc2898DeriveBytes）
            </summary>
            <param name="pwd">用于生成字节的输入密码</param>
            <param name="salt">用于生成字节的salt值</param>
            <param name="keySizeBits">生成密匙的大小</param>
            <param name="blockSizeBits">加密提供程序所使用的输入块的大小</param>
            <param name="key">生成输出密匙字节</param>
            <param name="iv">生成输出初始化向量</param>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.DecryptFromBytes(System.Byte[],System.String)">
            <summary>
            将字节数组解密成字符串，前提该字节数组已加密
            </summary>
            <param name="value">值，要解密的字节数组</param>
            <param name="pwd">密匙，使用密匙来解密字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.EncryptToString(System.String,System.String)">
            <summary>
            字符串加密
            </summary>
            <param name="value">值，需要加密的字符串</param>
            <param name="pwd">密匙，使用密匙来加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringExtensions.DecryptFromString(System.String,System.String)">
            <summary>
            字符串解密，前提字符串已加密
            </summary>
            <param name="value">值，要解密的字符串</param>
            <param name="pwd">密匙，使用密匙来解密字符串</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.IntExtensions">
            <summary>
            int类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Times(System.Int32,System.Action)">
            <summary>
            执行n次指定操作，基于底层int值
            </summary>
            <param name="value">int</param>
            <param name="action">操作</param>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            执行n次指定操作，基于底层int值
            </summary>
            <param name="value">int</param>
            <param name="action">操作</param>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.IsEven(System.Int32)">
            <summary>
            是否偶数
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.IsOdd(System.Int32)">
            <summary>
            是否奇数
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.InRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            判断当前值是否在指定范围内
            </summary>
            <param name="value">int</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.InRange(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">long</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>int</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.IsPrime(System.Int32)">
            <summary>
            是否质数（素数），一个质数（或素数）是具有两个不同约束的自然数：1和它本身
            </summary>
            <param name="value">int</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.ToOrdinal(System.Int32)">
            <summary>
            将数值转换为顺序序号，（英语序号）
            </summary>
            <param name="i">int</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.ToOrdinal(System.Int32,System.String)">
            <summary>
            将数值转换为指定格式的序号字符串，（英语序号）
            </summary>
            <param name="i">int</param>
            <param name="format">自定义格式</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.AsLong(System.Int32)">
            <summary>
            Int转为Long类型
            </summary>
            <param name="i">int</param>
            <returns>long</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.IsIndexInArray(System.Int32,System.Array)">
            <summary>
            判断索引是否在数组指定范围内
            </summary>
            <param name="index">索引</param>
            <param name="array">数组</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.GetArrayIndex(System.Int32)">
            <summary>
            获取真实数组索引
            </summary>
            <param name="at">int</param>
            <returns>数组索引</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Days(System.Int32)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">int</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Hours(System.Int32)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">int</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Minutes(System.Int32)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">int</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Seconds(System.Int32)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">int</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Milliseconds(System.Int32)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">int</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.IntExtensions.Ticks(System.Int32)">
            <summary>
            获取刻度间隔，根据数值获取时间间隔
            </summary>
            <param name="ticks">int</param>
            <returns>刻度间隔</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.LongExtensions">
            <summary>
            long类型的扩展辅助操作类
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Times(System.Int64,System.Action)">
            <summary>
            执行n次指定操作，基于底层long值
            </summary>
            <param name="value">long</param>
            <param name="action">操作-委托</param>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            执行n次指定操作，基于底层long值
            </summary>
            <param name="value">long</param>
            <param name="action">操作-委托</param>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.IsEven(System.Int64)">
            <summary>
            是否偶数
            </summary>
            <param name="value">long</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.IsOdd(System.Int64)">
            <summary>
            是否奇数
            </summary>
            <param name="value">long</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.InRange(System.Int64,System.Int64,System.Int64)">
            <summary>
            判断值是否在指定范围内
            </summary>
            <param name="value">long</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.InRange(System.Int64,System.Int64,System.Int64,System.Int64)">
            <summary>
            判断值是否在指定范围内，否则返回默认值
            </summary>
            <param name="value">long</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="defaultValue">默认值</param>
            <returns>long</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.IsPrime(System.Int64)">
            <summary>
            是否质数（素数），一个质数（或素数）是具有两个不同约束的自然数：1和它本身
            </summary>
            <param name="value">long</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.ToOrdinal(System.Int64)">
            <summary>
            将数值转换为顺序序号，（英语序号）
            </summary>
            <param name="i">long</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.ToOrdinal(System.Int64,System.String)">
            <summary>
            将数值转换为指定格式的序号字符串，（英语序号）
            </summary>
            <param name="i">long</param>
            <param name="format">自定义格式</param>
            <returns>返回的字符串包含序号标记毗邻的数字表示</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Days(System.Int64)">
            <summary>
            获取日期间隔，根据数值获取时间间隔
            </summary>
            <param name="days">long</param>
            <returns>日期间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Hours(System.Int64)">
            <summary>
            获取小时间隔，根据数值获取时间间隔
            </summary>
            <param name="hours">long</param>
            <returns>小时间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Minutes(System.Int64)">
            <summary>
            获取分钟间隔，根据数值获取时间间隔
            </summary>
            <param name="minutes">long</param>
            <returns>分钟间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Seconds(System.Int64)">
            <summary>
            获取秒间隔，根据数值获取时间间隔
            </summary>
            <param name="seconds">long</param>
            <returns>秒间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Milliseconds(System.Int64)">
            <summary>
            获取毫秒间隔，根据数值获取时间间隔
            </summary>
            <param name="milliseconds">long</param>
            <returns>毫秒间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.Ticks(System.Int64)">
            <summary>
            获取刻度间隔，根据数值获取时间间隔
            </summary>
            <param name="ticks">long</param>
            <returns>刻度间隔</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.LongExtensions.ToDateTime(System.Int64)">
            <summary>
            将给定 Unix 时间戳 转换为 DateTime 时间。
            </summary>
            <param name="unixTimeStamp">Unix 时间戳。</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.FileInfoExtensions">
            <summary>
            文件信息（FileInfo）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.Rename(System.IO.FileInfo,System.String)">
            <summary>
            文件重命名
            </summary>
            <param name="file">文件</param>
            <param name="newName">新名</param>
            <returns>重命名文件</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.Rename("test2.txt");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.RenameFileWithoutExtension(System.IO.FileInfo,System.String)">
            <summary>
            文件重命名，并不改变扩展名
            </summary>
            <param name="file">文件</param>
            <param name="newName">新名</param>
            <returns>重命名文件</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.RenameFileWithoutExtension("test3");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.ChangeExtension(System.IO.FileInfo,System.String)">
            <summary>
            更改文件扩展名
            </summary>
            <param name="file">文件</param>
            <param name="newExtension">新扩展名</param>
            <returns>重命名文件</returns>
            <example>
            	<code>
            		var file = new FileInfo(@"c:\test.txt");
            		file.ChangeExtension("xml");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.ChangeExtensions(System.IO.FileInfo[],System.String)">
            <summary>
            批量更改文件扩展名
            </summary>
            <param name="files">批量文件</param>
            <param name="newExtension">新扩展名</param>
            <returns>重命名文件</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.ChangeExtensions("tmp");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.Delete(System.IO.FileInfo[],System.Boolean)">
            <summary>
            批量删除文件，忽略中断错误
            </summary>
            <param name="files">批量文件</param>
            <param name="consolidateExceptions">是否合并异常，失败不中断</param>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.Delete()
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.CopyTo(System.IO.FileInfo[],System.String,System.Boolean)">
            <summary>
            批量复制文件到新的文件夹，忽略中断错误
            </summary>
            <param name="files">批量文件</param>
            <param name="targetPath">目标路径</param>
            <param name="consolidateExceptions">是否合并异常，失败不中断</param>
            <returns>新创建的文件副本</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		var copiedFiles = files.CopyTo(@"c:\temp\");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.MoveTo(System.IO.FileInfo[],System.String,System.Boolean)">
            <summary>
            批量剪切文件到新的文件夹，忽略中断错误
            </summary>
            <param name="files">批量文件</param>
            <param name="targetPath">目标路径</param>
            <param name="consolidateExceptions">是否合并异常，失败不中断</param>
            <returns>剪切后的文件</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.MoveTo(@"c:\temp\");
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.SetAttributes(System.IO.FileInfo[],System.IO.FileAttributes)">
            <summary>
            批量设置文件属性
            </summary>
            <param name="files">文件</param>
            <param name="attributes">文件属性</param>
            <returns>更改后的文件</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.SetAttributes(FileAttributes.Archive);
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.FileInfoExtensions.SetAttributesAdditive(System.IO.FileInfo[],System.IO.FileAttributes)">
            <summary>
            批量添加文件属性（任何现有属性）
            </summary>
            <param name="files">文件</param>
            <param name="attributes">文件属性</param>
            <returns>更改后的文件</returns>
            <example>
            	<code>
            		var files = directory.GetFiles("*.txt", "*.xml");
            		files.SetAttributesAdditive(FileAttributes.Archive);
            	</code>
            </example>
        </member>
        <member name="T:JCE.Utils.Extensions.JsonExtensions">
            <summary>
            Json字符串扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.JsonNetDeserializeToObj(System.String)">
            <summary>
            Json字符串转为对象，Json.Net
            </summary>
            <param name="json">Json字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.JsonNetSerializeToJson(System.Object)">
            <summary>
            将对象序列化为JSON字符串，不支持存在循环引用的对象，Json.Net
            </summary>
            <param name="value">对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.JsonNetDeserializeToObj``1(System.String)">
            <summary>
            Json字符串转为对象，Json.Net
            </summary>
            <typeparam name="T">要转换的目标类型</typeparam>
            <param name="json">Json字符串</param>
            <returns>对象</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.JsonNetSerializeToJson``1(``0)">
            <summary>
            将对象序列化为JSON字符串，不支持存在循环引用的对象，Json.Net
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="value">对象</param>
            <returns>Json字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.ToObject(System.String)">
            <summary>
            将Json字符串转换为动态对象
            </summary>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.ToObject``1(System.String)">
            <summary>
            将Json字符串转换为对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="json">Json字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.ToJson(System.Object,System.Boolean)">
            <summary>
            将对象转换为Json字符串
            </summary>
            <param name="target">目标对象</param>
            <param name="isConvertSingleQuotes">是否将双引号转成单引号</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.JsonExtensions.ToJsonWithoutBrackets(System.Object,System.Boolean)">
            <summary>
            将对象转换为Json字符串，并且去除两侧括号
            </summary>
            <param name="target">目标对象</param>
            <param name="isConvertSingleQuotes">是否将双引号转成单引号</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.LinqToXmlExtensions">
            <summary>
            Xml 扩展操作类
            </summary>
        </member>
        <member name="T:JCE.Utils.Extensions.MemoryCacheExtensions">
            <summary>
            内存缓存（MemoryCache）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.MemoryCacheExtensions.Get``1(System.Runtime.Caching.MemoryCache,System.String,System.String)">
            <summary>
            获取指定键值的强类型数据
            </summary>
            <typeparam name="T">强类型</typeparam>
            <param name="cache">内存缓存</param>
            <param name="key">缓存键值</param>
            <param name="regionName">区域名称，默认不支持</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.NameValueCollectionExtensions">
            <summary>
            键值对集合（NameValueCollection）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.NameValueCollectionExtensions.ToDictionary(System.Collections.Specialized.NameValueCollection)">
            <summary>
            将键值对集合转换成字典
            </summary>
            <param name="source">键值对集合</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.NameValueCollectionExtensions.ToQueryString(System.Collections.Specialized.NameValueCollection,System.Func{System.Collections.Specialized.NameValueCollection,System.String,System.String})">
            <summary>
            将键值对集合转换成查询字符串
            </summary>
            <param name="source">键值对集合</param>
            <param name="valueFunc">值操作</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.PrincipalExtensions">
            <summary>
            安全帐户（Principal）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.PrincipalExtensions.GetProperty(System.DirectoryServices.AccountManagement.Principal,System.String)">
            <summary>
            获取属性值，从帐户安全的联系人数据中获取
            </summary>
            <param name="principal">帐户安全</param>
            <param name="name">属性名</param>
            <returns>属性值</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.RandomExtensions">
            <summary>
            随机数（Random）类型扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.NextBoolean(System.Random)">
            <summary>
            返回随机布尔值
            </summary>
            <param name="random">Random</param>
            <returns>随机布尔值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.NextEnum``1(System.Random)">
            <summary>
            返回指定枚举类型的随机枚举值
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <param name="random">返回随机布尔值</param>
            <returns>指定枚举类型的随机枚举值</returns>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.NextBytes(System.Random,System.Int32)">
            <summary>
            返回随机数填充的指定长度的byte[]数组
            </summary>
            <param name="random">Random</param>
            <param name="length">数组长度</param>
            <returns>随机数填充的指定长度的byte[]数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.NextItem``1(System.Random,``0[])">
            <summary>
            返回数组中的随机元素
            </summary>
            <typeparam name="T">元素类型</typeparam>
            <param name="random">Random</param>
            <param name="items">元素数组</param>
            <returns>元素数组中的某个随机项</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.NextDateTime(System.Random)">
            <summary>
            返回随机时间值
            </summary>
            <param name="random">Random</param>
            <returns>随机时间值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.NextDateTime(System.Random,System.DateTime,System.DateTime)">
            <summary>
            返回指定时间段内的随机时间值
            </summary>
            <param name="random">Random</param>
            <param name="minValue">时间范围的最小值</param>
            <param name="maxValue">时间范围的最大值</param>
            <returns>指定时间段内的随机时间值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.GetRandomNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机数字字符串
            </summary>
            <param name="random">Random</param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机数字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.GetRandomLetterString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母字符串
            </summary>
            <param name="random">Random</param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母组成字符串</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.RandomExtensions.GetRandomLetterAndNumberString(System.Random,System.Int32)">
            <summary>
            获取指定的长度的随机字母和数字字符串
            </summary>
            <param name="random">Random</param>
            <param name="length">要获取随机数长度</param>
            <returns>指定长度的随机字母和数字组成字符串</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ReaderWriterLockSlimExtensions">
            <summary>
            ReaderWriterLockSlim(读写锁)扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ReaderWriterLockSlimExtensions.ReadOnly(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            只读操作
            </summary>
            <param name="readerWriterLockSlim">读写锁</param>
            <param name="action">操作</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ReaderWriterLockSlimExtensions.ReadOnly``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            只读操作
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="readerWriterLockSlim">读写锁</param>
            <param name="function">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ReaderWriterLockSlimExtensions.WriteOnly(System.Threading.ReaderWriterLockSlim,System.Action)">
            <summary>
            只写操作
            </summary>
            <param name="readerWriterLockSlim">读写锁</param>
            <param name="action">操作</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ReaderWriterLockSlimExtensions.WriteOnly``1(System.Threading.ReaderWriterLockSlim,System.Func{``0})">
            <summary>
            只写操作
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="readerWriterLockSlim">读写锁</param>
            <param name="function">Lambda表达式</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.SocketExtensions">
            <summary>
            套接字接口（Socket）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.SocketExtensions.IsConnected(System.Net.Sockets.Socket)">
            <summary>
            是否已连接
            </summary>
            <param name="socket">套接字</param>
            <returns>bool</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.StreamExtensions">
            <summary>
            字节流（Stream）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.GetReader(System.IO.Stream)">
            <summary>
            获取流读取器，使用默认编码
            </summary>
            <param name="stream">流</param>
            <returns>流读取器</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.GetReader(System.IO.Stream,System.Text.Encoding)">
            <summary>
            获取流读取器，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码</param>
            <returns>流读取器</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.GetWriter(System.IO.Stream)">
            <summary>
            获取流写入器，使用默认编码
            </summary>
            <param name="stream">流</param>
            <returns>流写入器</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.GetWriter(System.IO.Stream,System.Text.Encoding)">
            <summary>
            获取流写入器，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码</param>
            <returns>流写入器</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <summary>
            从流中读取所有文本，使用默认编码
            </summary>
            <param name="stream">流</param>
            <returns>文本</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream,System.Text.Encoding)">
            <summary>
            从流中读取所有文本，使用指定编码
            </summary>
            <param name="stream">流</param>
            <param name="encoding">编码</param>
            <returns>文本</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.SeekToBegin(System.IO.Stream)">
            <summary>
            设置流指针指向流的开始位置
            </summary>
            <param name="stream">流</param>
            <returns>流</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.SeekToEnd(System.IO.Stream)">
            <summary>
            设置流指针指向流的结束位置
            </summary>
            <param name="stream">流</param>
            <returns>流</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.CopyToMemory(System.IO.Stream)">
            <summary>
            将流复制到内存流中
            </summary>
            <param name="stream">流</param>
            <returns>内存流</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.ReadAllBytes(System.IO.Stream)">
            <summary>
            将流写入字节数组
            </summary>
            <param name="stream">流</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.ReadFixedBuffersize(System.IO.Stream,System.Int32)">
            <summary>
            将指定缓冲大小的流写入字节数组
            </summary>
            <param name="stream">流</param>
            <param name="bufsize">指定缓存大小</param>
            <returns>字节数组</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.Write(System.IO.Stream,System.Byte[])">
            <summary>
            将字节数组写入流
            </summary>
            <param name="stream">流</param>
            <param name="bytes">字节数组</param>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.ToDeserializeBinary(System.IO.Stream)">
            <summary>
            将二进制流反序列化成对象
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StreamExtensions.ToDeserializeBinary``1(System.IO.Stream)">
            <summary>
            将二进制流反序列化成泛型对象
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.StringBuilderExtensions">
            <summary>
            StringBuilder扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder开头空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char)">
            <summary>
            去除StringBuilder开头指定字符
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="c">要去除的字符</param>
            <returns>返回修改后的StringBuilder</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除StringBuilder开头指定字符数组
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="chars">要去除的字符数组</param>
            <returns>返回修改后的StringBuilder</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimStart(System.Text.StringBuilder,System.String)">
            <summary>
            去除StringBuilder开头指定字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="str">要去除的字符串</param>
            <returns>返回修改后的StringBuilder</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder结尾的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char)">
            <summary>
            去除StringBuilder结尾指定字符
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="c">要去除的字符</param>
            <returns>返回修改后的StringBuilder</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.Char[])">
            <summary>
            去除StringBuilder结尾指定字符数组
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="chars">要去除的字符数组</param>
            <returns>返回修改后的StringBuilder</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.TrimEnd(System.Text.StringBuilder,System.String)">
            <summary>
            去除StringBuilder结尾指定字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="str">要去除的字符串</param>
            <returns>返回修改后的StringBuilder</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.Trim(System.Text.StringBuilder)">
            <summary>
            去除StringBuilder两端的空格
            </summary>
            <param name="sb">StringBuilder</param>
            <returns>返回修改后的StringBuilder，主要用于链式操作</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.SubString(System.Text.StringBuilder,System.Int32,System.Int32)">
            <summary>
            返回StringBuilder从起始位置指定长度的字符串
            </summary>
            <param name="sb">StringBuilder</param>
            <param name="start">起始位置</param>
            <param name="length">长度</param>
            <returns>字符串</returns>
            <exception cref="T:System.IndexOutOfRangeException">超出字符串索引长度异常</exception>
        </member>
        <member name="M:JCE.Utils.Extensions.StringBuilderExtensions.AppendLine(System.Text.StringBuilder,System.String,System.Object[])">
            <summary>
            添加内容并换行
            </summary>
            <param name="builder">StringBuilder</param>
            <param name="value">格式化字符串</param>
            <param name="parameters">参数</param>
        </member>
        <member name="T:JCE.Utils.Extensions.TaskExtensions">
            <summary>
            Task(异步)扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.TaskExtensions.WaitResult``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            获取Task结果，等待完成执行过程时间
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="task">异步操作</param>
            <param name="timeoutMillis">超时时间</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TaskExtensions.TimeoutAfter(System.Threading.Tasks.Task,System.Int32)">
            <summary>
            设置Task过期时间
            </summary>
            <param name="task">异步操作</param>
            <param name="millisecondsDelay">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TaskExtensions.TimeoutAfter``1(System.Threading.Tasks.Task{``0},System.Int32)">
            <summary>
            设置Task过期时间
            </summary>
            <typeparam name="TResult">结果类型</typeparam>
            <param name="task">异步操作</param>
            <param name="millisecondsDelay">过期时间</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TaskExtensions.StartDelayedTask(System.Threading.Tasks.TaskFactory,System.Int32,System.Action)">
            <summary>
            启动异步操作
            </summary>
            <param name="factory">异步操作工厂</param>
            <param name="millisecondsDelay">过期时间</param>
            <param name="action">操作</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.TextReaderExtensions">
            <summary>
            文本读取器（TextReader）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.TextReaderExtensions.IterateLine(System.IO.TextReader)">
            <summary>
            通用文本迭代器
            </summary>
            <param name="reader">文本读取器</param>
            <returns></returns>
            <example>
            	<code>
            		using(var reader = fileInfo.OpenText()) {
            		foreach(var line in reader.IterateLines()) {
            		// ...
            		}
            		}
            	</code>
            </example>
        </member>
        <member name="M:JCE.Utils.Extensions.TextReaderExtensions.IterateLines(System.IO.TextReader,System.Action{System.String})">
            <summary>
            执行通用文本迭代器，（传递委托/Lambda表达式）
            </summary>
            <param name="reader">文本读取器</param>
            <param name="action">委托/Lambda表达式</param>
            <example>
            	<code>
            		using(var reader = fileInfo.OpenText()) {
            		reader.IterateLines(l => Console.WriteLine(l));
            		}
            	</code>
            </example>
        </member>
        <member name="T:JCE.Utils.Extensions.ThreadExtensions">
            <summary>
            线程（Thread）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ThreadExtensions.CancelSleep(System.Threading.Thread)">
            <summary>
            取消线程睡眠状态，继续线程
            </summary>
            <param name="thread">线程</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ThreadExtensions.StartAndIgnoreAbort(System.Threading.Thread,System.Action{System.Exception})">
            <summary>
            启动线程，自动忽略停止线程时触发的ThreadAbortException异常
            </summary>
            <param name="thread">线程</param>
            <param name="failAction">引发非ThreadAbortException异常时执行的逻辑</param>
        </member>
        <member name="T:JCE.Utils.Extensions.TryCatchExtensions">
            <summary>
            Try-Catch扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能与后续功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TryCatchExtensions.TryCatch``1(``0,System.Action{``0},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="source">值</param>
            <param name="action">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>主功能代码是否顺利执行</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception},System.Action{``0})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <param name="successAction">主功能代码成功后执行的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.TryCatchExtensions.TryCatch``2(``0,System.Func{``0,``1},System.Action{System.Exception})">
            <summary>
            对某对象执行指定功能，并处理异常情况与返回值
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <typeparam name="TResult">返回值类型</typeparam>
            <param name="source">值</param>
            <param name="func">要对值执行的主功能代码</param>
            <param name="failureAction">catch中的功能代码</param>
            <returns>功能代码的返回值，如果出现异常，则返回对象类型的默认值</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ValueTypeExtensions">
            <summary>
            泛型值类型扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ValueTypeExtensions.IsEmpty``1(``0)">
            <summary>
            确定指定值是否为空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ValueTypeExtensions.IsNotEmpty``1(``0)">
            <summary>
            确定指定值是否不为空
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.ValueTypeExtensions.ToNullable``1(``0)">
            <summary>
             将指定值转换为相应的可空类型
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="value">值</param>
            <returns>可空类型</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.XmlExtensions">
            <summary>
            Xml扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlExtensions.ToXElement(System.Xml.XmlNode)">
            <summary>
            将XmlNodex转换为XElement
            </summary>
            <param name="node">XmlNode</param>
            <returns>XElment对象 </returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlExtensions.ToXmlNode(System.Xml.Linq.XElement)">
            <summary>
            将XElement转换为XmlNode
            </summary>
            <param name="element">XElement</param>
            <returns>XmlNode对象</returns>
        </member>
        <member name="T:JCE.Utils.Extensions.XmlNodeExtensions">
            <summary>
            Xml节点（XmlNode）/Xml文档（XmlDocument）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlNodeExtensions.CreateChildNode(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            创建Xml子节点，并追加到父节点
            </summary>
            <param name="parentNode">父节点</param>
            <param name="name">子节点的名称</param>
            <param name="namespaceUri">节点的命名空间</param>
            <returns>新创建的Xml节点</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlNodeExtensions.CreateCDataSection(System.Xml.XmlNode,System.String)">
            <summary>
            创建CData节，并追加到父节点
            </summary>
            <param name="parentNode">父节点</param>
            <param name="data">CData节</param>
            <returns>新创建的CData节</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlNodeExtensions.GetCDataSection(System.Xml.XmlNode)">
            <summary>
            返回CData节的内容
            </summary>
            <param name="parentNode">父节点</param>
            <returns>CData节内容</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlNodeExtensions.GetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            获取Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="attributeName">属性名</param>
            <param name="defaultValue">默认值，如果没有匹配属性存在</param>
            <returns>属性值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlNodeExtensions.GetAttribute``1(System.Xml.XmlNode,System.String,``0)">
            <summary>
            获取Xml节点属性值，并将属性值转换为指定数据类型的属性值
            </summary>
            <typeparam name="T">泛型</typeparam>
            <param name="node">节点</param>
            <param name="attributeName">属性名</param>
            <param name="defaultValue">默认值，如果没有匹配属性存在</param>
            <returns>属性值</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.Object)">
            <summary>
            设置Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlNodeExtensions.SetAttribute(System.Xml.XmlNode,System.String,System.String)">
            <summary>
            设置Xml节点属性值
            </summary>
            <param name="node">节点</param>
            <param name="name">属性名</param>
            <param name="value">属性值</param>
        </member>
        <member name="T:JCE.Utils.Extensions.XmlSerializerExtensions">
            <summary>
            XML序列化（XML）扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlSerializerExtensions.CanXmlSerialize``1(``0)">
            <summary>
            检查能否Xml序列化实例
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="instance">实例</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlSerializerExtensions.CanXmlDeserialize``1(System.String)">
            <summary>
            检查能否Xml反序列化文件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="fileName">文件名</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlSerializerExtensions.CanXmlDeserialize``1(System.IO.Stream)">
            <summary>
            检查能否Xml反序列化文件
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="stream">字节流</param>
            <returns>bool</returns>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlSerializerExtensions.XmlSerialize``1(``0,System.IO.Stream)">
            <summary>
            Xml序列化实例到流中
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="instance">实例</param>
            <param name="stream">字节流</param>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlSerializerExtensions.XmlSerizlize``1(``0,System.String)">
            <summary>
            Xml序列化实例到文件中
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="instance">实例</param>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.XmlSerializerExtensions.XmlDeserialize``1(System.IO.Stream)">
            <summary>
            Xml反序列化当前流对象到实例流中
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="stream">字节流</param>
            <returns>对象</returns>
        </member>
        <member name="T:JCE.Utils.Files.FileUtil">
            <summary>
            文件工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.GetContentType(System.String)">
            <summary>
            根据扩展名获取文件内容类型
            </summary>
            <param name="extension">扩展名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.Read(System.String)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.Read(System.String,System.Text.Encoding)">
            <summary>
            读取文件到字符串
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ReadToBytes(System.String)">
            <summary>
            将文件读取到字节流中
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.Write(System.String,System.String)">
            <summary>
            将字符串写入文件，文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="content">数据</param>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.Write(System.String,System.Byte[])">
            <summary>
            将字符串写入文件，文件不存在则创建
            </summary>
            <param name="filePath">文件的绝对路径</param>
            <param name="bytes">数据</param>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.Delete(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            删除文件
            </summary>
            <param name="filePaths">文件集合的绝对路径</param>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.Delete(System.String)">
            <summary>
            删除文件
            </summary>
            <param name="filePath">文件的绝对路径</param>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.KillFile(System.String,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            强力粉碎文件，如果文件被打开，很难粉碎
            </summary>
            <param name="fileName">文件全路径</param>
            <param name="deleteCount">删除次数</param>
            <param name="randomData">随机数据填充文件，默认true</param>
            <param name="blanks">空白填充文件，默认false</param>
            <returns>true:粉碎成功,false:粉碎失败</returns>        
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.GetAllFiles(System.String)">
            <summary>
            获取目录中全部文件列表，包括子目录
            </summary>
            <param name="directoryPath">目录绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.GetEncoding(System.String)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.GetEncoding(System.String,System.Text.Encoding)">
            <summary>
            获取文件编码
            </summary>
            <param name="filePath">文件绝对路径</param>
            <param name="defaultEncoding">默认编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToString(System.IO.Stream)">
            <summary>
            流转换成字符串
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToString(System.IO.Stream,System.Text.Encoding)">
            <summary>
            流转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToString(System.Byte[])">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据,默认字符编码utf-8</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToString(System.Byte[],System.Text.Encoding)">
            <summary>
            字节数组转换成字符串
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToStream(System.String)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToStream(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成流
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToBytes(System.String)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToBytes(System.String,System.Text.Encoding)">
            <summary>
            字符串转换成字节数组
            </summary>
            <param name="data">数据</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToBytes(System.IO.Stream)">
            <summary>
            流转换成字节流
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.FileUtil.ToInt(System.Byte[])">
            <summary>
            字节数组转换成整数
            </summary>
            <param name="data">数据</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Files.IniFile">
            <summary>
            INI文件读写类
            </summary>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Files.IniFile"/>类型的实例
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.WritePrivateProfileString(System.String,System.String,System.String,System.String)">
            <summary>
            将信息写入INI文件
            </summary>
            <param name="section">要写入的区域名。</param>
            <param name="key">key的名称。若传入null值，将移除指定的section。</param>
            <param name="val">设置key所对应的值。若传入null值，将移除指定的key。</param>
            <param name="filePath">INI文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.GetPrivateProfileString(System.String,System.String,System.String,System.Text.StringBuilder,System.Int32,System.String)">
            <summary>
            将信息从INI文件中读入程序中的变量
            </summary>
            <param name="section">section名</param>
            <param name="key">键名</param>
            <param name="defVal">默认值，如果INI文件没有前两个参数指定的字段名或键名，则将此值赋给变量</param>
            <param name="retVal">接收INI文件中的值，即目的缓存器</param>
            <param name="size">目的缓存器大小</param>
            <param name="filePath">INI文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.GetPrivateProfileString(System.String,System.String,System.String,System.Byte[],System.Int32,System.String)">
            <summary>
            将信息从INI文件中读入程序中的变量
            </summary>
            <param name="section">要读区的区域名。若传入null值，第4个参数returnBuffer将会获得所有的section name。</param>
            <param name="key">key的名称。若传入null值，第4个参数returnBuffer将会获得所有的指定sectionName下的所有key name。</param>
            <param name="defVal">默认值，key没找到时的返回值。</param>
            <param name="retVal">接收INI文件中的值，即目的缓存器</param>
            <param name="size">目的缓存器大小</param>
            <param name="filePath">INI文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.GetValue(System.String,System.String)">
            <summary>
            获取指定key的值
            </summary>
            <param name="sectionName">section名</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.GetSectionNames">
            <summary>
            获取Ini文件所有的section名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.GetKeys(System.String)">
            <summary>
            获取指定section下的所有key名称
            </summary>
            <param name="sectionName">section名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.SetValue(System.String,System.String,System.String)">
            <summary>
            保存内容到ini文件
            <para>若存在相同的key，就覆盖，否则就增加</para>
            </summary>
            <param name="section">section名</param>
            <param name="key">键名</param>
            <param name="value">键值</param>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.RemoveSection(System.String)">
            <summary>
            移除指定的section
            </summary>
            <param name="section">section名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.RemoveKey(System.String,System.String)">
            <summary>
            移除指定的key
            </summary>
            <param name="section">section名</param>
            <param name="key">键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Files.IniFile.Clear">
            <summary>
            清空INI文件信息
            </summary>
        </member>
        <member name="P:JCE.Utils.Files.IniFile.Path">
            <summary>
            Ini文件路径
            </summary>
        </member>
        <member name="T:JCE.Utils.Item">
            <summary>
            列表项
            </summary>
        </member>
        <member name="M:JCE.Utils.Item.#ctor">
            <summary>
            初始化列表项
            </summary>
        </member>
        <member name="M:JCE.Utils.Item.#ctor(System.String,System.String)">
            <summary>
            初始化列表项
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
        </member>
        <member name="M:JCE.Utils.Item.#ctor(System.String,System.String,System.Int32)">
            <summary>
            初始化列表项
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
            <param name="sortId">排序号</param>
        </member>
        <member name="M:JCE.Utils.Item.CompareTo(JCE.Utils.Item)">
            <summary>
            比较
            </summary>
            <param name="other">其他列表项</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Item.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:JCE.Utils.Item.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:JCE.Utils.Item.SortId">
            <summary>
            排序号
            </summary>
        </member>
        <member name="T:JCE.Utils.Logging.ILog">
            <summary>
            表示日志实例的接口
            </summary>
        </member>
        <member name="T:JCE.Utils.Logging.ILogger">
            <summary>
            日志记录器，定义日志记录行为
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Trace``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Debug``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Warn``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Error``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Fatal``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Logging.ILogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:JCE.Utils.Logging.ILog.IsDataLogging">
            <summary>
            获取 是否数据日志对象
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.ILog.IsTraceEnabled">
            <summary>
            获取 是否允许<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.ILog.IsDebugEnabled">
            <summary>
            获取 是否允许<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.ILog.IsInfoEnabled">
            <summary>
            获取 是否允许<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.ILog.IsWarnEnabled">
            <summary>
            获取 是否允许<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.ILog.IsErrorEnabled">
            <summary>
            获取 是否允许<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.ILog.IsFatalEnabled">
            <summary>
            获取 是否允许<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>级别的日志
            </summary>
        </member>
        <member name="T:JCE.Utils.Logging.ILoggerAdapter">
            <summary>
            日志适配器，定义日志输出适配器的方法
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.ILoggerAdapter.GetLogger(System.Type)">
            <summary>
            由指定类型获取<see cref="T:JCE.Utils.Logging.ILog"/>日志实例
            </summary>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Logging.ILoggerAdapter.GetLogger(System.String)">
            <summary>
            由指定名称获取<see cref="T:JCE.Utils.Logging.ILog"/>日志实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Logging.InternalLogger">
            <summary>
            日记记录者，日志记录输入端
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.InternalLogger._logs">
            <summary>
            日志实例集合
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.#cctor">
            <summary>
            构造函数，默认初始化开启日志
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.#ctor(System.Type)">
            <summary>
            构造函数，初始化一个<see cref="T:JCE.Utils.Logging.InternalLogger"/>新实例
            </summary>
            <param name="type">类型</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.#ctor(System.String)">
            <summary>
            构造函数，初始化一个<see cref="T:JCE.Utils.Logging.InternalLogger"/>新实例
            </summary>
            <param name="name">指定名称</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Trace``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Debug``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Warn``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Error``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Fatal``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.InternalLogger.IsEnableFor(JCE.Utils.Logging.LogLevel)">
            <summary>
            是否启用指定日志级别
            </summary>
            <param name="level">日志级别</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Logging.InternalLogger.EntryEnabled">
            <summary>
            获取或设置 是否允许记录日志，如为 false，将完全禁止日志记录
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.InternalLogger.EntryLogLevel">
            <summary>
             获取或设置 日志级别的入口控制，级别决定是否执行相应级别的日志记录功能
            </summary>
        </member>
        <member name="T:JCE.Utils.Logging.LogBase">
            <summary>
            日志输出者适配器基类，用于定义日志输出的处理业务
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Write(JCE.Utils.Logging.LogLevel,System.Object,System.Exception,System.Boolean)">
            <summary>
            获取日志输出处理委托实例
            </summary>
            <param name="level">日志输出级别</param>
            <param name="message">日志消息</param>
            <param name="exception">日志异常</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Trace``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Trace(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Debug``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Debug(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Info``1(``0,System.Boolean)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="isData">是否数据日志</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Info(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Warn``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Warn(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Error``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Error(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Error``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>日志消息，并记录异常
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Error(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Fatal``1(``0)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>日志消息
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Fatal(System.String,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>格式化日志消息
            </summary>
            <param name="format">日志消息格式</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Fatal``1(``0,System.Exception)">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>日志消息，并记录异常
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="message">日志消息</param>
            <param name="exception">异常</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogBase.Fatal(System.String,System.Exception,System.Object[])">
            <summary>
            写入<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>格式化日志消息，并记录异常
            </summary>
            <param name="format">日志消息格式</param>
            <param name="exception">异常</param>
            <param name="args">格式化参数</param>
        </member>
        <member name="P:JCE.Utils.Logging.LogBase.IsDataLogging">
            <summary>
            获取 是否数据日志对象
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.LogBase.IsTraceEnabled">
            <summary>
            获取 是否允许输出<see cref="F:JCE.Utils.Logging.LogLevel.Trace"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.LogBase.IsDebugEnabled">
            <summary>
            获取 是否允许输出<see cref="F:JCE.Utils.Logging.LogLevel.Debug"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.LogBase.IsInfoEnabled">
            <summary>
            获取 是否允许输出<see cref="F:JCE.Utils.Logging.LogLevel.Info"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.LogBase.IsWarnEnabled">
            <summary>
            获取 是否允许输出<see cref="F:JCE.Utils.Logging.LogLevel.Warn"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.LogBase.IsErrorEnabled">
            <summary>
            获取 是否允许输出<see cref="F:JCE.Utils.Logging.LogLevel.Error"/>级别的日志
            </summary>
        </member>
        <member name="P:JCE.Utils.Logging.LogBase.IsFatalEnabled">
            <summary>
            获取 是否允许输出<see cref="F:JCE.Utils.Logging.LogLevel.Fatal"/>级别的日志
            </summary>
        </member>
        <member name="T:JCE.Utils.Logging.LoggerAdapterBase">
            <summary>
            日志适配器基类，按名称缓存的日志实现适配器基类，用于创建并管理指定类型的日志实例
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LoggerAdapterBase._cacheLoggers">
            <summary>
            缓存日志字典
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.LoggerAdapterBase.#ctor">
            <summary>
            构造函数，初始化一个<see cref="T:JCE.Utils.Logging.LoggerAdapterBase"/>类型的新实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.LoggerAdapterBase.CreateLogger(System.String)">
            <summary>
            创建日志实例，如缓存日志字典存在该名称日志实例，则返回，否则创建新实例并缓存起来
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Logging.LoggerAdapterBase.GetLogger(System.Type)">
            <summary>
            由指定类型获取<see cref="T:JCE.Utils.Logging.ILog"/>日志实例
            </summary>
            <param name="type">指定类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Logging.LoggerAdapterBase.GetLogger(System.String)">
            <summary>
            由指定名称获取<see cref="T:JCE.Utils.Logging.ILog"/>日志实例
            </summary>
            <param name="name">指定名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Logging.LoggerAdapterBase.ClearLoggerCache">
            <summary>
            清空缓存中的日志实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.LoggerAdapterBase.GetLoggerInternal(System.String)">
            <summary>
            获取指定名称的日志实例，如不存在则创建实例
            </summary>
            <param name="name">指定名称</param>
            <returns>日志实例</returns>
            <exception cref="T:System.NotSupportedException">指定名称的日志缓存实例不存在则返回异常<see cref="T:System.NotSupportedException"/></exception>
        </member>
        <member name="T:JCE.Utils.Logging.LogLevel">
            <summary>
            日志级别，表示日志输出级别的枚举
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.All">
            <summary>
            输出所有级别的日志
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.Trace">
            <summary>
            输出表示跟踪的日志级别
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.Debug">
            <summary>
            输出表示调试的日志级别
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.Info">
            <summary>
            输出表示消息的日志级别
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.Warn">
            <summary>
            输出表示警告的日志级别
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.Error">
            <summary>
            输出表示错误的日志级别
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.Fatal">
            <summary>
            输出表示严重错误的日志级别
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogLevel.Off">
            <summary>
            关闭所有日志，不输出日志
            </summary>
        </member>
        <member name="T:JCE.Utils.Logging.LogManager">
            <summary>
            日志管理器
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogManager.Loggers">
            <summary>
            缓存日志字典
            </summary>
        </member>
        <member name="F:JCE.Utils.Logging.LogManager.LockObj">
            <summary>
            对象锁
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.LogManager.#cctor">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Logging.LogManager"/>类型的实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Logging.LogManager.AddLoggerAdapter(JCE.Utils.Logging.ILoggerAdapter)">
            <summary>
            添加日志适配器
            </summary>
            <param name="adapter">日志适配器</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogManager.RemoveLoggerAdapter(JCE.Utils.Logging.ILoggerAdapter)">
            <summary>
            移除日志适配器
            </summary>
            <param name="adapter">日志适配器</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogManager.SetEntryInfo(System.Boolean,JCE.Utils.Logging.LogLevel)">
            <summary>
            设置日志记录入口参数
            </summary>
            <param name="enabled">是否允许记录日志，如为false，将完全禁止日志记录</param>
            <param name="entryLevel">日志级别的入口控制，级别决定是否执行相应级别的日志记录功能</param>
        </member>
        <member name="M:JCE.Utils.Logging.LogManager.GetLogger(System.String)">
            <summary>
            获取日志记录器实例
            </summary>
            <param name="name">类型名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Logging.LogManager.GetLogger(System.Type)">
            <summary>
            获取指定类型的日志记录器实例
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Logging.LogManager.GetLogger``1">
            <summary>
            获取指定类型的日志记录器实例
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Logging.LogManager.Adapters">
            <summary>
            获取日志适配器集合
            </summary>
        </member>
        <member name="T:JCE.Utils.Mails.Pop3.Pop3Config">
            <summary>
            Pop3配置
            </summary>
        </member>
        <member name="F:JCE.Utils.Mails.Pop3.Pop3Config._smtpConfig">
            <summary>
            单例配置
            </summary>
        </member>
        <member name="M:JCE.Utils.Mails.Pop3.Pop3Config.#ctor">
            <summary>
            初始化一个<see cref="!:SmtpConfig"/>类型的实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Mails.Pop3.Pop3Config.Create">
            <summary>
            创建Smtp配置
            </summary>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Mails.Pop3.Pop3Config.ConfigFile">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Pop3.Pop3Config.SmtpSetting">
            <summary>
            Smtp相关设置
            </summary>
        </member>
        <member name="T:JCE.Utils.Mails.Pop3.Pop3Setting">
            <summary>
            Pop3设置
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Pop3.Pop3Setting.Server">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Pop3.Pop3Setting.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Pop3.Pop3Setting.UseSSL">
            <summary>
            是否使用SSL连接
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Pop3.Pop3Setting.User">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Pop3.Pop3Setting.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:JCE.Utils.Mails.Smtp.SmtpConfig">
            <summary>
            Smtp配置
            </summary>
        </member>
        <member name="F:JCE.Utils.Mails.Smtp.SmtpConfig._smtpConfig">
            <summary>
            单例配置
            </summary>
        </member>
        <member name="M:JCE.Utils.Mails.Smtp.SmtpConfig.#ctor">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Mails.Smtp.SmtpConfig"/>类型的实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Mails.Smtp.SmtpConfig.Create">
            <summary>
            创建Smtp配置
            </summary>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpConfig.ConfigFile">
            <summary>
            配置文件路径
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpConfig.SmtpSetting">
            <summary>
            Smtp相关设置
            </summary>
        </member>
        <member name="T:JCE.Utils.Mails.Smtp.SmtpSetting">
            <summary>
            Smtp设置
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpSetting.Server">
            <summary>
            服务器地址
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpSetting.Port">
            <summary>
            端口号
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpSetting.Authentication">
            <summary>
            是否需要身份认证
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpSetting.Sender">
            <summary>
            发送人
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpSetting.User">
            <summary>
            用户名
            </summary>
        </member>
        <member name="P:JCE.Utils.Mails.Smtp.SmtpSetting.Password">
            <summary>
            密码
            </summary>
        </member>
        <member name="T:JCE.Utils.Encrypts.AESCrypt">
            <summary>
            AES（Advanced Encryption Standard）算法
            </summary>
        </member>
        <member name="F:JCE.Utils.Encrypts.AESCrypt.RET_ERROR">
            <summary>
            返回错误码
            </summary>
        </member>
        <member name="F:JCE.Utils.Encrypts.AESCrypt.CRYPTO_KEY">
            <summary>
            加(解)密密匙
            </summary>
        </member>
        <member name="F:JCE.Utils.Encrypts.AESCrypt._iv">
            <summary>
            对称算法初始化向量
            </summary>
        </member>
        <member name="F:JCE.Utils.Encrypts.AESCrypt._Key">
            <summary>
            加密或解密密匙
            </summary>
        </member>
        <member name="F:JCE.Utils.Encrypts.AESCrypt.CRYPTO_KEY_LENGTH">
            <summary>
            加密密匙长度
            </summary>
        </member>
        <member name="F:JCE.Utils.Encrypts.AESCrypt._aesCryptoServiceProvider">
            <summary>
            AES加密算法接口
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.#ctor">
            <summary>
            构造函数，默认
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.#ctor(System.Boolean)">
            <summary>
            构造函数，设置密文中是否包含密匙
            </summary>
            <param name="containKey">密文中是否包含密匙</param>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Encrypt(System.String,System.String)">
            <summary>
            指定密匙对明文进行AES加密
            </summary>
            <param name="plaintext">明文</param>
            <param name="keyStr">加密密匙</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Encrypt(System.String)">
            <summary>
            动态生成密匙，并对明文进行AES加密
            </summary>
            <param name="plaintext">明文</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Encrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            加密
            </summary>
            <param name="toEncrypt">需要加密的文本</param>
            <param name="key">密匙</param>
            <param name="encoding">编码类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Encrypt(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            加密
            </summary>
            <param name="keyArray">密匙</param>
            <param name="toEncryptArray">需要加密的文本</param>
            <param name="iv">偏移量</param>
            <param name="keySize">密匙大小</param>
            <param name="blockSize">块大小</param>
            <param name="cipherMode">加密块密码模式</param>
            <param name="paddingMode">填充类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Decrypt(System.String,System.String)">
            <summary>
            指定密匙并对密文进行AES解密
            </summary>
            <param name="encrypted">密文</param>
            <param name="keyStr">密匙</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Decrypt(System.String)">
            <summary>
            从密文中解析出密匙，并对密文进行AES解密
            </summary>
            <param name="encrypted">密文</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Decrypt(System.String,System.String,System.Text.Encoding)">
            <summary>
            解密
            </summary>
            <param name="toDecrypt">需要解密的字符串</param>
            <param name="key">密匙</param>
            <param name="encoding">编码类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Decrypt(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.CipherMode,System.Security.Cryptography.PaddingMode)">
            <summary>
            解密
            </summary>
            <param name="keyArray">密匙</param>
            <param name="toDecryptArray">需要解密的文本</param>
            <param name="iv">偏移量</param>
            <param name="keySize">密匙大小</param>
            <param name="blockSize">块大小</param>
            <param name="cipherMode">加密块密码模式</param>
            <param name="paddingMode">填充类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Encrypt(System.String,System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="cryptoStr">需要加密的字符串</param>
            <param name="key">密匙</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Decrypt(System.String,System.Byte[])">
            <summary>
            解密
            </summary>
            <param name="encryptedStr">需要解密的字符串</param>
            <param name="key">密匙</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Byte2HexString(System.Byte[])">
            <summary>
            Byte[]转十六进制字符串
            </summary>
            <param name="bytes">需要转换的字节数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.HexString2Byte(System.String)">
            <summary>
            十六进制字符串转Byte[]
            </summary>
            <param name="hex">需要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.String2Byte(System.String)">
            <summary>
            字符串转Byte[]
            </summary>
            <param name="str">需要转换的字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.AESCrypt.Byte2String(System.Byte[])">
            <summary>
            Byte[]转字符串
            </summary>
            <param name="bytes">需要转换的字节数组</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Encrypts.AESCrypt.Message">
            <summary>
            消息
            </summary>
        </member>
        <member name="P:JCE.Utils.Encrypts.AESCrypt.ContainKey">
            <summary>
            密文中是否包含密匙
            </summary>
        </member>
        <member name="T:JCE.Utils.Encrypts.DESCrypt">
            <summary>
            DES（Data Encryption Standard）算法，
            是一种对称加密算法(破解方式：穷举法)
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.DESCrypt.Encrypt(System.String,System.String)">
            <summary>
            指定密匙对明文进行DES加密
            </summary>
            <param name="text">明文</param>
            <param name="key">密匙</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.DESCrypt.Decrypt(System.String,System.String)">
            <summary>
            解密
            </summary>
            <param name="text">密文</param>
            <param name="key">密匙</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Encrypts.HmacSHA1Crypt">
            <summary>
            HMAC-SHA1（Hash-based Message Authentication Code）算法
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.HmacSHA1Crypt.EncryptBase64(System.String,System.String,System.Text.Encoding)">
            <summary>
            加密并使用Base64进行转换
            </summary>
            <param name="data">需要加密的字符串</param>
            <param name="key">密匙</param>
            <param name="encoding">编码类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.HmacSHA1Crypt.EncryptUtf8(System.String,System.String,System.Text.Encoding)">
            <summary>
            加密并返回UTF8编码的字符串
            </summary>
            <param name="data">需要加密的字符串</param>
            <param name="key">密匙</param>
            <param name="encoding">编码类型</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.HmacSHA1Crypt.Encrypt(System.Byte[],System.Byte[])">
            <summary>
            加密
            </summary>
            <param name="key">密匙</param>
            <param name="bytes">需要加密的字节流</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Encrypts.MD5Crypt">
            <summary>
            MD5（Message Digest Algorithm）算法
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.MD5Crypt.EncryptBy16(System.String)">
            <summary>
            加密，返回16位结果
            </summary>
            <param name="text">待加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.MD5Crypt.EncryptBy16(System.String,System.Text.Encoding)">
            <summary>
            加密，返回16位结果
            </summary>
            <param name="text">待加密字符串</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.MD5Crypt.EncryptBy32(System.String)">
            <summary>
            加密，返回32位结果
            </summary>
            <param name="text">待加密字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.MD5Crypt.EncryptBy32(System.String,System.Text.Encoding)">
            <summary>
            加密，返回32位结果
            </summary>
            <param name="text">待加密字符串</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.MD5Crypt.Encrypt(System.String,System.Text.Encoding,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            加密
            </summary>
            <param name="text">待加密字符串</param>
            <param name="encoding">加密编码方式</param>
            <param name="startIndex">开始索引</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Encrypts.RSACrypt">
            <summary>
            RSA加密算法，可用于数据加密或者数字签名
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.RSACrypt.#ctor">
            <summary>
            构造函数，空
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.RSACrypt.RsaKey(System.String@,System.String@)">
            <summary>
            生成RSA密匙
            </summary>
            <param name="xmlKey">密匙</param>
            <param name="xmlPublicKey">公有密匙</param>
        </member>
        <member name="T:JCE.Utils.Encrypts.SHA1Crypt">
            <summary>
            SHA1（Secure Hash Algorithm）算法，适用于数字签名标准
            </summary>
        </member>
        <member name="M:JCE.Utils.Encrypts.SHA1Crypt.Encrypt(System.String,System.Text.Encoding)">
            <summary>
            对指定文本进行SHA1加密
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.SHA1Crypt.EncryptBase64(System.String,System.Text.Encoding)">
            <summary>
            对指定文本进行SHA1加密并返回Base64编码格式字符串
            </summary>
            <param name="text">需要加密的文本</param>
            <param name="encoding">字符编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Encrypts.SHA1Crypt.Encrypt(System.Byte[])">
            <summary>
            对指定字节数组进行SHA1加密
            </summary>
            <param name="bytes">需要加密的字节数组</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Extensions.ParamterCheckExtensions">
            <summary>
            参数检查扩展方法
            </summary>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.Require``1(System.Boolean,System.String)">
            <summary>
            验证指定值的断言<paramref name="assertion"/>是否为真，如果不为真，抛出指定消息<paramref name="message"/>的指定类型<typeparamref name="TException"/>异常
            </summary>
            <typeparam name="TException">异常类型</typeparam>
            <param name="assertion">要验证的断言</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.Required``1(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">要判断的值的类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.Required``2(``0,System.Func{``0,System.Boolean},System.String)">
            <summary>
            验证指定值的断言表达式是否为真，不为真，则抛出<see cref="T:System.Exception"/>异常
            </summary>
            <typeparam name="T">要判断的值的类型</typeparam>
            <typeparam name="TException">抛出的异常类型</typeparam>
            <param name="value">要判断的值</param>
            <param name="assertionFunc">要验证的断言表达式</param>
            <param name="message">异常消息</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckNotNull``1(``0,System.String)">
            <summary>
            检查参数不能为空引用，否则抛出<see cref="T:System.ArgumentNullException"/>异常
            </summary>
            <typeparam name="T">要检查的值的类型</typeparam>
            <param name="value">要检查的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckNotNullOrEmpty(System.String,System.String)">
            <summary>
            检查字符串不能为空引用或空字符串，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要检查的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckNotEmpty(System.Guid,System.String)">
            <summary>
            检查Guid不能为Guid.Empty，否则抛出<see cref="T:System.ArgumentException"/>异常
            </summary>
            <param name="value">要检查的值</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckNotNullOrEmpty``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            检查集合不能为空引用或空集合，否则抛出<see cref="T:System.ArgumentNullException"/>异常或<see cref="T:System.ArgumentException"/>异常
            </summary>
            <typeparam name="T">集合项的类型</typeparam>
            <param name="collection">要检查的集合</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckLessThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须小于[或可等于,参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">要检查的参数类型</typeparam>
            <param name="value">要检查的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckGreaterThan``1(``0,System.String,``0,System.Boolean)">
            <summary>
            检查参数必须大于[或可等于,参数canEqual]指定值，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">要检查的参数类型</typeparam>
            <param name="value">要检查的值</param>
            <param name="paramName">参数名</param>
            <param name="target">要比较的值</param>
            <param name="canEqual">是否可等于</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckBetween``1(``0,System.String,``0,``0,System.Boolean,System.Boolean)">
            <summary>
            检查参数必须在指定范围之间，否则抛出<see cref="T:System.ArgumentOutOfRangeException"/>异常
            </summary>
            <typeparam name="T">要检查的参数类型</typeparam>
            <param name="value">要检查的值</param>
            <param name="paramName">参数名</param>
            <param name="start">比较范围的起始值</param>
            <param name="end">比较范围的结束值</param>
            <param name="startEqual">是否等于起始值</param>
            <param name="endEqual">是否等于结束值</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckDirectoryExists(System.String,System.String)">
            <summary>
            检查指定路径的文件夹必须存在，否则抛出<see cref="T:System.IO.DirectoryNotFoundException"/>异常
            </summary>
            <param name="directory">目录路径</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="M:JCE.Utils.Extensions.ParamterCheckExtensions.CheckFileExists(System.String,System.String)">
            <summary>
            检查指定路径的文件必须存在，否则抛出<see cref="T:System.IO.FileNotFoundException"/>异常
            </summary>
            <param name="fileName">文件路径</param>
            <param name="paramName">参数名</param>
        </member>
        <member name="T:JCE.Utils.INullObject">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:JCE.Utils.INullObject.IsNull">
            <summary>
            是否空对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.NullObject">
            <summary>
            空对象
            </summary>
        </member>
        <member name="M:JCE.Utils.NullObject.IsNull">
            <summary>
            是否空对象
            </summary>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Maths.UnitConv">
            <summary>
            单位转换
            </summary>
        </member>
        <member name="M:JCE.Utils.Maths.UnitConv.DegreesCelsiusToFahrenheit(System.Decimal)">
            <summary>
            摄氏度转换为华氏度
            </summary>
            <param name="value">摄氏度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Maths.UnitConv.DegreesCelsiusToThermodynamicTemperature(System.Decimal)">
            <summary>
            摄氏度转换为开氏度(热力学温度)
            </summary>
            <param name="value">摄氏度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Maths.UnitConv.FahrenheitToDegreesCelsius(System.Decimal)">
            <summary>
            华氏度转换为摄氏度
            </summary>
            <param name="value">华氏度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Maths.UnitConv.FahrenheitToThermodynamicTemperature(System.Decimal)">
            <summary>
            华氏度转换为开氏度
            </summary>
            <param name="value">华氏度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Maths.UnitConv.ThermodynamicTemperatureToDegreesCelsius(System.Decimal)">
            <summary>
            开氏度转换为摄氏度
            </summary>
            <param name="value">开氏度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Maths.UnitConv.ThermodynamicTemperatureToFahrenheit(System.Decimal)">
            <summary>
            开氏度转换为华氏度
            </summary>
            <param name="value">开氏度</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Medias.ExifThumbnail">
            <summary>
            Exif缩略图信息
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.ExifThumbnail.GdipGetPropertyItem(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
            从GDI Plus中获取属性项
            </summary>
            <param name="image">图片指针</param>
            <param name="propid">属性ID</param>
            <param name="size">长度</param>
            <param name="buffer">缓存</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ExifThumbnail.GdipGetPropertyItemSize(System.IntPtr,System.Int32,System.Int32@)">
            <summary>
            从GDI Plus中获取图片大小
            </summary>
            <param name="image">图片指针</param>
            <param name="propid">属性ID</param>
            <param name="size">输出图片大小</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ExifThumbnail.GdipLoadImageFromFile(System.String,System.IntPtr@)">
            <summary>
            从GDI Plus中获取图片文件
            </summary>
            <param name="filename">文件名</param>
            <param name="image">输出图片指针</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ExifThumbnail.GdipDisposeImage(System.IntPtr)">
            <summary>
            从GDI Plus中释放图片
            </summary>
            <param name="image">图片指针</param>
            <returns></returns>
        </member>
        <member name="F:JCE.Utils.Medias.ExifThumbnail.THUMBNAIL_DATA">
            <summary>
            缩略图数据大小
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.ExifThumbnail.ReadThumb(System.String)">
            <summary>
            读取缩略图
            </summary>
            <param name="imagePath">图片文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ExifThumbnail.CreateException(System.Int32)">
            <summary>
            根据GDI+ 错误码生成异常信息
            </summary>
            <param name="gdipErrorCode">GDI+错误码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ExifThumbnail.ConvertFromMemory(System.IntPtr)">
            <summary>
            将指针缓存数据转换成属性项以及图片
            </summary>
            <param name="thumbData">指针缓存数据</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Medias.ExifThumbnail.PropertyItemInternal">
            <summary>
            内部属性项
            Used in Marshal.PtrToStructure().
            We need this dummy class because Imaging.PropertyItem is not a "blittable"
            class and Marshal.PtrToStructure only accepted blittable classes.
            (It's not blitable because it uses a byte[] array and that's not a blittable
            type. See MSDN for a definition of Blittable.)
            </summary>
        </member>
        <member name="T:JCE.Utils.Medias.ImageLocationMode">
            <summary>
            图片位置枚举
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.LeftTop">
            <summary>
            左上角
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.Top">
            <summary>
            靠上
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.RightTop">
            <summary>
            右上角
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.LeftCenter">
            <summary>
            左中
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.Center">
            <summary>
            居中
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.RightCenter">
            <summary>
            右中
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.LeftBottom">
            <summary>
            左下角
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.Bottom">
            <summary>
            靠下
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageLocationMode.RightBottom">
            <summary>
            右下角
            </summary>
        </member>
        <member name="T:JCE.Utils.Medias.ImageUtil">
            <summary>
            图片操作工具类
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageUtil.Fonts">
            <summary>
            文本字体数组
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ImageUtil.Styles">
            <summary>
            文本样式数组
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.MakeThumbnail(System.String,System.String,System.Int32,System.Int32,JCE.Utils.Medias.ThumbnailMode)">
            <summary>
            生成缩略图
            </summary>
            <param name="originalImagePath">源图路径（物理路径）</param>
            <param name="thumbnailPath">缩略图路径（物理路径）</param>
            <param name="width">缩略图宽度</param>
            <param name="height">缩略图高度</param>
            <param name="mode">生成缩略图的方式</param>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.MakeThumbnail(System.Byte[],System.Int32,System.Int32,JCE.Utils.Medias.ThumbnailMode)">
            <summary>
            转换生成缩略图
            </summary>
            <param name="imgByte">缓存字节流</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="mode">缩略图方式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.MakeThumbnail(System.Drawing.Image,System.Int32,System.Int32,JCE.Utils.Medias.ThumbnailMode)">
            <summary>
            转换生成缩略图
            </summary>
            <param name="originalImage">原图</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="mode">生成缩略图的方式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.ByteToImage(System.Byte[])">
            <summary>
            将字节数组转换成图片
            </summary>
            <param name="buffer">缓存字节流</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.ImageToByte(System.Drawing.Image)">
            <summary>
            将图片转换成字节数组
            </summary>
            <param name="image">图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.ImageToStream(System.Drawing.Image)">
            <summary>
            将图片转换成字节流
            </summary>
            <param name="image">图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.ImageToBase64(System.Drawing.Image)">
            <summary>
            将图片转换成Base64编码
            </summary>
            <param name="image">图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.ImageToBase64WithHeader(System.Drawing.Image)">
            <summary>
            将图片转换成Base64编码，带有头部
            </summary>
            <param name="image"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.Base64ToImage(System.String)">
            <summary>
            将Base64编码转换成图片
            </summary>
            <param name="base64">Base64编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.Base64ToImageWithHeader(System.String)">
            <summary>
            将带有头部编码的Base64编码转换成图片
            </summary>
            <param name="base64">Base64编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.ImageWatermark(System.String,System.String,JCE.Utils.Medias.ImageLocationMode)">
            <summary>
            设置图片水印
            </summary>
            <param name="path">需要加载水印的图片路径（绝对路径）</param>
            <param name="waterpath">水印图片（绝对路径）</param>
            <param name="location">水印位置</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetLocation(JCE.Utils.Medias.ImageLocationMode,System.Drawing.Image,System.Drawing.Image)">
            <summary>
            获取水印位置
            </summary>
            <param name="location">水印位置</param>
            <param name="img">需要添加水印的图片</param>
            <param name="waterImg">水印图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.LetterWatermark(System.String,System.Int32,System.String,System.Drawing.Color,JCE.Utils.Medias.ImageLocationMode)">
            <summary>
            设置文字水印
            </summary>
            <param name="path">图片路径（绝对路径）</param>
            <param name="size">字体大小</param>
            <param name="letter">水印文字</param>
            <param name="color">颜色</param>
            <param name="location">水印位置</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetLocation(JCE.Utils.Medias.ImageLocationMode,System.Drawing.Image,System.Int32,System.Int32)">
            <summary>
            获取水印位置
            </summary>
            <param name="location">水印位置</param>
            <param name="img">需要添加水印的图片</param>
            <param name="width">宽(当水印类型为文字时,传过来的就是字体的大小)</param>
            <param name="height">高(当水印类型为文字时,传过来的就是字符的长度)</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.BrightnessHandle(System.Drawing.Bitmap,System.Int32,System.Int32,System.Int32)">
            <summary>
            亮度处理
            </summary>
            <param name="bitmap">原始图片</param>
            <param name="width">原始图片的长度</param>
            <param name="height">原始图片的高度</param>
            <param name="val">增加或减少的光暗值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.FilterColor(System.Drawing.Bitmap)">
            <summary>
            滤色处理
            </summary>
            <param name="bitmap">原始图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.StretchImage(System.Drawing.Bitmap,System.Int32,System.Int32)">
            <summary>
            拉伸图片?
            </summary>
            <param name="bitmap">原始图片</param>
            <param name="width">新的宽度</param>
            <param name="height">新的高度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.LeftRightTurn(System.Drawing.Bitmap)">
            <summary>
            左右翻转
            </summary>
            <param name="bitmap">原始图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.TopBottomTurn(System.Drawing.Bitmap)">
            <summary>
            上下翻转
            </summary>
            <param name="bitmap">原始图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.Compress(System.String,System.String)">
            <summary>
            压缩图片
            </summary>
            <param name="oldFile">源文件路径</param>
            <param name="newFile">新文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.ToBlackWhiteImage(System.Drawing.Bitmap)">
            <summary>
            转换为黑白图片
            </summary>
            <param name="bitmap">要进行处理的图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.TwistImage(System.Drawing.Bitmap,System.Boolean,System.Double,System.Double)">
            <summary>
            正弦曲线Wave扭曲图片
            </summary>
            <param name="bitmap">图片</param>
            <param name="isTwist">是否扭曲，true:扭曲,false:不扭曲</param>
            <param name="shapeMultValue">波形的幅度倍数，越大扭曲的程度越高，默认为3</param>
            <param name="shapePhase">波形的起始相位，取值区间[0-2*PI]</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetFrames(System.String,System.String)">
            <summary>
            获取图片帧
            </summary>
            <param name="imgPath">图片路径</param>
            <param name="savePath">帧保存路径</param>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetImageExtension(System.Drawing.Image)">
            <summary>
            获取图片扩展名
            </summary>
            <param name="image">图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetImageFormate(System.Drawing.Image)">
            <summary>
            获取图片格式
            </summary>
            <param name="image">图片</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetCodecInfo(System.Drawing.Imaging.ImageFormat)">
            <summary>
            获取特定图像编解码信息
            </summary>
            <param name="format">图片格式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.CreateImageByChar(System.String)">
            <summary>
            根据字符内容生成图片
            </summary>
            <param name="content">内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetImageTag(System.String)">
            <summary>
            获取图片标签
            </summary>
            <param name="htmlStr">html字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.GetImageUrl(System.String)">
            <summary>
            获取图片Url地址
            </summary>
            <param name="imgTagStr">图片标签字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.DownImage(System.String,System.String)">
            <summary>
            下载图片到本地
            </summary>
            <param name="html">Html字符串</param>
            <param name="path">本地路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.FromFile(System.String)">
            <summary>
            从指定文件创建图片
            </summary>
            <param name="filePath">图片文件的绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.FromStream(System.IO.Stream)">
            <summary>
            从指定流创建图片
            </summary>
            <param name="stream">流</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.FromStream(System.Byte[])">
            <summary>
            从指定字节流创建图片
            </summary>
            <param name="buffer">字节流</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.ImageUtil.UndamageCompress(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            无损压缩图片
            </summary>
            <param name="oldFile">原文件路径</param>
            <param name="newFile">新文件路径</param>
            <param name="flag">压缩质量（数字越小压缩率越高）1-100</param>
            <param name="size">压缩后图片的最大大小</param>
            <param name="sfsc">是否第一次调用</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Medias.Mp3Util">
            <summary>
            Mp3文件播放操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.Mp3Util.mciSendString(System.String,System.Text.StringBuilder,System.Int32,System.IntPtr)">
            <summary>
            MCI发送文本
            </summary>
            <param name="strCommand">命令</param>
            <param name="strReturn">返回内容</param>
            <param name="iReturnLength">返回长度</param>
            <param name="hwndCallback">回调指针</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.Mp3Util.Play(System.String,System.Boolean)">
            <summary>
            播放Mp3音乐
            </summary>
            <param name="mp3FielName">mp3文件名</param>
            <param name="repeat">是否循环播放,true:是,false:否</param>
        </member>
        <member name="M:JCE.Utils.Medias.Mp3Util.Play(System.Byte[],System.Boolean)">
            <summary>
            播放Mp3音乐
            </summary>
            <param name="mp3EmbeddedResource">内嵌的mp3资源</param>
            <param name="repeat">是否循环播放,true:是,false:否</param>
        </member>
        <member name="M:JCE.Utils.Medias.Mp3Util.Pause">
            <summary>
            暂停播放
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.Mp3Util.Stop">
            <summary>
            停止播放
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.Mp3Util.ExtractResource(System.Byte[],System.String)">
            <summary>
            提取资源
            </summary>
            <param name="res">字节数组</param>
            <param name="filePath">文件路径</param>
        </member>
        <member name="T:JCE.Utils.Medias.ThumbnailMode">
            <summary>
            缩略图枚举
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ThumbnailMode.Cut">
            <summary>
            指定高宽裁剪（不变形）
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ThumbnailMode.FixedW">
            <summary>
            指定宽度，高度自动
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ThumbnailMode.FixedH">
            <summary>
            指定高度，宽度自动
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.ThumbnailMode.FixedBoth">
            <summary>
            宽度跟高度都制定，但是会变形
            </summary>
        </member>
        <member name="T:JCE.Utils.Medias.VideoConvert">
            <summary>
            视频转换器
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.VideoConvert.FfmpegTool">
            <summary>
            Ffmpeg 工具文件路径
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.VideoConvert.MencoderTool">
            <summary>
            Mencoder 工具文件路径
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.VideoConvert.SaveFile">
            <summary>
            保存文件目录
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.VideoConvert.SizeOfImg">
            <summary>
            缩略图文件大小
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.VideoConvert.WidthOfFile">
            <summary>
            视频宽度
            </summary>
        </member>
        <member name="F:JCE.Utils.Medias.VideoConvert.HeightOfFile">
            <summary>
            视频高度
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.#ctor">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Medias.VideoConvert"/>类型的实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.GetFileType(System.String)">
            <summary>
            获取文件类型
            </summary>
            <param name="extension">后缀名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.ToFlv(System.String,System.String)">
            <summary>
            视频格式转换为Flv格式
            </summary>
            <param name="filePath">原视频文件路径</param>
            <param name="exportPath">生成后的Flv文件路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.CreateThumbnail(System.String)">
            <summary>
            生成Flv视频的缩略图
            </summary>
            <param name="filePath">视频文件路径</param>
            <returns>缩略图路径</returns>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.CreateThumbnail(System.String,System.String)">
            <summary>
            生成视频缩略图
            </summary>
            <param name="fileName">文件名</param>
            <param name="imgPath">图片路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.FfmpegConvertPhy(System.String,System.String,System.String)">
            <summary>
            运行FFMpeg的视频解码（绝对路径）
            </summary>
            <param name="filePath">上传视频文件的路径（原文件）</param>
            <param name="playPath">转换后的文件路径（网络播放文件）</param>
            <param name="imgPath">从视频文件中抓取的图片路径</param>
            <returns>成功:返回图片虚拟路径，失败:返回空字符串</returns>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.FfmpegConvertVir(System.String,System.String,System.String)">
            <summary>
            运行FFMpeg的视频解码（绝对路径）
            </summary>
            <param name="filePath">上传视频文件的路径（原文件）</param>
            <param name="playPath">转换后的文件路径（网络播放文件）</param>
            <param name="imgPath">从视频文件中抓取的图片路径</param>
            <returns>成功:返回图片虚拟路径，失败:返回空字符串</returns>
        </member>
        <member name="M:JCE.Utils.Medias.VideoConvert.MencoderConvertPhy(System.String,System.String,System.String)">
            <summary>
            运行Mencoder的视频解码（绝对路径）
            </summary>
            <param name="filePath">上传视频文件的路径（原文件）</param>
            <param name="playPath">转换后的文件路径（网络播放文件）</param>
            <param name="imgPath">从视频文件中抓取的图片路径</param>
            <returns>成功:返回图片虚拟路径，失败:返回空字符串</returns>
        </member>
        <member name="T:JCE.Utils.Modes.IdCards.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.Gender.Female">
            <summary>
            女性
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.Gender.Male">
            <summary>
            男性
            </summary>
        </member>
        <member name="T:JCE.Utils.Modes.IdCards.IdCard">
            <summary>
            身份证
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCard.BIRTH_DATE_FORMAT">
            <summary>
            生日日期格式
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCard.CARD_NUMBER_LENGTH">
            <summary>
            18位身份证长度
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCard.OLD_CARD_NUMBER_LENGTH">
            <summary>
            15位身份证长度
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCard.verifier">
            <summary>
            身份证验证器
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCard.SocialNumberPattern">
            <summary>
            身份证格式正则
            </summary>
        </member>
        <member name="M:JCE.Utils.Modes.IdCards.IdCard.#ctor(System.String)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Modes.IdCards.IdCard"/>类型的实例
            </summary>
            <param name="cardNumber">身份证号码</param>
        </member>
        <member name="M:JCE.Utils.Modes.IdCards.IdCard.ExtractBirthDate">
            <summary>
            抽取生日信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.IdCards.IdCard.Validate(System.String)">
            <summary>
            验证身份证号码
            </summary>
            <param name="cardNumber">身份证号码</param>
        </member>
        <member name="M:JCE.Utils.Modes.IdCards.IdCard.Extract">
            <summary>
            抽取信息
            </summary>
        </member>
        <member name="P:JCE.Utils.Modes.IdCards.IdCard.CardNumber">
            <summary>
            身份证号码
            </summary>
        </member>
        <member name="P:JCE.Utils.Modes.IdCards.IdCard.AddressCode">
            <summary>
            地址编码
            </summary>
        </member>
        <member name="P:JCE.Utils.Modes.IdCards.IdCard.BirthDate">
            <summary>
            生日
            </summary>
        </member>
        <member name="P:JCE.Utils.Modes.IdCards.IdCard.Gender">
            <summary>
            性别
            </summary>
        </member>
        <member name="T:JCE.Utils.Modes.IdCards.IdCardVerifier">
            <summary>
            身份证验证器
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCardVerifier.CARD_NUMBER_LENGTH">
            <summary>
            18位身份证长度
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCardVerifier.VERIFY_CODE">
            <summary>
            18位身份证中最后一位校验码
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.IdCards.IdCardVerifier.VERIFY_CODE_WEIGHT">
            <summary>
            18位身份证中，各个数字的生成校验码时的权值
            </summary>
        </member>
        <member name="M:JCE.Utils.Modes.IdCards.IdCardVerifier.CalculateVerifyCode(System.String)">
            <summary>
            计算校验码
            </summary>
            <param name="source">身份证号码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.IdCards.IdCardVerifier.ToNewCardNumber(System.String)">
            <summary>
            将15位身份证号码转换成18位身份证号码<br/>
            15为身份证与18位身份证号码的区别为：<br/>
            1、15位身份证号码中，“出生年份”字段是2位，转换时需要补入“19”，表示20世纪<br/>
            2、15位身份证无最后一位校验码。18位身份证中，校验码根据前17位生成
            </summary>
            <param name="oldCardNumber">15位身份证号码</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Modes.Singleton`1">
            <summary>
            通用单例模式
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:JCE.Utils.Modes.Singleton`1.GetInstance(System.Object[])">
            <summary>
            获取对象实例
            </summary>
            <param name="parameters">参数</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Modes.TimestampId">
            <summary>
            时间戳ID，借鉴雪花算法，生成唯一时间戳ID
            参考文章：http://www.cnblogs.com/rjf1979/p/6282855.html
            </summary>
        </member>
        <member name="M:JCE.Utils.Modes.TimestampId.GetInstance(System.Nullable{System.DateTime})">
            <summary>
            获取单个实例对象
            </summary>
            <param name="initialDateTime">初始化时间，与当前时间做一个相差取时间戳</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.TimestampId.GetId">
            <summary>
            获取唯一时间戳ID
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.TimestampId.Fill(System.Int64)">
            <summary>
            补位填充
            </summary>
            <param name="temp">数字</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.TimestampId.GetUniqueTimeStamp(System.Int64,System.Int64@)">
            <summary>
            获取唯一时间戳
            </summary>
            <param name="lastTimeStamp">最后时间戳</param>
            <param name="temp">临时时间戳</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.TimestampId.GetTimeStamp">
            <summary>
            获取时间戳
            </summary>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Modes.TimestampId.InitialDateTime">
            <summary>
            初始化时间，作用时间戳的相差
            </summary>
        </member>
        <member name="T:JCE.Utils.Modes.Trees.BuildChildrenContext`1">
            <summary>
            构建子树节点上下文
            </summary>
            <typeparam name="T">实体类型</typeparam>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.BuildChildrenContext`1.#ctor(JCE.Utils.Modes.Trees.TreeNode)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Modes.Trees.BuildChildrenContext`1"/>类型的实例
            </summary>
            <param name="tree">树节点</param>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.BuildChildrenContext`1.SetItems``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{``0,System.String})">
            <summary>
            设置节点集合并返回子树节点上下文
            </summary>
            <typeparam name="V">实体类型</typeparam>
            <param name="itemSelector">节点集合选择器</param>
            <param name="textSelect">文本选择器</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.BuildChildrenContext`1.SetRecursiveItems(System.Func{`0,System.Collections.Generic.IEnumerable{`0}},System.Func{`0,System.String})">
            <summary>
            递归设置节点集合并返回子树节点上下文
            </summary>
            <param name="itemSelector">节点集合选择器</param>
            <param name="textSelect">文本选择器</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Modes.Trees.BuildChildrenContext`1.Tree">
            <summary>
            当前树节点
            </summary>
        </member>
        <member name="T:JCE.Utils.Modes.Trees.BuildRootContext">
            <summary>
            生成根树节点上下文
            </summary>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.BuildRootContext.#ctor(JCE.Utils.Modes.Trees.TreeNode)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Modes.Trees.BuildRootContext"/>类型的实例
            </summary>
            <param name="tree">树节点</param>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.BuildRootContext.SetItems``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            设置节点集合并返回子树内容
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="items">节点集合</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Modes.Trees.BuildRootContext.Tree">
            <summary>
            当前树节点
            </summary>
        </member>
        <member name="T:JCE.Utils.Modes.Trees.TreeBuilder">
            <summary>
            树 生成器
            </summary>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeBuilder.Build(System.String)">
            <summary>
            生成根节点
            </summary>
            <param name="text">根节点名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeBuilder.BuildNode``1(``0,System.Func{``0,System.String})">
            <summary>
            生成树节点
            </summary>
            <typeparam name="T">实体类型</typeparam>
            <param name="t">实体</param>
            <param name="textSelect">文本选择器</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Modes.Trees.TreeNode">
            <summary>
            树节点
            参考地址:http://www.cnblogs.com/ldp615/archive/2011/12/09/simple-create-a-complex-tree.html
            </summary>
        </member>
        <member name="F:JCE.Utils.Modes.Trees.TreeNode._children">
            1、构建根节点，传入一个字符串作为根节点的文本
            2、指定树的第一级，必须传入一个集合
            3、指定树的第二级，传入的是条件
            4、调用Tree属性，返回根节点，也就是树
            有限级树
            var tree=TreeBuilder.Build("产品")
                 .SetItems(categories)
                 .SetItems(category=>products.Where(p=>p.Category=category))
                 .Tree;
            无限级树
            var tree=TreeBuilder.Build("员工树")
                 .SetItems(employess.Where(e=>e.ReportsTo==null))
                 .SetRecursiveItems(e=>e.Subordinates)
                 .Tree;
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeNode.#ctor(System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Modes.Trees.TreeNode"/>类型的实例
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeNode.Add(JCE.Utils.Modes.Trees.TreeNode)">
            <summary>
            添加子节点
            </summary>
            <param name="childNode">子树节点</param>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeNode.Remove(JCE.Utils.Modes.Trees.TreeNode)">
            <summary>
            移除子节点
            </summary>
            <param name="childNode">子树节点</param>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeNode.ToString">
            <summary>
            返回树节点为文本
            </summary>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Modes.Trees.TreeNode.Text">
            <summary>
            文本
            </summary>
        </member>
        <member name="P:JCE.Utils.Modes.Trees.TreeNode.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:JCE.Utils.Modes.Trees.TreeNode.Parent">
            <summary>
            父树节点
            </summary>
        </member>
        <member name="P:JCE.Utils.Modes.Trees.TreeNode.Children">
            <summary>
            子树节点集合
            </summary>
        </member>
        <member name="T:JCE.Utils.Modes.Trees.TreeNodeExtensions">
            <summary>
            树节点扩展
            </summary>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeNodeExtensions.GetLeafNodes(JCE.Utils.Modes.Trees.TreeNode)">
            <summary>
            查找所有叶的子节点
            </summary>
            <param name="treeNode">当前树节点</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Modes.Trees.TreeNode`1">
            <summary>
            泛型树节点
            </summary>
            <typeparam name="T">泛型</typeparam>
        </member>
        <member name="M:JCE.Utils.Modes.Trees.TreeNode`1.#ctor(System.String,System.Object)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Modes.Trees.TreeNode`1"/>类型的实例
            </summary>
            <param name="text">文本</param>
            <param name="value">值</param>
        </member>
        <member name="P:JCE.Utils.Modes.Trees.TreeNode`1.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="T:JCE.Utils.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.AnyRadixConvert_CharacterIsNotValid">
            <summary>
              查找类似 参数中的字符\&quot;{0}\&quot;不是 {1} 进制数的有效字符。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.AnyRadixConvert_Overflow">
            <summary>
              查找类似 0 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.Filter_GroupOperateError">
            <summary>
              查找类似 查询条件组中的操作类型错误，只能为And或者Or。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.Filter_RuleFieldInTypeNotFound">
            <summary>
              查找类似 指定的属性“{0}”在类型“{1}”中不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.Logging_CreateLogInstanceReturnNull">
            <summary>
              查找类似 创建名称为“{0}”的日志实例时“{1}”返回空实例。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.Mef_HttpContextItems_NotFoundRequestContainer">
            <summary>
              查找类似 当前Http上下文中不存在Request有效范围的Mef部件容器。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ObjectExtensions_PropertyNameNotExistsInType">
            <summary>
              查找类似 指定对象中不存在名称为“{0}”的属性。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ObjectExtensions_PropertyNameNotFixedType">
            <summary>
              查找类似 指定名称“{0}”的属性类型不是“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_Between">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_BetweenNotEqual">
            <summary>
              查找类似 参数“{0}”的值必须在“{1}”与“{2}”之间，且不能等于“{3}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_DirectoryNotExists">
            <summary>
              查找类似 指定的目录路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_FileNotExists">
            <summary>
              查找类似 指定的文件路径“{0}”不存在。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotEmpty_Guid">
            <summary>
              查找类似 参数“{0}”的值不能为Guid.Empty 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotGreaterThan">
            <summary>
              查找类似 参数“{0}”的值必须大于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotGreaterThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须大于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotLessThan">
            <summary>
              查找类似 参数“{0}”的值必须小于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotLessThanOrEqual">
            <summary>
              查找类似 参数“{0}”的值必须小于或等于“{1}”。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotNull">
            <summary>
              查找类似 参数“{0}”不能为空引用。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotNullOrEmpty_Collection">
            <summary>
              查找类似 参数“{0}”不能为空引用或空集合。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.ParameterCheck_NotNullOrEmpty_String">
            <summary>
              查找类似 参数“{0}”不能为空引用或空字符串。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.Security_DES_KeyLenght">
            <summary>
              查找类似 参数key的长度必须为8或24，当前为{0}。 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.Properties.Resources.Security_RSA_Sign_HashType">
            <summary>
              查找类似 参数hashType必须为MD5或SHA1 的本地化字符串。
            </summary>
        </member>
        <member name="T:JCE.Utils.R">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.ConcurrencyExceptionMessage">
            <summary>
              查找类似 当前操作的数据已被其它人修改，请刷新后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.DataBaseRefrenceError">
            <summary>
              查找类似 对不起，不能删除该记录，因为该记录已经关联了相关数据，请删除相关数据后重试 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.DeleteSuccess">
            <summary>
              查找类似 删除成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.EmailAddressAttribute_Invalid">
            <summary>
              查找类似 电子邮件的格式不正确，请修改 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.InvalidFile">
            <summary>
              查找类似 名为 {0} 的文件无效 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.InvalidMobilePhone">
            <summary>
              查找类似 手机号无效 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.IsEmpty">
            <summary>
              查找类似 不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.PagerOrderIsEmpty">
            <summary>
              查找类似 分页查询必须设置排序字段 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.RememberSave">
            <summary>
              查找类似 进行该操作后，记得保存 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.SaveSuccess">
            <summary>
              查找类似 保存成功 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.SortIdIsNull">
            <summary>
              查找类似 排序号不能为空 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.SystemError">
            <summary>
              查找类似 系统忙，请稍后再试 的本地化字符串。
            </summary>
        </member>
        <member name="P:JCE.Utils.R.TableIsEmpty">
            <summary>
              查找类似 表名必须设置 的本地化字符串。
            </summary>
        </member>
        <member name="T:JCE.Utils.Randoms.Random">
            <summary>
            随机数操作
            </summary>
        </member>
        <member name="F:JCE.Utils.Randoms.Random._random">
            <summary>
            随机数
            </summary>
        </member>
        <member name="M:JCE.Utils.Randoms.Random.#ctor">
            <summary>
            初始化随机数
            </summary>
        </member>
        <member name="M:JCE.Utils.Randoms.Random.#ctor(System.Int32)">
            <summary>
            初始化随机数
            </summary>
            <param name="seed">种子数</param>
        </member>
        <member name="M:JCE.Utils.Randoms.Random.GetInt(System.Int32,System.Int32)">
            <summary>
            获取指定范围的随机整数，该范围包括最小值，但不包括最大值
            </summary>
            <param name="minNum">最小值</param>
            <param name="maxNum">最大值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.Random.GetInt">
            <summary>
            获取随机整数
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.Random.GetDouble">
            <summary>
            获取一个介于0.0和1.0之间的随机数
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.Random.GetSortList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            获取随机排序的集合
            </summary>
            <typeparam name="T">集合元素类型</typeparam>
            <param name="array">集合</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Randoms.RandomBuilder">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="F:JCE.Utils.Randoms.RandomBuilder._random">
            <summary>
            随机数操作
            </summary>
        </member>
        <member name="F:JCE.Utils.Randoms.RandomBuilder.repeat">
            <summary>
            重复数
            </summary>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.#ctor">
            <summary>
            初始化随机数生成器
            </summary>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateString(System.Int32,System.Boolean)">
            <summary>
            生成随机字符串
            </summary>
            <param name="maxLength">最大长度</param>
            <param name="hasUppercase">是否包含大写字母,true:是,false:否</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateString(System.Int32,System.String)">
            <summary>
            生成随机字符串
            </summary>
            <param name="maxLength">最大长度</param>
            <param name="text">随机内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateChinese(System.Int32)">
            <summary>
            生成随机常用汉字
            </summary>
            <param name="maxLength">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateLetters(System.Int32)">
            <summary>
            生成随机字母，不出现汉字和数字
            </summary>
            <param name="maxLength">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateLetters(System.Int32,System.Boolean)">
            <summary>
            生成随机字母，不出现汉字和数字
            </summary>
            <param name="maxLength">最大长度</param>
            <param name="isUppercase">是否大写字母,true:是,false:否</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateBool">
            <summary>
            生成随机布尔值
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateDate(System.Int32,System.Int32)">
            <summary>
            生成随机日期
            </summary>
            <param name="beginYear">起始年份</param>
            <param name="endYear">结束年份</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateInt(System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="maxValue">整数最大值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateInt(System.Int32,System.Int32)">
            <summary>
            生成随机整数
            </summary>
            <param name="minValue">整数最小值</param>
            <param name="maxValue">整数最大值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateEnum``1">
            <summary>
            生成随机枚举
            </summary>
            <typeparam name="T">枚举类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GenerateNumber(System.Int32)">
            <summary>
            生成随机数字
            </summary>
            <param name="maxLength">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.Generate(System.Int32,System.String)">
            <summary>
            生成随机字符串
            </summary>
            <param name="maxLength">最大长度</param>
            <param name="text">随机内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GetLength(System.Int32)">
            <summary>
            获取随机长度
            </summary>
            <param name="maxLength">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Randoms.RandomBuilder.GetRandomChar(System.String)">
            <summary>
            获取随机字符
            </summary>
            <param name="text">随机内容</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Reflection">
            <summary>
            反射操作帮助类
            </summary>
        </member>
        <member name="M:JCE.Utils.Reflection.GetAssembly(System.String)">
            <summary>
            获取程序集
            </summary>
            <param name="assemblyName">程序集名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.GetDescription``1(System.String)">
            <summary>
            获取描述
            </summary>
            <typeparam name="T">类型</typeparam>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.GetDescription(System.Type,System.String)">
            <summary>
            获取描述
            </summary>
            <param name="type">类型</param>
            <param name="memberName">成员名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.GetDescription(System.Reflection.MemberInfo)">
            <summary>
            获取描述
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.CreateInstance``1(System.String,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="className">类名，包括命名空间,如果类型不处于当前执行程序集中，需要包含程序集名，范例：Test.Core.Test2,Test.Core</param>
            <param name="parameters">传递给构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.CreateInstance``1(System.Type,System.Object[])">
            <summary>
            动态创建实例
            </summary>
            <typeparam name="T">目标类型</typeparam>
            <param name="type">类型</param>
            <param name="parameters">传递给构造函数的参数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsBool(System.Reflection.MemberInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsBool(System.Reflection.PropertyInfo)">
            <summary>
            是否布尔类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsEnum(System.Reflection.MemberInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsEnum(System.Reflection.PropertyInfo)">
            <summary>
            是否枚举类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsDate(System.Reflection.MemberInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsDate(System.Reflection.PropertyInfo)">
            <summary>
            是否日期类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsInt(System.Reflection.MemberInfo)">
            <summary>
            是否整型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsInt(System.Reflection.PropertyInfo)">
            <summary>
            是否整型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsNumber(System.Reflection.MemberInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="member">成员</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.IsNumber(System.Reflection.PropertyInfo)">
            <summary>
            是否数值类型
            </summary>
            <param name="property">属性</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.GetByInterface``1(System.Reflection.Assembly)">
            <summary>
            获取实现了接口的所有具体类型
            </summary>
            <typeparam name="T">接口类型</typeparam>
            <param name="assembly">在该程序集中查找</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.GetAssemblies(System.String)">
            <summary>
            从目录中获取所有程序集
            </summary>
            <param name="directoryPath">目录绝对路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Reflection.GetDisplayName``1">
            <summary>
            获取显示名称
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Str">
            <summary>
            字符串操作
            </summary>
            <summary>
            字符串操作 - 工具方法
            </summary>
        </member>
        <member name="M:JCE.Utils.Str.#ctor">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Str"/>类型的实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Str.#ctor(System.Int32)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Str"/>类型的实例
            </summary>
            <param name="length">起始大小</param>
        </member>
        <member name="M:JCE.Utils.Str.Append``1(``0)">
            <summary>
            追加内容
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:JCE.Utils.Str.Append(System.String,System.Object[])">
            <summary>
            追加内容
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:JCE.Utils.Str.AppendLine">
            <summary>
            追加内容并换行
            </summary>
        </member>
        <member name="M:JCE.Utils.Str.AppendLine``1(``0)">
            <summary>
            追加内容并换行
            </summary>
            <typeparam name="T">值类型</typeparam>
            <param name="value">值</param>
        </member>
        <member name="M:JCE.Utils.Str.AppendLine(System.String,System.Object[])">
            <summary>
            追加内容并换行
            </summary>
            <param name="value">值</param>
            <param name="args">参数</param>
        </member>
        <member name="M:JCE.Utils.Str.Replace(System.String)">
            <summary>
            替换内容
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:JCE.Utils.Str.RemoveEnd(System.String)">
            <summary>
            移除末尾字符串
            </summary>
            <param name="end">末尾字符串</param>
        </member>
        <member name="M:JCE.Utils.Str.Clear">
            <summary>
            清空字符串
            </summary>
        </member>
        <member name="M:JCE.Utils.Str.ToString">
            <summary>
            转换为字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.GenerateCode">
            <summary>
            创建一个32位流水号
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.GenerateCodeBy16">
            <summary>
            创建一个16位流水号
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.GetHideMobile(System.String)">
            <summary>
            获取隐藏中间几位后的手机号码
            </summary>
            <param name="mobile">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.GetStringLength(System.String)">
            <summary>
            获取字符串的字节数
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.CutString(System.String,System.Int32)">
            <summary>
            把指定字符串截取成指定长度的子串
            </summary>
            <param name="source">源字符串</param>
            <param name="length">指定长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.CutString(System.String,System.Int32,System.String)">
            <summary>
            把指定字符串截取成指定长度的子串
            </summary>
            <param name="source">源字符串</param>
            <param name="length">指定长度</param>
            <param name="endStr">字符串尾部</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterInputText(System.String)">
            <summary>
            过滤特殊字符与标签（'-.\\;:\%《》* @ >大于 小于）
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterInputUrl(System.String)">
            <summary>
            过滤Url地址特殊字符（'-\\;\>小于 大于《》 ）
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterSqlSpecialChar(System.String)">
            <summary>
            Sql语句特殊字符过滤，防Sql注入
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.ReplaceSqlSpecialChar(System.String)">
            <summary>
            Sql语句特殊字符(%,-,')替换处理，防Sql注入
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.ReplaceXmlSpecialChar(System.String)">
            <summary>
            替换Xml的特殊字符
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.ReplaceJsSpecialChar(System.String)">
            <summary>
            替换Js的特殊字符
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.Filter``1(``0)">
            <summary>
            过滤对象中string类型的参数的Html标签
            </summary>
            <typeparam name="T">对象类型</typeparam>
            <param name="t">实体</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterA(System.String)">
            <summary>
            过滤a标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterDiv(System.String)">
            <summary>
            过滤div标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterFont(System.String)">
            <summary>
            过滤font标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterImg(System.String)">
            <summary>
            过滤img标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterSpan(System.String)">
            <summary>
            过滤span标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterObject(System.String)">
            <summary>
            过滤object标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterScript(System.String)">
            <summary>
            过滤JavaScript标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterIFrame(System.String)">
            <summary>
            过滤IFrame标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterStyle(System.String)">
            <summary>
            过滤style样式标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterTableProperty(System.String)">
            <summary>
            过滤table、tr、td标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.SuperiorHtml(System.String,System.String)">
            <summary>
            字符串根据传入的正则表达式进行过滤
            </summary>
            <param name="source">源字符串</param>
            <param name="pattern">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterEscapeChar(System.String)">
            <summary>
            过滤转义字符(..)Html标签
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterHtmlTags(System.String)">
            <summary>
            过滤所有Html标签，忽略尖括号
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.FilterAllHtmlTags(System.String)">
            <summary>
            过滤Html的所有标签，带有尖括号均过滤
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.NormalFilter(System.String)">
            <summary>
            一般过滤，过滤Sql的危险，同时过滤xml、script
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.HeightFilter(System.String)">
            <summary>
            高度过滤，过滤所有的危险，如果带有富文本文档则不适用
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.BubbleSort(System.String[])">
            <summary>
            冒泡排序
            </summary>
            <param name="source">源数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.MockInt(System.Int32,System.DateTime,System.DateTime,System.Int32,System.Int32)">
            <summary>
            模拟虚拟数据，可以到小时返回一个模拟后的结果整数
            </summary>
            <param name="realInt">原始值</param>
            <param name="beginTime">开始模拟的时间</param>
            <param name="endTime">截止日期</param>
            <param name="key">定义k值，2~20</param>
            <param name="seed">种子数，可以是一个对象的ID</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.HtmlToText(System.String)">
            <summary>
            Html转换成Text
            </summary>
            <param name="source">源字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.PinYin(System.String)">
            <summary>
            获取汉字的拼音简码，即首字母缩写，范例：中国，返回zg
            </summary>
            <param name="chineseText">汉字文本,范例： 中国</param>
            <returns>首字母缩写</returns>
        </member>
        <member name="M:JCE.Utils.Str.ResolvePinYin(System.Char)">
            <summary>
            解析单个汉字的拼音简码
            </summary>
            <param name="text">单个汉字</param>
            <returns>拼音简码</returns>
        </member>
        <member name="M:JCE.Utils.Str.ResolvePinYinByCode(System.UInt16)">
            <summary>
            使用字符编码方式获取拼音简码
            </summary>
            <param name="unicode">字符编码</param>
            <returns>拼音简码</returns>
        </member>
        <member name="M:JCE.Utils.Str.ResolvePinYinByFile(System.String)">
            <summary>
            从拼音简码文件获取
            </summary>
            <param name="text">单个汉字</param>
            <returns>汉字首字母</returns>
        </member>
        <member name="M:JCE.Utils.Str.ConvertPinYin(System.String)">
            <summary>
            获取汉字的全拼，范例：中国，返回zhongguo
            </summary>
            <param name="text">汉字文本，范例：中国</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.Distinct(System.String)">
            <summary>
            去除重复
            </summary>
            <param name="value">值，范例1："5555",返回"5",范例2："4545",返回"45"</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.Truncate(System.String,System.Int32,System.Int32,System.String)">
            <summary>
            截断字符串
            </summary>
            <param name="text">文本</param>
            <param name="length">返回长度</param>
            <param name="endCharCount">添加结束符号的个数，默认0，不添加</param>
            <param name="endChar">结束符号，默认为省略号</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.GetEndString(System.Int32,System.String)">
            <summary>
            获取结束字符串
            </summary>
            <param name="endCharCount">结束符号的个数</param>
            <param name="endChar">结束符号</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.ToSimplifiedChinese(System.String)">
            <summary>
            转换为简体中文
            </summary>
            <param name="text">繁体中文</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.ToTraditionalChinese(System.String)">
            <summary>
            转换为繁体中文
            </summary>
            <param name="text">简体中文</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Str.GetLastProperty(System.String)">
            <summary>
            获取最后一个属性
            </summary>
            <param name="propertyName">属性名，范例，A.B.C,返回"C"</param>
        </member>
        <member name="P:JCE.Utils.Str.Builder">
            <summary>
            字符串生成器
            </summary>
        </member>
        <member name="P:JCE.Utils.Str.Length">
            <summary>
            字符串长度
            </summary>
        </member>
        <member name="P:JCE.Utils.Str.Empty">
            <summary>
            空字符串
            </summary>
        </member>
        <member name="T:JCE.Utils.Strings.StringCompute">
            <summary>
            字符串对比
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._arrChar1">
            <summary>
            字符串1
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._arrChar2">
            <summary>
            字符串2
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._beginTime">
            <summary>
            开始时间
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._endTime">
            <summary>
            结束时间
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._computeTimes">
            <summary>
            计算次数
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._matrix">
            <summary>
            算法矩阵
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._column">
            <summary>
            矩阵列数
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._row">
            <summary>
            矩阵行数
            </summary>
        </member>
        <member name="F:JCE.Utils.Strings.StringCompute._result">
            <summary>
            对比结果
            </summary>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.#ctor">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Strings.StringCompute"/>类型的实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.#ctor(System.String,System.String)">
            <summary>
            初始化一个<see cref="T:JCE.Utils.Strings.StringCompute"/>类型的实例
            </summary>
            <param name="strOne">字符串1</param>
            <param name="strTwo">字符串2</param>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.Compute">
            <summary>
            计算相似度
            </summary>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.Compute(System.String,System.String)">
            <summary>
            计算相似度
            </summary>
            <param name="strOne">字符串1</param>
            <param name="strTwo">字符串2</param>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.SpeedyCompute">
            <summary>
            计算相似度(不记录比较时间)
            </summary>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.SpeedyCompute(System.String,System.String)">
            <summary>
            计算相似度(不记录比较时间)
            </summary>
            <param name="strOne">字符串1</param>
            <param name="strTwo">字符串2</param>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.StringComputeInit(System.String,System.String)">
            <summary>
            初始化算法基本信息
            </summary>
            <param name="strOne">字符串1</param>
            <param name="strTwo">字符串2</param>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.InitMatrix">
            <summary>
            初始化矩阵的第一行和第一列
            </summary>
        </member>
        <member name="M:JCE.Utils.Strings.StringCompute.Minimun(System.Int32,System.Int32,System.Int32)">
            <summary>
            获取三个数中的最小值
            </summary>
            <param name="first">值1</param>
            <param name="second">值2</param>
            <param name="third">值3</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Strings.StringCompute.ComputeResult">
            <summary>
            对比结果
            </summary>
        </member>
        <member name="T:JCE.Utils.Strings.StringComputeResult">
            <summary>
            字符串对比计算结果
            </summary>
        </member>
        <member name="P:JCE.Utils.Strings.StringComputeResult.Rate">
            <summary>
            相似度
            </summary>
        </member>
        <member name="P:JCE.Utils.Strings.StringComputeResult.ComputeTimes">
            <summary>
            对比次数
            </summary>
        </member>
        <member name="P:JCE.Utils.Strings.StringComputeResult.UserTime">
            <summary>
            使用时间
            </summary>
        </member>
        <member name="P:JCE.Utils.Strings.StringComputeResult.Difference">
            <summary>
            差异
            </summary>
        </member>
        <member name="T:JCE.Utils.Strings.WebCrawlerUtil">
            <summary>
            网页爬虫工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.ClearTag(System.String)">
            <summary>
            清除Html标签
            </summary>
            <param name="html">html内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.ClearTag(System.String,System.String)">
            <summary>
            清除Hmtl标签
            </summary>
            <param name="html">html内容</param>
            <param name="reg">正则表达式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.ConvertToJs(System.String)">
            <summary>
            将html内容转换成js输出
            </summary>
            <param name="html">html内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.ReplaceSpace(System.String)">
            <summary>
            替换空格
            </summary>
            <param name="html">html内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.StringToHtml(System.String)">
            <summary>
            普通字符串转换成html字符串
            </summary>
            <param name="str">字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.TruncateToHtml(System.String,System.Int32)">
            <summary>
            截断长度并转换为Html
            </summary>
            <param name="content">字符串</param>
            <param name="length">截取长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.DelHtmlString(System.String)">
            <summary>
            删除所有的Html标记
            </summary>
            <param name="html">html内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.DelTag(System.String,System.String,System.Boolean)">
            <summary>
            删除指定Html标签
            </summary>
            <param name="html">html内容</param>
            <param name="tag">html标签</param>
            <param name="isContent">是否清除内容</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Strings.WebCrawlerUtil.DelTagArray(System.String,System.String,System.Boolean)">
            <summary>
            删除指定Html标签数组
            </summary>
            <param name="html">html内容</param>
            <param name="tag">html标签数组,使用','号分割</param>
            <param name="isContent">是否清除内容</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Sys">
            <summary>
            系统操作
            </summary>
        </member>
        <member name="M:JCE.Utils.Sys.GetType``1">
            <summary>
            获取类型,对可空类型进行处理
            </summary>
            <typeparam name="T">类型</typeparam>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Sys.GetPhysicalPath(System.String)">
            <summary>
            获取物理路径
            </summary>
            <param name="relativePath">相对路径</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Sys.StartProcess(System.String)">
            <summary>
            启动进程
            </summary>
            <param name="processName">进程名称</param>
        </member>
        <member name="M:JCE.Utils.Sys.Clone``1(``0)">
            <summary>
            使用序列化机制克隆一个对象
            </summary>
            <typeparam name="T">原始对象的类名</typeparam>
            <param name="instance">原始对象实例</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Sys.GetMethodName(System.Int32)">
            <summary>
            获取指定调用层级的方法名
            </summary>
            <param name="level">调用层级</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Sys.Line">
            <summary>
            换行符
            </summary>
        </member>
        <member name="P:JCE.Utils.Sys.Guid">
            <summary>
            全局唯一标识符
            </summary>
        </member>
        <member name="P:JCE.Utils.Sys.CurrentAppDomain">
            <summary>
            获取当前应用程序域
            </summary>
        </member>
        <member name="T:JCE.Utils.Common.TimeUtil">
            <summary>
            时间操作工具类
            </summary>
        </member>
        <member name="F:JCE.Utils.Common.TimeUtil._dateTime">
            <summary>
            日期
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.SetTime(System.Nullable{System.DateTime})">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.SetTime(System.String)">
            <summary>
            设置时间
            </summary>
            <param name="dateTime">时间</param>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.Reset">
            <summary>
            重置时间
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.GetDateTime">
            <summary>
            获取当前日期时间
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.GetDate">
            <summary>
            获取当前日期,不带时间
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.GetUnixTimestamp">
            <summary>
            获取Unix时间戳
            </summary>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.GetUnixTimestamp(System.DateTime)">
            <summary>
            获取Unix时间戳
            </summary>
            <param name="time">时间</param>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.GetTimeFromUnixTimestamp(System.Int64)">
            <summary>
            从Unix时间戳获取时间
            </summary>
            <param name="timestamp">Unix时间戳</param>
        </member>
        <member name="M:JCE.Utils.Common.TimeUtil.Format(System.TimeSpan)">
            <summary>
            格式化时间间隔
            </summary>
            <param name="span">时间间隔</param>
        </member>
        <member name="T:JCE.Utils.Valid">
            <summary>
            验证
            </summary>
        </member>
        <member name="M:JCE.Utils.Valid.IsEmail(System.String,System.Boolean)">
            <summary>
            是否邮箱
            </summary>
            <param name="value">邮箱地址</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.HasEmail(System.String,System.Boolean)">
            <summary>
            是否存在邮箱
            </summary>
            <param name="value">值</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsPhoneNumber(System.String)">
            <summary>
            是否合法的手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsMobileNumberSimple(System.String,System.Boolean)">
            <summary>
            是否手机号码
            </summary>
            <param name="value">手机号码</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsMobileNumber(System.String)">
            <summary>
            是否手机号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.HasMobileNumberSimple(System.String,System.Boolean)">
            <summary>
            是否存在手机号码
            </summary>
            <param name="value">值</param>
            <param name="isRestrict">是否按严格模式验证</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsChinaMobilePhone(System.String)">
            <summary>
            是否中国移动号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsChinaUnicomPhone(System.String)">
            <summary>
            是否中国联通号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsChinaTelecomPhone(System.String)">
            <summary>
            是否中国电信号码
            </summary>
            <param name="value">手机号码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsIdCard(System.String)">
            <summary>
            是否身份证号码
            </summary>
            <param name="value">身份证</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsBase64String(System.String)">
            <summary>
            是否Base64编码
            </summary>
            <param name="value">Base64字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDate(System.String,System.Boolean)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="isRegex">是否正则验证</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDate(System.String,System.String)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="format">格式化字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDate(System.String,System.String,System.IFormatProvider,System.Globalization.DateTimeStyles)">
            <summary>
            是否日期
            </summary>
            <param name="value">日期字符串</param>
            <param name="format">格式化字符串</param>
            <param name="provider">格式化提供者</param>
            <param name="styles">日期格式</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDateTimeMin(System.String,System.DateTime)">
            <summary>
            是否大于最小时间
            </summary>
            <param name="value">时间</param>
            <param name="min">最小时间</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDateTimeMax(System.String,System.DateTime)">
            <summary>
            是否小于最大时间
            </summary>
            <param name="value">时间</param>
            <param name="max">最大时间</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsGuid(System.String)">
            <summary>
            是否Guid
            </summary>
            <param name="guid">Guid字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsUrl(System.String)">
            <summary>
            是否Url地址（统一资源定位）
            </summary>
            <param name="value">url地址</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsUri(System.String)">
            <summary>
            是否Uri（统一资源标识）
            </summary>
            <param name="value">uri</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsMac(System.String)">
            <summary>
            是否Mac地址
            </summary>
            <param name="value">Mac地址</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsPositiveInteger(System.String)">
            <summary>
            是否大于0的正整数
            </summary>
            <param name="value">正整数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsInt32(System.String)">
            <summary>
            是否Int32类型
            </summary>
            <param name="value">整数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDouble(System.String)">
            <summary>
            是否Double类型
            </summary>
            <param name="value">小数</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDouble(System.String,System.Double,System.Double,System.Int32)">
            <summary>
            是否Double类型
            </summary>
            <param name="value">小数</param>
            <param name="minValue">最小值</param>
            <param name="maxValue">最大值</param>
            <param name="digit">小数位数，如果是0则不检测</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsPasswordOne(System.String)">
            <summary>
            是否密码One的格式，6-25位包含特殊字符
            </summary>
            <param name="value">密码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsPasswordOne(System.String,System.Int32,System.Int32)">
            <summary>
            是否密码One的格式，指定密码长度，包含特殊字符
            </summary>
            <param name="value">密码</param>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsPasswordTwo(System.String)">
            <summary>
            是否密码Two的格式，6-25位包含特殊字符
            </summary>
            <param name="value">密码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsLoginName(System.String)">
            <summary>
            是否登录账号，6-30位长度
            </summary>
            <param name="value">登录账号</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsLoginName(System.String,System.Int32,System.Int32)">
            <summary>
            是否登录账号
            </summary>
            <param name="value">登录账号</param>
            <param name="min">最小长度</param>
            <param name="max">最大长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsBandCard(System.String)">
            <summary>
            是否银行卡号，16位或19位银行卡（简单校验）
            </summary>
            <param name="value">银行卡号</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsSafeSqlString(System.String)">
            <summary>
            是否安全Sql语句
            </summary>
            <param name="value">sql语句</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsVersion(System.String,System.Int32)">
            <summary>
            是否有效版本号，范例：1.3,1.1.5,1.25.256
            </summary>
            <param name="value">版本号</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsChinese(System.String)">
            <summary>
            是否中文
            </summary>
            <param name="value">中文</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsContainsChinese(System.String)">
            <summary>
            是否包含中文
            </summary>
            <param name="value">中文</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsContainsNumber(System.String)">
            <summary>
            是否包含数字
            </summary>
            <param name="value">数字</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsMainDomain(System.String)">
            <summary>
            是否主域名或者www开头的域名
            </summary>
            <param name="value">url地址</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsMobileUser(System.Web.HttpContext)">
            <summary>
            是否手机用户
            </summary>
            <param name="context">上下文</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsIpAddress(System.String)">
            <summary>
            是否IP地址
            </summary>
            <param name="value">ip地址</param>
            <returns>结果</returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsInteger(System.String)">
            <summary>
            是否整数
            </summary>
            <param name="value">值</param>
            <returns>结果</returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsUnicode(System.String)">
            <summary>
            是否Unicode字符串
            </summary>
            <param name="value">unicode字符串</param>
            <returns>结果</returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsLengthStr(System.String,System.Int32,System.Int32)">
            <summary>
            字符串长度是否在指定范围内，一个中文为2个字符
            </summary>
            <param name="value">字符串</param>
            <param name="begin">开始</param>
            <param name="end">结束</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsTel(System.String)">
            <summary>
            是否中国电话，格式：010-85849685
            </summary>
            <param name="value">电话</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsPostalCode(System.String)">
            <summary>
            是否邮政编码，6位数字
            </summary>
            <param name="value">邮政编码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsNormalChar(System.String)">
            <summary>
            是否正常字符，字母、数字、下划线的组合
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsPostfix(System.String,System.String[])">
            <summary>
            是否指定后缀
            </summary>
            <param name="value">字符串</param>
            <param name="postfixs">后缀名数组</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsDecimal(System.String)">
            <summary>
            是否数字型
            </summary>
            <param name="value">数字</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsBase64(System.String)">
            <summary>
            是否Base64字符串
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsRepeat(System.String)">
            <summary>
            是否重复，范例：112,返回true
            </summary>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Valid.IsQQ(System.String)">
            <summary>
            是否合法QQ号码
            </summary>
            <param name="value">QQ号码</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Validations.SqlValidateUtil">
            <summary>
            Sql注入检测工具类
            </summary>
        </member>
        <member name="F:JCE.Utils.Validations.SqlValidateUtil.StrKeyWord">
            <summary>
            sql关键字
            </summary>
        </member>
        <member name="F:JCE.Utils.Validations.SqlValidateUtil.StrRegex">
            <summary>
            sql特殊字符
            </summary>
        </member>
        <member name="M:JCE.Utils.Validations.SqlValidateUtil.CheckRequestQuery(System.Web.HttpRequest)">
            <summary>
            检查Url参数中是否带有sql注入关键字，返回true无注入信息（即验证成功）
            </summary>
            <param name="request">当前HttpRequest对象</param>
            <returns>true:不存在sql关键字,false:存在sql关键字</returns>
        </member>
        <member name="M:JCE.Utils.Validations.SqlValidateUtil.CheckRequetForm(System.Web.HttpRequest)">
            <summary>
            检查提交表单中是否存在sql注入关键字，返回true无注入信息（即验证成功）
            </summary>
            <param name="request">当前HttpRequest对象</param>
            <returns>true:不存在sql关键字,false:存在sql关键字</returns>
        </member>
        <member name="M:JCE.Utils.Validations.SqlValidateUtil.CheckKeyWord(System.String)">
            <summary>
            检查keyword是否包含sql关键字，返回true无注入信息（即验证成功）
            </summary>
            <param name="keyword">被检查的字符串</param>
            <returns>true:不存在sql关键字,false:存在sql关键字</returns>
        </member>
        <member name="M:JCE.Utils.Validations.SqlValidateUtil.CheckKeyWordForParams(System.String[])">
            <summary>
            检查keywords是否包含sql关键字，返回true无注入信息（即验证成功）
            </summary>
            <param name="keywords">被检查的字符串</param>
            <returns>true:不存在sql关键字,false:存在sql关键字</returns>
        </member>
        <member name="M:JCE.Utils.Validations.SqlValidateUtil.CheckKeyWordForDictionary(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            检查字典是否包含sql关键字，返回true无注入信息（即验证成功）
            </summary>
            <param name="dic">被检查的字典</param>
            <returns>true:不存在sql关键字,false:存在sql关键字</returns>
        </member>
        <member name="M:JCE.Utils.Validations.SqlValidateUtil.CheckMessage">
            <summary>
            检查HttpRequest是否存在sql注入，返回true无注入信息（即验证成功）
            </summary>
            <returns>true:不存在sql关键字,false:存在sql关键字</returns>
        </member>
        <member name="T:JCE.Utils.VerifyCodes.IVerifyCode">
            <summary>
            验证码
            </summary>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.IVerifyCode.OutputImage">
            <summary>
            输出验证码图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.IVerifyCode.OutputImage(System.Web.HttpResponse)">
            <summary>
            输出验证码图片
            </summary>
            <param name="response">Http响应实例</param>
            <returns>输出是否成功</returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.IVerifyCode.GetQuestion(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取问题
            </summary>
            <param name="questionList">默认数字加减验证</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.Length">
            <summary>
            验证码长度
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.VerifyCodeText">
            <summary>
            验证码字符串
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.HasLowerLetter">
            <summary>
            是否包含小写字母
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.HasUpperLetter">
            <summary>
            是否包含大写字母
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.HasChineseCharacter">
            <summary>
            是否包含汉字
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.HasNumber">
            <summary>
            是否包含数字
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.FontSize">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.FontColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.BackgroundColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.FontFamily">
            <summary>
            字体类型
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.IsRandomColor">
            <summary>
            是否随机颜色
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.ForeNoisePointCount">
            <summary>
            前景噪点数量
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.IVerifyCode.RandomAngle">
            <summary>
            随机码的旋转角度
            </summary>
        </member>
        <member name="T:JCE.Utils.VerifyCodes.VerifyCodeBase">
            <summary>
            验证码基类
            </summary>
        </member>
        <member name="F:JCE.Utils.VerifyCodes.VerifyCodeBase.RandomBuilder">
            <summary>
            随机数生成器
            </summary>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.#ctor">
            <summary>
            初始化一个<see cref="T:JCE.Utils.VerifyCodes.VerifyCodeBase"/>类型的实例
            </summary>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.OutputImage">
            <summary>
            输出验证码图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.OutputImage(System.Web.HttpResponse)">
            <summary>
            输出验证码图片
            </summary>
            <param name="response">Http响应实例</param>
            <returns>输出是否成功</returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.GetQuestion(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            获取问题
            </summary>
            <param name="questionList">默认数字加减验证</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.GetVerifyCodeText">
            <summary>
            获取验证码字符串
            </summary>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.GetVerifyCodeImage">
            <summary>
            获取验证码图片
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.AddForeNoisePoint(System.Drawing.Bitmap)">
            <summary>
            添加前景噪点
            </summary>
            <param name="bitmap">位图</param>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.AddBackgroundNoisePoint(System.Drawing.Bitmap,System.Drawing.Graphics)">
            <summary>
            添加背景噪点
            </summary>
            <param name="bitmap">位图</param>
            <param name="graphics">画图工具</param>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.GetRandomColor">
            <summary>
            获取随机颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeBase.GetQuestionDic(System.Int32)">
            <summary>
            获取问题字典
            </summary>
            <param name="maxLength">最大问题长度</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.ImgWidth">
            <summary>
            图片长度
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.ImgHeight">
            <summary>
            图片高度
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.Length">
            <summary>
            验证码长度
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.VerifyCodeText">
            <summary>
            验证码字符串
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.HasLowerLetter">
            <summary>
            是否包含小写字母
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.HasUpperLetter">
            <summary>
            是否包含大写字母
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.HasChineseCharacter">
            <summary>
            是否包含汉字
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.HasNumber">
            <summary>
            是否包含数字
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.FontSize">
            <summary>
            字体大小
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.FontColor">
            <summary>
            字体颜色
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.BackgroundColor">
            <summary>
            背景色
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.FontFamily">
            <summary>
            字体类型
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.IsRandomColor">
            <summary>
            是否随机颜色
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.ForeNoisePointCount">
            <summary>
            前景噪点数量
            </summary>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeBase.RandomAngle">
            <summary>
            随机码的旋转角度
            </summary>
        </member>
        <member name="T:JCE.Utils.VerifyCodes.VerifyCodeUtil">
            <summary>
            验证码操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeUtil.GetLength(System.Int32)">
            <summary>
            判断长度是否合适，如何不合适，则以最大和最小长度进行约束
            </summary>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeUtil.GetRandomSeed">
            <summary>
            生成随机数的种子 
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeUtil.GetOnlyNumber(System.Int32)">
            <summary>
            生成纯数字的随机验证码，根据指定长度
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeUtil.GetOnlyLowLetters(System.Int32)">
            <summary>
            获取纯小写字母的验证码，根据指定长度
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeUtil.GetNumberLow(System.Int32)">
            <summary>
            获取数字+小写字母验证码，根据指定长度
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.VerifyCodes.VerifyCodeUtil.GetAllFixd(System.Int32)">
            <summary>
            生成大小写字母+数字的随机验证码，根据指定长度
            </summary>
            <param name="length">验证码长度</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.VerifyCodes.VerifyCodeUtil.Instance">
            <summary>
            验证码生成帮助类实例
            </summary>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Webs.BrowserUtil">
            <summary>
            浏览器工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Webs.BrowserUtil.OpenChrome(System.String)">
            <summary>
            调用Chorem浏览器打开网页
            </summary>
            <param name="url">打开网页的链接</param>
        </member>
        <member name="M:JCE.Utils.Webs.BrowserUtil.OpenIE(System.String)">
            <summary>
            调用IE浏览器打开网页
            </summary>
            <param name="url">打开网页的链接</param>
        </member>
        <member name="M:JCE.Utils.Webs.BrowserUtil.OpenDefaultBrowserUrl(System.String)">
            <summary>
            调用系统默认浏览器打开网页（用户自己设置的默认浏览器）
            </summary>
            <param name="url">打开网页的链接</param>
        </member>
        <member name="M:JCE.Utils.Webs.BrowserUtil.OpenFireFox(System.String)">
            <summary>
            调用火狐浏览器打开网页
            </summary>
            <param name="url">打开网页的链接</param>
        </member>
        <member name="T:JCE.Utils.Webs.CookieUtil">
            <summary>
            Cookies工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Webs.CookieUtil.Set(System.String,System.String,System.Nullable{System.DateTime})">
            <summary>
            设置Cookie
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="exp">过期时间</param>
        </member>
        <member name="M:JCE.Utils.Webs.CookieUtil.SetAuto(System.String,System.String)">
            <summary>
            设置Cookie，该Cookie在浏览器关闭时，自动清除
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
        </member>
        <member name="M:JCE.Utils.Webs.CookieUtil.Set(System.String,System.String,System.Nullable{System.DateTime},System.String,System.String,System.Boolean)">
            <summary>
            设置Cookie
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <param name="exp">过期时间</param>
            <param name="domain">Cookie域</param>
            <param name="path">虚拟路径</param>
            <param name="urlEncode">是否以UrlEncode进行转码</param>
        </member>
        <member name="M:JCE.Utils.Webs.CookieUtil.Get(System.String)">
            <summary>
            读取Cookie
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.CookieUtil.Remove(System.String)">
            <summary>
            删除指定Cookie，根据key删除某个Cookie的值
            </summary>
            <param name="key">键</param>
        </member>
        <member name="M:JCE.Utils.Webs.CookieUtil.Clear">
            <summary>
            清除Cookie，将Cookie的时间都变成过期
            </summary>
        </member>
        <member name="M:JCE.Utils.Webs.CookieUtil.GetAll(System.Net.CookieContainer)">
            <summary>
            获取全部Cookie集合
            </summary>
            <param name="cc">Cookie容器</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Webs.NetUtil">
            <summary>
            网络操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Webs.NetUtil.GetWebClientIp">
            <summary>
            获取Web客户端的IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.NetUtil.GetWebRemoteIp">
            <summary>
            获取Web远程IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.NetUtil.GetLanIp">
            <summary>
            获取局域网IP
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.NetUtil.GetHostAddresses(System.String)">
            <summary>
            获取指定url地址IP信息
            </summary>
            <param name="url">url地址</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.NetUtil.GetWebClientHostName">
            <summary>
            获取Web客户端主机名
            </summary>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Webs.NetUtil.Ip">
            <summary>
            获取IP地址
            </summary>
        </member>
        <member name="P:JCE.Utils.Webs.NetUtil.Host">
            <summary>
            获取主机名
            </summary>
        </member>
        <member name="P:JCE.Utils.Webs.NetUtil.Browser">
            <summary>
            获取浏览器信息
            </summary>
        </member>
        <member name="T:JCE.Utils.Webs.SessionUtil">
            <summary>
            Session工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Set``1(System.String,``0)">
            <summary>
            设置Session
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>
            <param name="value">Session的键值</param>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Set(System.String,System.String)">
            <summary>
            设置Session
            </summary>
            <param name="key">Session的键名</param>
            <param name="value">Session的键值</param>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Set(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            设置Session,并调整有效期为分钟或年
            </summary>
            <param name="key">Session的键名</param>
            <param name="value">Session的键值</param>
            <param name="expires">分钟数,大于0则以分钟数为有效期，等于0则以后面的年为有效期</param>
            <param name="year">年数,当分钟数为0时按年数为有效期，当分钟数大于0时此参数随意设置</param>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Set``1(System.String,``0,System.Int32,System.Int32)">
            <summary>
            设置Session,并调整有效期为分钟或年
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>
            <param name="value">Session的键值</param>
            <param name="expires">分钟数,大于0则以分钟数为有效期，等于0则以后面的年为有效期</param>
            <param name="year">年数,当分钟数为0时按年数为有效期，当分钟数大于0时此参数随意设置</param>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Set``1(System.String,``0[])">
            <summary>
            设置Session
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>
            <param name="values">Session的键值</param>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Set``1(System.String,``0[],System.Int32)">
            <summary>
            设置Session
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>
            <param name="values">Session的键值</param>
            <param name="expires">分钟数,大于0则以分钟数为有效期</param>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Get``1(System.String)">
            <summary>
            读取Session的值
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Get(System.String)">
            <summary>
            读取Session的值
            </summary>
            <param name="key">Session的键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Gets``1(System.String)">
            <summary>
            读取Session对象值数组
            </summary>
            <typeparam name="T">Session键值的类型</typeparam>
            <param name="key">Session的键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Gets(System.String)">
            <summary>
            读取Session对象值数组
            </summary>
            <param name="key">Session的键名</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Remove(System.String)">
            <summary>
            删除指定Session
            </summary>
            <param name="key">Session的键名</param>
        </member>
        <member name="M:JCE.Utils.Webs.SessionUtil.Clear">
            <summary>
            清空所有Session
            </summary>
        </member>
        <member name="T:JCE.Utils.Webs.ShortenUrl">
            <summary>
            网址缩短工具
            参考地址:http://www.cnblogs.com/xmlnode/p/4544302.html
            </summary>
        </member>
        <member name="F:JCE.Utils.Webs.ShortenUrl.Seq">
            <summary>
            随机序列
            </summary>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.AddUrl(System.String[])">
            <summary>
            批量添加网址，按顺序返回Key。如果输入的一组网址中有不合法的元素，则返回数组的相同位置（下标）的元素将为空
            </summary>
            <param name="urls">网址</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.ParseUrl(System.String[])">
            <summary>
            批量解析Key，按顺序返回一组长网址。
            </summary>
            <param name="keys">需要解析的key</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.Mixup(System.Int64)">
            <summary>
            混淆Id为字符串
            </summary>
            <param name="id">Id</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.UnMixup(System.String)">
            <summary>
            解析混淆字符串
            </summary>
            <param name="key">混淆字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.Convert(System.Int64)">
            <summary>
            将10进制转换为62进制
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.Convert(System.String)">
            <summary>
            将62进制转换为10进制
            </summary>
            <param name="num"></param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.GenerateKeys">
            <summary>
            生成随机的0-9a-zA-Z字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.ShortenUrl.GetRnd(System.Random)">
            <summary>
            返回随机递增步长
            </summary>
            <param name="seekRand">随机数</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Webs.ShortenUrl.DataFile">
            <summary>
            数据文件路径
            </summary>
        </member>
        <member name="P:JCE.Utils.Webs.ShortenUrl.IndexFile">
            <summary>
            索引文件路径
            </summary>
        </member>
        <member name="T:JCE.Utils.Webs.UrlUtil">
            <summary>
            Url工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.ResolveUrl(System.String)">
            <summary>
            解析相对Url
            </summary>
            <param name="relativeUrl">相对Url</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.HtmlEncode(System.String)">
            <summary>
            对html字符串进行编码
            </summary>
            <param name="html">html字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.UrlEncode(System.String,System.Boolean)">
            <summary>
            对Url进行编码
            </summary>
            <param name="url">Url地址</param>
            <param name="isUpper">编码字符是否需要大写，范例，"http://"转成"http%3A%2F%2F"</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.UrlEncode(System.String,System.Text.Encoding,System.Boolean)">
            <summary>
            对Url进行编码
            </summary>
            <param name="url">Url地址</param>
            <param name="encoding">字符编码</param>
            <param name="isUpper">编码字符是否需要大写，范例，"http://"转成"http%3A%2F%2F"</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.GetUpperEncode(System.String)">
            <summary>
            获取大写编码字符串
            </summary>
            <param name="encode">需要大写的编码字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.UrlDecode(System.String)">
            <summary>
            对Url进行解码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码
            </summary>
            <param name="url">url地址</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.UrlDecode(System.String,System.Text.Encoding)">
            <summary>
            对Url进行解码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码
            </summary>
            <param name="url">url地址</param>
            <param name="encoding">字符编码,对于javascript的encodeURIComponent函数编码参数,应使用utf-8字符编码来解码</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.Base64Encrypt(System.String)">
            <summary>
            对Url进行Base64编码
            </summary>
            <param name="url">url</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.Base64Decrypt(System.String)">
            <summary>
            对Url进行Base64解码
            </summary>
            <param name="url">url</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.AddParam(System.String,System.String,System.String)">
            <summary>
            添加Url参数
            </summary>
            <param name="url">Url地址</param>
            <param name="paramName">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.UpdateParam(System.String,System.String,System.String)">
            <summary>
            更新Url参数
            </summary>
            <param name="url">Url地址</param>
            <param name="paramName">参数名</param>
            <param name="value">参数值</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.GetDomain(System.String,System.String@,System.String@)">
            <summary>
            获取域名信息
            </summary>
            <param name="fromUrl">来源Url</param>
            <param name="domain">域名</param>
            <param name="subDomain">子域名</param>
        </member>
        <member name="M:JCE.Utils.Webs.UrlUtil.ParseUrl(System.String,System.String@,System.Collections.Specialized.NameValueCollection@)">
            <summary>
            解析Url的参数信息
            </summary>
            <param name="url">url地址</param>
            <param name="baseUrl">基础url</param>
            <param name="list">参数集合</param>
        </member>
        <member name="P:JCE.Utils.Webs.UrlUtil.Host">
            <summary>
            获取主机名，即域名，
            范例：用户输入网址http://www.a.com/b.htm?a=1&amp;b=2，
            返回值为：www.a.com
            </summary>
        </member>
        <member name="T:JCE.Utils.Windows.CmdUtil">
            <summary>
            Dos cmd命令执行工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.CmdUtil.Run(System.String)">
            <summary>
            运行Dos命令
            </summary>
            <param name="command">命令</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.CmdUtil.Run(System.String,System.String)">
            <summary>
            运行进程
            </summary>
            <param name="exe">执行程序路径</param>
            <param name="command">命令</param>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Windows.RegistryBaseKey">
            <summary>
            注册表基项域
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.RegistryBaseKey.ClassesRoot">
            <summary>
            对应于HKEY_CLASSES_ROOT主键
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.RegistryBaseKey.CurrentUser">
            <summary>
            对应于HKEY_CURRENT_USER主键
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.RegistryBaseKey.LocalMachine">
            <summary>
            对应于HKEY_LOCAL_MACHINE主键
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.RegistryBaseKey.Users">
            <summary>
            对应于HKEY_USER主键
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.RegistryBaseKey.CurrentConfig">
            <summary>
            对应于HEKY_CURRENT_CONFIG主键
            </summary>
        </member>
        <member name="T:JCE.Utils.Windows.RegistryUtil">
            <summary>
            注册表操作工具类
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.#ctor">
            <summary>
            构造函数，使用默认参数实例化一个注册表操作实例
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.#ctor(System.String)">
            <summary>
            构造函数，使用参数实例化一个注册表操作实例
            </summary>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.#ctor(JCE.Utils.Windows.RegistryBaseKey,System.String)">
            <summary>
            构造函数，使用参数实例化一个注册表操作实例
            </summary>
            <param name="baseKey">注册表基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.GetTopKey">
            <summary>
            获取注册表基项域对应顶级节点
            </summary>
            <returns>顶级节点</returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.GetTopKey(JCE.Utils.Windows.RegistryBaseKey)">
            <summary>
            获取指定注册表基项域对应顶级节点
            </summary>
            <param name="baseKey">注册表基项域</param>
            <returns>顶级节点</returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.OpenSubKey(System.Boolean)">
            <summary>
            打开注册表项节点
            </summary>
            <param name="writable">true:只读访问,false:写访问</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.OpenSubKey(JCE.Utils.Windows.RegistryBaseKey,System.String,System.Boolean)">
            <summary>
            打开注册表项节点，以只读的方式检查子项
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项名称</param>
            <param name="writable">true:只读访问,false:写访问</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.IsExistsSubKey">
            <summary>
            是否存在注册表项
            </summary>
            <returns>true:存在,false:不存在</returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.IsExistsSubKey(JCE.Utils.Windows.RegistryBaseKey,System.String)">
            <summary>
            是否存在指定的注册表项
            </summary>
            <param name="baseKey">要检查的基项域</param>
            <param name="subKeyName">要检查的注册表项名称</param>
            <returns>true:存在,false:不存在</returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.IsExistsValueName">
            <summary>
            是否存在键值
            </summary>
            <returns>true:存在,false:不存在</returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.IsExistsValueName(JCE.Utils.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            检查指定注册表项中是否存在指定键值
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <returns>true:存在,false:不存在</returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.CreateSubKey">
            <summary>
            创建注册表项
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.CreateSubKey(JCE.Utils.Windows.RegistryBaseKey,System.String)">
            <summary>
            在指定基项域中创建爱你注册表项
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.DeleteSubKey">
            <summary>
            删除注册表项
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.DeleteSubKey(JCE.Utils.Windows.RegistryBaseKey,System.String)">
            <summary>
            删除指定基项域中的注册表项
            </summary>
            <param name="baseKey">指定基项域</param>
            <param name="subKeyName">注册表项名称</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.GetValue">
            <summary>
            获取键值内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.GetValue(JCE.Utils.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            获取指定键值的内容
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.SetValue(System.Object)">
            <summary>
            设置键值的内容
            </summary>
            <param name="value">内容</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.SetValue(System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            设置键值的内容，并指定数据类型
            </summary>
            <param name="value">要设置的值</param>
            <param name="valueKind">设置值得数据类型</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.SetValue(JCE.Utils.Windows.RegistryBaseKey,System.String,System.String,System.Object)">
            <summary>
            设置指定键值的内容
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <param name="value">要设置的值</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.SetValue(JCE.Utils.Windows.RegistryBaseKey,System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)">
            <summary>
            设置键值的内容，并指定数据类型
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
            <param name="value">要设置的值</param>
            <param name="valueKind">设置值得数据类型</param>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.DeleteValue">
            <summary>
            删除键值
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.RegistryUtil.DeleteValue(JCE.Utils.Windows.RegistryBaseKey,System.String,System.String)">
            <summary>
            删除指定的键值
            </summary>
            <param name="baseKey">基项域</param>
            <param name="subKeyName">注册表项</param>
            <param name="valueName">要检查的键值名称</param>
        </member>
        <member name="P:JCE.Utils.Windows.RegistryUtil.BaseKey">
            <summary>
            获取或设置注册表基项域
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.RegistryUtil.SubKeyName">
            <summary>
            注册表项名称
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.RegistryUtil.ValueName">
            <summary>
            键值名称
            </summary>
        </member>
        <member name="T:JCE.Utils.Windows.SystemInfo">
            <summary>
            系统信息类
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.CpuName">
            <summary>
            获取或设置 CPU型号
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.CpuId">
            <summary>
            获取或设置 CPU编号
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.BoardName">
            <summary>
            获取或设置 主板型号
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.BoardId">
            <summary>
            获取或设置 主板编号
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.DiskName">
            <summary>
            获取或设置 硬盘型号
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.DiskId">
            <summary>
            获取或设置 硬盘编号
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.OSName">
            <summary>
            获取或设置 操作系统名称
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.OSCsdVersion">
            <summary>
            获取或设置 操作系统补丁版本
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.OSIs64Bit">
            <summary>
            获取或设置 是否64位操作系统
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.OSVersion">
            <summary>
            获取或设置 操作系统版本
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.OSPath">
            <summary>
            获取或设置 操作系统路径
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.PhysicalMemoryFree">
            <summary>
            获取或设置 可用物理内存，单位：MB
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.PhysicalMemoryTotal">
            <summary>
            获取或设置 总共物理内存，单位：MB
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.ScreenWith">
            <summary>
            获取或设置 屏幕分辨率宽
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.ScreenHeight">
            <summary>
            获取或设置 屏幕分辨率高
            </summary>
        </member>
        <member name="P:JCE.Utils.Windows.SystemInfo.ScreenColorDepth">
            <summary>
            获取或设置 屏幕色深
            </summary>
        </member>
        <member name="T:JCE.Utils.Windows.SystemInfoHandler">
            <summary>
            获取系统硬件、软件信息
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetWmiInfos(JCE.Utils.Windows.WMIPath)">
            <summary>
            获取指定WMI路径的信息集合
            </summary>
            <param name="wmi">WMI地址</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetHardwareId">
            <summary>
            获取硬件信息标识
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetHardwareId(System.String)">
            <summary>
            由指定字符串生成硬件信息标识
            </summary>
            <param name="value">字符串</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetOperationSystemName">
            <summary>
            获取操作系统名称
            </summary>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetSystemInfo">
            <summary>
            获取系统信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetProcessNames">
            <summary>
            获取当前系统运行的进程列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetStartedServiceNamesEnumerable">
            <summary>
            获取当前系统正在运行的服务列表
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Windows.SystemInfoHandler.GetMaxFreeSizeLogicalDisk">
            <summary>
            获取剩余空间最大的逻辑磁盘名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Windows.WMIPath">
            <summary>
            WMI地址枚举
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Processor">
            <summary>
            CPU 处理器
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_PhysicalMemory">
            <summary>
            物理内存条
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Keyboard">
            <summary>
            键盘
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_PointingDevice">
            <summary>
            点输入设备，包括鼠标。
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_FloppyDrive">
            <summary>
            软盘驱动器
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_DiskDrive">
            <summary>
            硬盘驱动器
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_CDROMDrive">
            <summary>
            光盘驱动器
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_BaseBoard">
            <summary>
            主板
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_BIOS">
            <summary>
            BIOS 芯片
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_ParallelPort">
            <summary>
            并口
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_SerialPort">
            <summary>
            串口
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_SerialPortConfiguration">
            <summary>
            串口配置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_SoundDevice">
            <summary>
            多媒体设置，一般指声卡。
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_SystemSlot">
            <summary>
            主板插槽 (ISA PCI  AGP)
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_USBController">
            <summary>
            USB 控制器
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_NetworkAdapter">
            <summary>
            网络适配器
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_NetworkAdapterConfiguration">
            <summary>
            网络适配器设置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Printer">
            <summary>
            打印机
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_PrinterConfiguration">
            <summary>
            打印机设置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_PrintJob">
            <summary>
            打印机任务
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_TCPIPPrinterPort">
            <summary>
            打印机端口
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_POTSModem">
            <summary>
            MODEM
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_POTSModemToSerialPort">
            <summary>
            MODEM 端口
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_DesktopMonitor">
            <summary>
            显示器
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_DisplayConfiguration">
            <summary>
            显卡
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_DisplayControllerConfiguration">
            <summary>
            显卡设置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_VideoController">
            <summary>
            显卡细节
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_VideoSettings">
            <summary>
            显卡支持的显示模式
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_TimeZone">
            <summary>
            时区
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_SystemDriver">
            <summary>
            驱动程序
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_DiskPartition">
            <summary>
            磁盘分区
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_LogicalDisk">
            <summary>
            逻辑磁盘
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_LogicalDiskToPartition">
            <summary>
            逻辑磁盘所在分区及始末位置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_LogicalMemoryConfiguration">
            <summary>
            逻辑内存配置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_PageFile">
            <summary>
            系统页文件信息
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_PageFileSetting">
            <summary>
            页文件设置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_BootConfiguration">
            <summary>
            系统启动配置
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_ComputerSystem">
            <summary>
            计算机信息简要
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_OperatingSystem">
            <summary>
            操作系统信息
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_StartupCommand">
            <summary>
            系统自动启动程序
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Service">
            <summary>
            系统安装的服务
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Group">
            <summary>
            系统管理组
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_GroupUser">
            <summary>
            系统组帐号
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_UserAccount">
            <summary>
            用户帐号
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Process">
            <summary>
            系统进程
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Thread">
            <summary>
            系统线程
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_Share">
            <summary>
            共享
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_NetworkClient">
            <summary>
            已安装的网络客户端
            </summary>
        </member>
        <member name="F:JCE.Utils.Windows.WMIPath.Win32_NetworkProtocol">
            <summary>
            已安装的网络协议
            </summary>
        </member>
        <member name="T:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder">
            <summary>
            Xml子节点动态生成器
            </summary>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder.#ctor(JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder)">
            <summary>
            构造函数，初始化Xml节点动态生成器
            </summary>
            <param name="parent">Xml节点动态生成器</param>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder.AddNode(JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder)">
            <summary>
            添加节点生成器
            </summary>
            <param name="node">节点生成器</param>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder.Any">
            <summary>
            确认Xml子节点生成器是否包含任何元素
            </summary>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder.Build(System.Int32)">
            <summary>
            生成Xml文档
            </summary>
            <param name="level">层级</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            尝试获取成员值
            </summary>
            <param name="binder">获取成员值</param>
            <param name="result">结果</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            尝试调用成员
            </summary>
            <param name="binder">调用操作</param>
            <param name="args">参数</param>
            <param name="result">结果</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Xmls.DynamicBuilder.ChildXmlNodesBuilder.End">
            <summary>
            结束节点
            </summary>
        </member>
        <member name="T:JCE.Utils.Xmls.DynamicBuilder.XmlBuilder">
            <summary>
            Xml动态生成器
            </summary>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.XmlBuilder.Create">
            <summary>
            创建节点
            </summary>
            <returns></returns>
        </member>
        <member name="T:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder">
            <summary>
            Xml节点动态生成器
            </summary>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder.#ctor(System.String,JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder,System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            构造函数，初始化标签名、Xml父节点生成器、内容、属性字典
            </summary>
            <param name="tagName">标签名</param>
            <param name="parent">Xml父节点生成器</param>
            <param name="innerText">内容</param>
            <param name="attributes">属性字典</param>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder.AddNode(JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder)">
            <summary>
            添加节点
            </summary>
            <param name="node">Xml节点生成器</param>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder.Build(System.Int32)">
            <summary>
            生成Xml文档
            </summary>
            <param name="level">层级</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            尝试获取成员值
            </summary>
            <param name="binder">获取成员值</param>
            <param name="result">结果</param>
            <returns></returns>
        </member>
        <member name="M:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            尝试调用操作
            </summary>
            <param name="binder">调用操作</param>
            <param name="args">参数</param>
            <param name="result">结果</param>
            <returns></returns>
        </member>
        <member name="P:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder.End">
            <summary>
            Xml父节点生成器
            </summary>
        </member>
        <member name="P:JCE.Utils.Xmls.DynamicBuilder.XmlNodeBuilder.Begin">
            <summary>
            Xml子节点生成器
            </summary>
        </member>
    </members>
</doc>
